{"pretrained_model_name": "Salesforce/instructblip-flan-t5-xl", "description": "---\nlanguage: en\nlicense: mit\ntags:\n- vision\n- image-captioning\npipeline_tag: image-to-text\n---\n\n# InstructBLIP model\n\nInstructBLIP model using [Flan-T5-xl](https://huggingface.co/google/flan-t5-xl) as language model. InstructBLIP was introduced in the paper [InstructBLIP: Towards General-purpose Vision-Language Models with Instruction Tuning](https://arxiv.org/abs/2305.06500) by Dai et al.\n\nDisclaimer: The team releasing InstructBLIP did not write a model card for this model so this model card has been written by the Hugging Face team.\n\n## Model description\n\nInstructBLIP is a visual instruction tuned version of [BLIP-2](https://huggingface.co/docs/transformers/main/model_doc/blip-2). Refer to the paper for details.\n\n![InstructBLIP architecture](https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/transformers/model_doc/instructblip_architecture.jpg)\n\n## Intended uses & limitations\n\nUsage is as follows:\n\n```\nfrom transformers import InstructBlipProcessor, InstructBlipForConditionalGeneration\nimport torch\nfrom PIL import Image\nimport requests\n\nmodel = InstructBlipForConditionalGeneration.from_pretrained(\"Salesforce/instructblip-flan-t5-xl\")\nprocessor = InstructBlipProcessor.from_pretrained(\"Salesforce/instructblip-flan-t5-xl\")\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nmodel.to(device)\n\nurl = \"https://raw.githubusercontent.com/salesforce/LAVIS/main/docs/_static/Confusing-Pictures.jpg\"\nimage = Image.open(requests.get(url, stream=True).raw).convert(\"RGB\")\nprompt = \"What is unusual about this image?\"\ninputs = processor(images=image, text=prompt, return_tensors=\"pt\").to(device)\n\noutputs = model.generate(\n        **inputs,\n        do_sample=False,\n        num_beams=5,\n        max_length=256,\n        min_length=1,\n        top_p=0.9,\n        repetition_penalty=1.5,\n        length_penalty=1.0,\n        temperature=1,\n)\ngenerated_text = processor.batch_decode(outputs, skip_special_tokens=True)[0].strip()\nprint(generated_text)\n```\n\n### How to use\n\nFor code examples, we refer to the [documentation](https://huggingface.co/docs/transformers/main/en/model_doc/instructblip).", "size_bytes": 16091880448, "downloads": 25572}