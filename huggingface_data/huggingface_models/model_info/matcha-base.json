{"pretrained_model_name": "google/matcha-base", "description": "---\nlanguage:\n  - en\n  - fr\n  - ro\n  - de\n  - multilingual\ninference: false\npipeline_tag: visual-question-answering\nlicense: apache-2.0\ntags:\n- matcha\n---\n# Model card for MatCha - base model\n\n<img src=\"https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/transformers/model_doc/matcha_architecture.jpg\"\nalt=\"drawing\" width=\"600\"/>\n\nThis model is the base MatCha model. Can be used for fine-tuning purposes only.\n\n#  Table of Contents\n\n0. [TL;DR](#TL;DR)\n1. [Using the model](#using-the-model)\n2. [Contribution](#contribution)\n3. [Citation](#citation)\n\n# TL;DR\n\nThe abstract of the paper states that: \n> Visual language data such as plots, charts, and infographics are ubiquitous in the human world. However, state-of-the-art visionlanguage models do not perform well on these data. We propose MATCHA (Math reasoning and Chart derendering pretraining) to enhance visual language models\u2019 capabilities jointly modeling charts/plots and language data. Specifically we propose several pretraining tasks that cover plot deconstruction and numerical reasoning which are the key capabilities in visual language modeling. We perform the MATCHA pretraining starting from Pix2Struct, a recently proposed imageto-text visual language model. On standard benchmarks such as PlotQA and ChartQA, MATCHA model outperforms state-of-the-art methods by as much as nearly 20%. We also examine how well MATCHA pretraining transfers to domains such as screenshot, textbook diagrams, and document figures and observe overall improvement, verifying the usefulness of MATCHA pretraining on broader visual language tasks.\n\n# Using the model \n\n```python\nfrom transformers import Pix2StructProcessor, Pix2StructForConditionalGeneration\nimport requests\nfrom PIL import Image\n\nprocessor = Pix2StructProcessor.from_pretrained('google/matcha-base')\nmodel = Pix2StructForConditionalGeneration.from_pretrained('google/matcha-base')\n\nurl = \"https://raw.githubusercontent.com/vis-nlp/ChartQA/main/ChartQA%20Dataset/val/png/20294671002019.png\"\nimage = Image.open(requests.get(url, stream=True).raw)\n\ninputs = processor(images=image, text=\"Is the sum of all 4 places greater than Laos?\", return_tensors=\"pt\")\npredictions = model.generate(**inputs, max_new_tokens=512)\nprint(processor.decode(predictions[0], skip_special_tokens=True))\n>>> No\n```\n\n# Converting from T5x to huggingface\n\nYou can use the [`convert_pix2struct_checkpoint_to_pytorch.py`](https://github.com/huggingface/transformers/blob/main/src/transformers/models/pix2struct/convert_pix2struct_original_pytorch_to_hf.py) script as follows:\n```bash\npython convert_pix2struct_checkpoint_to_pytorch.py --t5x_checkpoint_path PATH_TO_T5X_CHECKPOINTS --pytorch_dump_path PATH_TO_SAVE --is_vqa\n```\nif you are converting a large model, run:\n```bash\npython convert_pix2struct_checkpoint_to_pytorch.py --t5x_checkpoint_path PATH_TO_T5X_CHECKPOINTS --pytorch_dump_path PATH_TO_SAVE --use-large --is_vqa\n```\nOnce saved, you can push your converted model with the following snippet:\n```python\nfrom transformers import Pix2StructForConditionalGeneration, Pix2StructProcessor\n\nmodel = Pix2StructForConditionalGeneration.from_pretrained(PATH_TO_SAVE)\nprocessor = Pix2StructProcessor.from_pretrained(PATH_TO_SAVE)\n\nmodel.push_to_hub(\"USERNAME/MODEL_NAME\")\nprocessor.push_to_hub(\"USERNAME/MODEL_NAME\")\n```\n\n# Contribution\n\nThis model was originally contributed by Fangyu Liu, Francesco Piccinno et al. and added to the Hugging Face ecosystem by [Younes Belkada](https://huggingface.co/ybelkada).\n\n# Citation\n\nIf you want to cite this work, please consider citing the original paper:\n```\n@misc{liu2022matcha,\n      title={MatCha: Enhancing Visual Language Pretraining with Math Reasoning and Chart Derendering}, \n      author={Fangyu Liu and Francesco Piccinno and Syrine Krichene and Chenxi Pang and Kenton Lee and Mandar Joshi and Yasemin Altun and Nigel Collier and Julian Martin Eisenschlos},\n      year={2022},\n      eprint={2212.09662},\n      archivePrefix={arXiv},\n      primaryClass={cs.CL}\n}\n```", "size_bytes": "1129238081", "downloads": 783}