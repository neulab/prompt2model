{"pretrained_model_name": "persiannlp/mt5-small-parsinlu-multiple-choice", "description": "---\nlanguage:\n- fa\n- multilingual\nthumbnail: https://upload.wikimedia.org/wikipedia/commons/a/a2/Farsi.svg\ntags:\n- multiple-choice\n- mt5\n- persian\n- farsi\nlicense: cc-by-nc-sa-4.0\ndatasets:\n- parsinlu\nmetrics:\n- accuracy\n---\n\n# Multiple-Choice Question Answering (\u0645\u062f\u0644 \u0628\u0631\u0627\u06cc \u067e\u0627\u0633\u062e \u0628\u0647 \u0633\u0648\u0627\u0644\u0627\u062a \u0686\u0647\u0627\u0631 \u062c\u0648\u0627\u0628\u06cc)\n\nThis is a mT5-based model for multiple-choice question answering. \nHere is an example of how you can run this model: \n\n```python \nfrom transformers import MT5ForConditionalGeneration, MT5Tokenizer\n\nmodel_size = \"small\"\nmodel_name = f\"persiannlp/mt5-{model_size}-parsinlu-multiple-choice\"\ntokenizer = MT5Tokenizer.from_pretrained(model_name)\nmodel = MT5ForConditionalGeneration.from_pretrained(model_name)\n\n\ndef run_model(input_string, **generator_args):\n    input_ids = tokenizer.encode(input_string, return_tensors=\"pt\")\n    res = model.generate(input_ids, **generator_args)\n    output = tokenizer.batch_decode(res, skip_special_tokens=True)\n    print(output)\n    return output\n\n\nrun_model(\"\u0648\u0633\u06cc\u0639 \u062a\u0631\u06cc\u0646 \u06a9\u0634\u0648\u0631 \u062c\u0647\u0627\u0646 \u06a9\u062f\u0627\u0645 \u0627\u0633\u062a\u061f <sep> \u0622\u0645\u0631\u06cc\u06a9\u0627 <sep> \u06a9\u0627\u0646\u0627\u062f\u0627 <sep> \u0631\u0648\u0633\u06cc\u0647 <sep> \u0686\u06cc\u0646\")\nrun_model(\"\u0637\u0627\u0645\u0639 \u06cc\u0639\u0646\u06cc \u061f <sep> \u0622\u0632\u0645\u0646\u062f <sep> \u062e\u0648\u0634 \u0634\u0627\u0646\u0633 <sep> \u0645\u062d\u062a\u0627\u062c <sep> \u0645\u0637\u0645\u0626\u0646\")\nrun_model(\n    \"\u0632\u0645\u06cc\u0646\u06cc \u0628\u0647 \u06f3\u06f1 \u0642\u0637\u0639\u0647 \u0645\u062a\u0633\u0627\u0648\u06cc \u0645\u0641\u0631\u0648\u0636 \u0634\u062f\u0647 \u0627\u0633\u062a \u0648 \u0647\u0631 \u0631\u0648\u0632 \u0645\u0633\u0627\u062d\u062a \u0622\u0645\u0627\u062f\u0647 \u0634\u062f\u0647 \u0628\u0631\u0627\u06cc \u0627\u062d\u062f\u0627\u062b\u060c \u062f\u0648 \u0628\u0631\u0627\u0628\u0631 \u0645\u0633\u0627\u062d\u062a \u0631\u0648\u0632 \u0642\u0628\u0644 \u0627\u0633\u062a.\u0627\u06af\u0631 \u067e\u0633 \u0627\u0632 (\u06f5 \u0631\u0648\u0632) \u062a\u0645\u0627\u0645 \u0632\u0645\u06cc\u0646 \u0622\u0645\u0627\u062f\u0647 \u0634\u062f\u0647 \u0628\u0627\u0634\u062f\u060c \u062f\u0631 \u0686\u0647 \u0631\u0648\u0632\u06cc \u06cc\u06a9 \u0642\u0637\u0639\u0647 \u0632\u0645\u06cc\u0646 \u0622\u0645\u0627\u062f\u0647 \u0634\u062f\u0647 <sep> \u0631\u0648\u0632 \u0627\u0648\u0644 <sep> \u0631\u0648\u0632 \u062f\u0648\u0645 <sep> \u0631\u0648\u0632 \u0633\u0648\u0645 <sep> \u0647\u06cc\u0686\u06a9\u062f\u0627\u0645\")\n\n```\n\n\nFor more details, visit this page: https://github.com/persiannlp/parsinlu/ \n", "size_bytes": "1200773595", "downloads": 4}