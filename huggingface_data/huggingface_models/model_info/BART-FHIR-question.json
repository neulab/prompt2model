{"pretrained_model_name": "rasta/BART-FHIR-question", "description": "---\nlicense: apache-2.0\nlanguage:\n- en\nmetrics:\n- accuracy\npipeline_tag: text2text-generation\ntags:\n- health\n- FHIR\n---\n\n# bart-large\n\nThis model is a fine-tuned version of [bart-large](https://huggingface.co/facebook/bart-large) on a manually created dataset.\nIt achieves the following results on the evaluation set:\n- Loss: 0.40\n\n### Training hyperparameters\n\nThe following hyperparameters were used during training:\n- learning_rate: 2e-05\n- train_batch_size: 64\n- eval_batch_size: 64\n- seed: 42\n- optimizer: Adam with betas=(0.9,0.999) and epsilon=1e-08\n- num_epochs: 3\n\n### Training results\n\n| Training Loss | Epoch | Step | Validation Loss | \n|:-------------:|:-----:|:----:|:---------------:|\n| -          | 1.0   | 47    | 4.5156\n...\n| -         | 10    | 490   | 0.4086         \n\n\n## How to use\n\n```python\ndef generate_text(input_text):\n    # Tokenize the input text\n    input_tokens = tokenizer(input_text, return_tensors='pt')\n\n    # Move the input tokens to the same device as the model\n    input_tokens = input_tokens.to(model.device)\n\n    # Generate text using the fine-tuned model\n    output_tokens = model.generate(**input_tokens)\n\n    # Decode the generated tokens to text\n    output_text = tokenizer.decode(output_tokens[0], skip_special_tokens=True)\n\n    return output_text\n\nfrom transformers import BartForConditionalGeneration\n\n# Load the pre-trained BART model from the Hugging Face model hub\nmodel = BartForConditionalGeneration.from_pretrained('rasta/BART-FHIR-question')\n\ninput_text = \"List all procedures with reason reference to resource with ID 24680135.\"\noutput_text = generate_text(input_text)\nprint(output_text)\n```\n\n\n### Framework versions\n\n- Transformers 4.18.0\n- Pytorch 1.11.0+cu113\n- Datasets 2.1.0\n- Tokenizers 0.12.1\n\n", "size_bytes": "1629544729", "downloads": 41}