{"pretrained_model_name": "niansong1996/lever-mbpp-codex", "description": "---\nlicense: apache-2.0\ndatasets:\n- mbpp\nmetrics:\n- accuracy\nmodel-index:\n- name: lever-mbpp-codex\n  results:\n  - task:\n      type: code generation             # Required. Example: automatic-speech-recognition\n      # name: {task_name}             # Optional. Example: Speech Recognition\n    dataset:\n      type: mbpp          # Required. Example: common_voice. Use dataset id from https://hf.co/datasets\n      name: mbpp (Python code generation)          # Required. A pretty name for the dataset. Example: Common Voice (French)\n      # config: {dataset_config}      # Optional. The name of the dataset configuration used in `load_dataset()`. Example: fr in `load_dataset(\"common_voice\", \"fr\")`. See the `datasets` docs for more info: https://huggingface.co/docs/datasets/package_reference/loading_methods#datasets.load_dataset.name\n      # split: {dataset_split}        # Optional. Example: test\n      # revision: {dataset_revision}  # Optional. Example: 5503434ddd753f426f4b38109466949a1217c2bb\n      # args:\n      #   {arg_0}: {value_0}          # Optional. Additional arguments to `load_dataset()`. Example for wikipedia: language: en\n      #   {arg_1}: {value_1}          # Optional. Example for wikipedia: date: 20220301\n    metrics:\n      - type: accuracy         # Required. Example: wer. Use metric id from https://hf.co/metrics\n        value: 68.9       # Required. Example: 20.90\n        # name: {metric_name}         # Optional. Example: Test WER\n        # config: {metric_config}     # Optional. The name of the metric configuration used in `load_metric()`. Example: bleurt-large-512 in `load_metric(\"bleurt\", \"bleurt-large-512\")`. See the `datasets` docs for more info: https://huggingface.co/docs/datasets/v2.1.0/en/loading#load-configurations\n        # args:\n        #   {arg_0}: {value_0}        # Optional. The arguments passed during `Metric.compute()`. Example for `bleu`: max_order: 4\n        verified: false              # Optional. If true, indicates that evaluation was generated by Hugging Face (vs. self-reported).\n---\n\n# LEVER (for Codex on MBPP)\n\nThis is one of the models produced by the paper [\"LEVER: Learning to Verify Language-to-Code Generation with Execution\"](https://arxiv.org/abs/2302.08468).\n\n**Authors:** [Ansong Ni](https://niansong1996.github.io), Srini Iyer, Dragomir Radev, Ves Stoyanov, Wen-tau Yih, Sida I. Wang*, Xi Victoria Lin*\n\n**Note**: This specific model is for Codex on the [MBPP](https://github.com/google-research/google-research/tree/master/mbpp) dataset, for the models pretrained on other datasets, please see:\n* [lever-spider-codex](https://huggingface.co/niansong1996/lever-spider-codex)\n* [lever-wikitq-codex](https://huggingface.co/niansong1996/lever-wikitq-codex)\n* [lever-gsm8k-codex](https://huggingface.co/niansong1996/lever-gsm8k-codex)\n\n![Model Image](https://huggingface.co/niansong1996/lever-mbpp-codex/resolve/main/lever_info.png)\n\n# Model Details\n\n\n## Model Description\nThe advent of pre-trained code language models (Code LLMs) has led to significant progress in language-to-code generation. State-of-the-art approaches in this area combine CodeLM decoding with sample pruning and reranking using test cases or heuristics based on the execution results. However, it is challenging to obtain test cases for many real-world language-to-code applications, and heuristics cannot well capture the semantic features of the execution results, such as data type and value range, which often indicates the correctness of the program. In this work, we propose LEVER, a simple approach to improve language-to-code generation by learning to verify the generated programs with their execution results. Specifically, we train verifiers to determine whether a program sampled from the CodeLM is correct or not based on the natural language input, the program itself and its execution results. The sampled programs are reranked by combining the verification score with the CodeLM generation probability, and marginalizing over programs with the same execution results. On four datasets across the domains of table QA, math QA and basic Python programming, LEVER consistently improves over the base Code LLMs (4.6% to 10.9% with code-davinci-002) and achieves new state-of-the-art results on all of them.\n\n\n- **Developed by:** Yale University and Meta AI\n- **Shared by:** Ansong Ni\n\n- **Model type:** Text Classification\n- **Language(s) (NLP):** More information needed\n- **License:** Apache-2.0\n- **Parent Model:** T5-large\n- **Resources for more information:**\n \t- [Github Repo](https://github.com/niansong1996/lever)\n \t- [Associated Paper](https://arxiv.org/abs/2302.08468)\n\n\n# Uses\n \n\n## Direct Use\n\nThis model is *not* intended to be directly used. LEVER is used to verify and rerank the programs generated by code LLMs (e.g., Codex). We recommend checking out our [Github Repo](https://github.com/niansong1996/lever) for more details.\n \n## Downstream Use\n\nLEVER is learned to verify and rerank the programs sampled from code LLMs for different tasks. \nMore specifically, for `lever-mbpp-codex`, it was trained on the outputs of `code-davinci-002` on the [MBPP](https://github.com/google-research/google-research/tree/master/mbpp) dataset. It can be used to rerank the SQL programs generated by Codex out-of-box.\nMoreover, it may also be applied to other model's outputs on the MBPP dataset, as studied in the [Original Paper](https://arxiv.org/abs/2302.08468).\n\n\n \n## Out-of-Scope Use\n \nThe model should not be used to intentionally create hostile or alienating environments for people. \n \n# Bias, Risks, and Limitations\n \n \nSignificant research has explored bias and fairness issues with language models (see, e.g., [Sheng et al. (2021)](https://aclanthology.org/2021.acl-long.330.pdf) and [Bender et al. (2021)](https://dl.acm.org/doi/pdf/10.1145/3442188.3445922)). Predictions generated by the model may include disturbing and harmful stereotypes across protected classes; identity characteristics; and sensitive, social, and occupational groups.\n\n\n\n## Recommendations\n \nUsers (both direct and downstream) should be made aware of the risks, biases and limitations of the model. More information needed for further recommendations.\n\n# Training Details\n \n## Training Data\n \nThe model is trained with the outputs from `code-davinci-002` model on the [MBPP](https://github.com/google-research/google-research/tree/master/mbpp) dataset.\n \n## Training Procedure\n\n20 program samples are drawn from the Codex model on the training examples of the MBPP dataset, those programs are later executed to obtain the execution information.\nAnd for each example and its program sample, the natural language description and execution information are also part of the inputs that used to train the T5-based model to predict \"yes\" or \"no\" as the verification labels.\n\n \n### Preprocessing\n \nPlease follow the instructions in the [Github Repo](https://github.com/niansong1996/lever) to reproduce the results.\n\n\n \n### Speeds, Sizes, Times\n \nMore information needed \n\n\n \n# Evaluation\n \n \n## Testing Data, Factors & Metrics\n \n### Testing Data\n \nDev set of the [MBPP](https://github.com/google-research/google-research/tree/master/mbpp) dataset.\n \n### Factors\nMore information needed\n \n### Metrics\n \nExecution accuracy (i.e., pass@1)\n \n \n## Results \n \n\n### MBPP Python Program Generation\n\n|                 | Exec. Acc. (Dev) | Exec. Acc. (Test) |\n|-----------------|------------------|-------------------|\n| Codex           |         61.1     |       62.0        |\n| Codex+LEVER     |         75.4     |       68.9        |\n\n\n \n# Model Examination\n\nMore information needed\n\n \n# Environmental Impact\n \nCarbon emissions can be estimated using the [Machine Learning Impact calculator](https://mlco2.github.io/impact#compute) presented in [Lacoste et al. (2019)](https://arxiv.org/abs/1910.09700).\n \n- **Hardware Type:** More information needed\n- **Hours used:** More information needed\n- **Cloud Provider:** More information needed\n- **Compute Region:** More information needed\n- **Carbon Emitted:** More information needed\n \n# Technical Specifications [optional]\n \n## Model Architecture and Objective\n \n`lever-mbpp-codex` is based on T5-large.\n\n## Compute Infrastructure\n \nMore information needed\n \n### Hardware\n \n \nMore information needed\n \n### Software\n \nMore information needed.\n \n# Citation\n\n \n**BibTeX:**\n \n \n```bibtex\n@inproceedings{ni2023lever,\n  title={Lever: Learning to verify language-to-code generation with execution},\n  author={Ni, Ansong and Iyer, Srini and Radev, Dragomir and Stoyanov, Ves and Yih, Wen-tau and Wang, Sida I and Lin, Xi Victoria},\n  booktitle={Proceedings of the 40th International Conference on Machine Learning (ICML'23)},\n  year={2023}\n}\n```\n \n \n \n \n# Glossary [optional]\n \nMore information needed\n\n# More Information [optional]\nMore information needed \n\n \n# Model Card Author and Contact\n \nAnsong Ni, contact info on [personal website](https://niansong1996.github.io)\n \n# How to Get Started with the Model\n \nThis model is *not* intended to be directly used, please follow the instructions in the [Github Repo](https://github.com/niansong1996/lever).", "size_bytes": "2950837703", "downloads": 7}