{"pretrained_model_name": "flexudy/t5-base-conceptor", "description": "# Towards Neuro-Symbolic Language Understanding\n\n![alt text](https://www.flexudy.com/wp-content/uploads/2021/09/conceptor.png \"Flexudy's conceptor\")\n\nAt [Flexudy](https://flexudy.com), we look for ways to unify symbolic and sub-symbolic methods to improve model interpretation and inference.\n\n## Problem\n\n1. Word embeddings are awesome \ud83d\ude80. However, no one really knows what an array of 768 numbers means?\n2. Text/Token classification is also awesome \u2764\ufe0f\u200d. Still, classifying things into a finite set of concepts is rather limited.\n3. Last but not least, how do I know that the word *cat* is a **mammal** and also an **animal** if my neural network is only trained to predict whether something is an animal or not?\n\n## Solution\n\n1. It would be cool if my neural network would just know that **cat** is an **animal** right? *\u2200x.Cat(x) \u21d2 Animal(x)*.\nOr for example, (*\u2200x.Sch\u00f6neBlumen(x) \u21d2 Blumen(x)*) -- English meaning: For all x, If x is a beautiful flower, then x is still a flower. --\n\n2. All of a sudden, tasks like **Question Answering**, **Summarization**, **Named Entity Recognition** or even **Intent Classification** etc become easier right?\n\nWell, one might probably still need time to build a good and robust solution that is not as large as **GPT3**.\n\nLike [Peter G\u00e4rdenfors, author of conceptual spaces](https://www.goodreads.com/book/show/1877443.Conceptual_Spaces), we are trying to find ways to navigate between the symbolic and the sub-symbolic by thinking in concepts.\n\nShould such a solution exist, one could easily leverage true logical reasoning engines on natural language.\n\nHow awesome would that be? \ud83d\udca1\n\n## Flexudy's Conceptor\n\n1. We developed a poor man's implementation of the ideal solution described above.\n2. Though it is a poor man's model, **it is still a useful one** \ud83e\udd17.\n\n### Usage\n\nNo library should anyone suffer. Especially not if it is built on top of \ud83e\udd17 **HF Transformers**.\n\n\nGo to the [Github repo](https://github.com/flexudy/natural-language-logic)\n\n`pip install git+https://github.com/flexudy/natural-language-logic.git@v0.0.1`\n\n```python\nfrom flexudy.conceptor.start import FlexudyConceptInferenceMachineFactory\n\n# Load me only once\nconcept_inference_machine = FlexudyConceptInferenceMachineFactory.get_concept_inference_machine()\n\n# A list of terms.\nterms = [\"cat\", \"dog\", \"economics and sociology\", \"public company\"]\n\n# If you don't pass the language, a language detector will attempt to predict it for you\n# If any error occurs, the language defaults to English.\nlanguage = \"en\"\n\n# Predict concepts\n# You can also pass the batch_size=2 and the beam_size=4\nconcepts = concept_inference_machine.infer_concepts(terms, language=language)\n```\n\nOutput:\n\n```python\n{'cat': ['mammal', 'animal'], 'dog': ['hound', 'animal'], 'economics and sociology': ['both fields of study'], 'public company': ['company']}\n```\n\n\n### How was it trained?\n\n1. Using Google's T5-base and T5-small. Both models are released on the Hugging Face Hub.\n2. T5-base was trained for only two epochs while T5-small was trained for 5 epochs.\n\n## Where did you get the data?\n\n1. I extracted and curated a fragment of [Conceptnet](https://conceptnet.io/)\n2. In particular, only the IsA relation was used.\n3. Note that one term can belong to multiple concepts (which is pretty cool if you think about [Fuzzy Description Logics](https://lat.inf.tu-dresden.de/~stefborg/Talks/QuantLAWorkshop2013.pdf)).\nMultiple inheritances however mean some terms belong to so many concepts. Hence, I decided to randomly throw away some due to the **maximum length limitation**.\n\n### Setup\n1. I finally allowed only `2` to `4` concepts at random for each term. This means, there is still great potential to make the models generalise better \ud83d\ude80.\n3. I used a total of `279884` training examples and `1260` for testing. Edges -- i.e `IsA(concept u, concept v)` -- in both sets are disjoint.\n4. Trained for `15K` steps with learning rate linear decay during each step. Starting at `0.001`\n5. Used `RAdam Optimiser` with weight_decay =`0.01` and batch_size =`36`.\n6. Source and target max length were both `64`.\n\n### Multilingual Models\n\n1. The \"conceptor\" model is multilingual. English, German and French is supported.\n2. [Conceptnet](https://conceptnet.io/) supports many languages, but I just chose those three because those are the ones I speak.\n\n### Metrics for flexudy-conceptor-t5-base\n\n| Metric        |         Score |\n| ------------- |:-------------:|\n| Exact Match   | 36.67         |\n| F1            | 43.08         |\n| Loss smooth   | 1.214         |\n\nUnfortunately, we no longer have the metrics for flexudy-conceptor-t5-small. If I recall correctly, base was just slightly better on the test set (ca. `2%` F1).\n\n## Why not just use the data if you have it structured already?\n\nConceptnet is very large. Even if you just consider loading a fragment into your RAM, say with only 100K edges, this is still a large graph.\nEspecially, if you think about how you will save the node embeddings efficiently for querying.\nIf you prefer this approach, [Milvus](https://github.com/milvus-io/pymilvus) can be of great help.\nYou can compute query embeddings and try to find the best match. From there (after matching), you can navigate through the graph at `100%` precision.\n", "size_bytes": "891730879", "downloads": 6}