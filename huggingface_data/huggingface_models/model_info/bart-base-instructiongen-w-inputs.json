{"pretrained_model_name": "pszemraj/bart-base-instructiongen-w-inputs", "description": "---\nlicense: apache-2.0\ntags:\n- instruct\n- instructions\n- domain adapt\n- instructiongen\nmetrics:\n- rouge\nwidget:\n- text: >-\n    You'll need to start by choosing the right venue. Consider the type of\n    atmosphere and the size of the area that will be suitable for the number of\n    guests you plan to invite. Choose the right decorations based on your\n    brother's interests, such as balloons in his favorite colors, banners, and\n    streamers. Next, decide on the food and drinks, making sure they are tasty\n    and appropriate for the occasion. Then decide on the other games, music, and\n    entertainment that will make the party memorable. Finally, involve your\n    brother's friends and family to help create the perfect surprise.\n  example_title: birthday party\n- text: 1) cookies and cream 2) chocolate chip 3) mint chip 4) oreo\n  example_title: ice cream\n- text: >-\n    Start by selecting a scale model of a building that fits the theme. Use a\n    hobby knife and glue to cut and assemble the model into a ruined or\n    abandoned version of itself, adding details like broken windows and\n    graffiti. Create a base for the diorama using foam, plaster, or other\n    materials, and paint it to resemble a ruined street or sidewalk. Add\n    miniature vehicles, debris, and figures to complete the scene, and use\n    weathering techniques like dry brushing and rust washes to add realism.\n    Display the diorama in a shadow box or other protective case to showcase\n    your work.\n  example_title: Miniature diorama creation\n- text: >-\n    Start by selecting clothing that is futuristic and edgy, such as leather\n    jackets, neon-colored accessories, and tech-inspired patterns. Add\n    accessories like goggles, cybernetic implants, and LED lights to enhance the\n    cyberpunk vibe. Use makeup and body paint to create a futuristic look, such\n    as metallic skin or neon makeup. Consider adding functional elements to your\n    costume, such as a built-in backpack or hidden pockets for your tech\n    gadgets. Finally, practice your confident walk and embrace your inner\n    cyberpunk for a memorable and immersive costume experience.\n  example_title: Cyberpunk costume design\n- text: >-\n    Start by creating a base terrain with mountains, valleys, and other natural\n    features. Use fractal noise and displacement mapping to add texture and\n    detail to the terrain, and experiment with different materials like rock,\n    grass, and water. Add surreal elements like floating islands, giant\n    mushrooms, or impossible geometry to create a dreamlike atmosphere. Use\n    lighting and color grading to enhance the mood and tone of the scene, and\n    render the final image at a high resolution for maximum impact. Share your\n    surreal landscape with the world and inspire others to explore the\n    possibilities of 3D art.\n  example_title: Surreal 3D landscape creation\n- text: >-\n    Start by setting a realistic goal and creating a training plan. Build up\n    your mileage gradually over time, and incorporate cross-training and\n    strength exercises to prevent injury and improve endurance. Be sure to stay\n    hydrated and properly fuel your body with nutritious foods. Listen to your\n    body and adjust your training as needed to avoid overexertion or burnout.\n    Finally, taper your training in the weeks leading up to the race to give\n    your body time to rest and recover before the big day.\n  example_title: Marathon training\ninference:\n  parameters:\n    max_length: 96\n    num_beams: 4\n    early_stopping: true\ndatasets:\n- pszemraj/fleece2instructions-inputs-alpaca-cleaned\nlanguage:\n- en\npipeline_tag: text2text-generation\nlibrary_name: transformers\n---\n\n\n# bart-base-instructiongen-w-inputs\n\nUse this text2text model to find out what LLM `instruction` (**and** `inputs` if relevant) might have generated `<arbitrary input text>`!\n\n\n\n- Check out a [basic demo on Spaces](https://huggingface.co/spaces/pszemraj/generate-instructions)\n- An example of how to use instructiongen models in a CLI script can be found [here](https://gist.github.com/pszemraj/8b0213e700763106074d3ac15d041c14)\n- You can find other models fine-tuned for instruction generation by [searching for the instructiongen tag](https://huggingface.co/models?other=instructiongen)\n\n## about\n\nThis model is a fine-tuned version of [facebook/bart-base](https://huggingface.co/facebook/bart-base) on the `pszemraj/fleece2instructions-inputs-alpaca-cleaned` dataset.\n\nIt achieves the following results on the evaluation set:\n- Loss: 0.9579\n- Rouge1: 62.3604\n- Rouge2: 39.5109\n- Rougel: 58.8843\n- Rougelsum: 60.4494\n- Gen Len: 24.9917\n\n\n## Example \n\n![base](https://i.imgur.com/1Vq5Fys.png)\n\n\n## Intended uses & limitations\n\nThis model is intended to be used to generate instructions from arbitrary text. You can then use these instructions + your data to fine-tune an LLM on instructions w.r.t. a specific domain. This model is primarily intended to enable **low-resource domain adaptation**, rather than \"_I want to generate even better prompts for the FLAN-V2 dataset!_\".\n\nThe `fleece2instructions-inputs-alpaca-cleaned` dataset, obtained from the [alpaca-lora repo](https://github.com/tloen/alpaca-lora) under the ODC-BY license, has been converted to a text2text format for use with language models. In this dataset, the original 'inputs' and 'instructions' columns are combined into a single 'instructions_inputs' column. To clearly separate the two types of content, each piece of text is prefixed with either an `<instruction>` or `<inputs>` token. These tokens not only facilitate model comprehension, but also allow for easy regex separation of model outputs during inference. \n\nAs such, users can expect the output of this model to be similarly structured with `<instruction>` and `<inputs>` tokens.\n\nThis is just the base model, for better performance (but slower/compute intensive) see the [bart-large](https://huggingface.co/pszemraj/bart-large-instructiongen-w-inputs) version. Further exploration/data may lead to even better models!\n\n## Training and evaluation data\n\nRefer to the [fleece2instructions-inputs-alpaca-cleaned](https://huggingface.co/datasets/pszemraj/fleece2instructions-inputs-alpaca-cleaned) dataset\n\n## Training procedure\n\n### Training hyperparameters\n\nThe following hyperparameters were used during training:\n- learning_rate: 8e-05\n- train_batch_size: 4\n- eval_batch_size: 4\n- seed: 42\n- distributed_type: multi-GPU\n- gradient_accumulation_steps: 16\n- total_train_batch_size: 64\n- optimizer: Adam with betas=(0.9,0.999) and epsilon=1e-08\n- lr_scheduler_type: cosine\n- lr_scheduler_warmup_ratio: 0.02\n- num_epochs: 2.0\n\n### Training results\n\n| Training Loss | Epoch | Step | Validation Loss | Rouge1  | Rouge2  | Rougel  | Rougelsum | Gen Len |\n|:-------------:|:-----:|:----:|:---------------:|:-------:|:-------:|:-------:|:---------:|:-------:|\n| 1.1147        | 1.0   | 680  | 0.9901          | 61.8451 | 38.8293 | 58.3372 | 59.8658   | 25.2401 |\n| 0.9565        | 2.0   | 1360 | 0.9579          | 62.3604 | 39.5109 | 58.8843 | 60.4494   | 24.9917 |", "size_bytes": "557967517", "downloads": 3}