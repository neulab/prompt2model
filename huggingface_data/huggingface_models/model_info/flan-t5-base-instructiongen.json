{"pretrained_model_name": "pszemraj/flan-t5-base-instructiongen", "description": "---\nlicense: apache-2.0\ntags:\n- self-instruct\n- instruction generation\n- instructiongen\ndatasets:\n- pszemraj/fleece2instructions\nmetrics:\n- rouge\nmodel-index:\n- name: flan-t5-base-instructiongen\n  results:\n  - task:\n      name: Sequence-to-sequence Language Modeling\n      type: text2text-generation\n    dataset:\n      name: pszemraj/fleece2instructions\n      type: pszemraj/fleece2instructions\n      split: validation\n    metrics:\n    - name: Rouge1\n      type: rouge\n      value: 58.9516\nwidget:\n- text: >-\n    You'll need to start by choosing the right venue. Consider the type of\n    atmosphere and the size of the area that will be suitable for the number of\n    guests you plan to invite. Choose the right decorations based on your\n    brother's interests, such as balloons in his favorite colors, banners, and\n    streamers. Next, decide on the food and drinks, making sure they are tasty\n    and appropriate for the occasion. Then decide on the other games, music, and\n    entertainment that will make the party memorable. Finally, involve your\n    brother's friends and family to help create the perfect surprise.\n  example_title: birthday party\n- text: 1) cookies and cream 2) chocolate chip 3) mint chip 4) oreo\n  example_title: ice cream\n- text: >-\n    Start by selecting a scale model of a building that fits the theme. Use a\n    hobby knife and glue to cut and assemble the model into a ruined or\n    abandoned version of itself, adding details like broken windows and\n    graffiti. Create a base for the diorama using foam, plaster, or other\n    materials, and paint it to resemble a ruined street or sidewalk. Add\n    miniature vehicles, debris, and figures to complete the scene, and use\n    weathering techniques like dry brushing and rust washes to add realism.\n    Display the diorama in a shadow box or other protective case to showcase\n    your work.\n  example_title: Miniature diorama creation\n- text: >-\n    Start by selecting clothing that is futuristic and edgy, such as leather\n    jackets, neon-colored accessories, and tech-inspired patterns. Add\n    accessories like goggles, cybernetic implants, and LED lights to enhance the\n    cyberpunk vibe. Use makeup and body paint to create a futuristic look, such\n    as metallic skin or neon makeup. Consider adding functional elements to your\n    costume, such as a built-in backpack or hidden pockets for your tech\n    gadgets. Finally, practice your confident walk and embrace your inner\n    cyberpunk for a memorable and immersive costume experience.\n  example_title: Cyberpunk costume design\n- text: >-\n    Start by creating a base terrain with mountains, valleys, and other natural\n    features. Use fractal noise and displacement mapping to add texture and\n    detail to the terrain, and experiment with different materials like rock,\n    grass, and water. Add surreal elements like floating islands, giant\n    mushrooms, or impossible geometry to create a dreamlike atmosphere. Use\n    lighting and color grading to enhance the mood and tone of the scene, and\n    render the final image at a high resolution for maximum impact. Share your\n    surreal landscape with the world and inspire others to explore the\n    possibilities of 3D art.\n  example_title: Surreal 3D landscape creation\n- text: >-\n    Start by setting a realistic goal and creating a training plan. Build up\n    your mileage gradually over time, and incorporate cross-training and\n    strength exercises to prevent injury and improve endurance. Be sure to stay\n    hydrated and properly fuel your body with nutritious foods. Listen to your\n    body and adjust your training as needed to avoid overexertion or burnout.\n    Finally, taper your training in the weeks leading up to the race to give\n    your body time to rest and recover before the big day.\n  example_title: Marathon training\n---\n\n\n# flan-t5-base-instructiongen\n\nInstead of generating questions from text, generate instructions for LLMs!\n\nThis model is a fine-tuned version of [google/flan-t5-base](https://huggingface.co/google/flan-t5-base) on the None dataset.\nIt achieves the following results on the evaluation set:\n- Loss: 1.0642\n- Rouge1: 58.9516\n- Rouge2: 41.8006\n- Rougel: 56.8249\n- Rougelsum: 56.9171\n- Gen Len: 13.1493\n\n## Intended uses & limitations\n\n> Of the three models fine-tuned so far, `flan-t5-base` is in an awkward position where it has the largest model file size, but not the best performance. I'd recommend looking at the two linked below.\n\nThis is just a `base` FLAN model, and is mostly uploaded for comparison with the [FLAN-small](https://huggingface.co/pszemraj/flan-t5-small-instructiongen) and [bart-base](https://huggingface.co/pszemraj/bart-base-instructiongen) variants.\n\nAdditionally, it was trained on a dataset of **only** instructions+outputs, with the `inputs` filtered out. This means that text of *1) cookies and cream 2) chocolate chip 3) mint chip 4) oreo* will **not** get you *\"Rank the following ice cream flavors: oreo, mint chip, chocolate chip, cookies and cream\"*\n\n## Training and evaluation data\n\nSee the linked dataset `pszemraj/fleece2instructions` - it is a filtered/formatted version of `tatsu-lab/alpaca` to generate instructions for arbitrary text.\n\n- Some of the API examples are intentionally weird to demonstrate the generalizability of the model.\n\n\n## Training and evaluation data\n\nMore information needed\n\n## Training procedure\n\n### Training hyperparameters\n\nThe following hyperparameters were used during training:\n- learning_rate: 8e-05\n- train_batch_size: 4\n- eval_batch_size: 4\n- seed: 42\n- distributed_type: multi-GPU\n- gradient_accumulation_steps: 16\n- total_train_batch_size: 64\n- optimizer: Adam with betas=(0.9,0.999) and epsilon=1e-08\n- lr_scheduler_type: cosine\n- lr_scheduler_warmup_ratio: 0.02\n- num_epochs: 2.0\n\n### Training results\n\n| Training Loss | Epoch | Step | Validation Loss | Rouge1  | Rouge2  | Rougel  | Rougelsum | Gen Len |\n|:-------------:|:-----:|:----:|:---------------:|:-------:|:-------:|:-------:|:---------:|:-------:|\n| 1.1939        | 1.0   | 362  | 1.0822          | 58.1758 | 40.9388 | 56.1219 | 56.2464   | 13.2592 |\n| 1.1667        | 2.0   | 724  | 1.0642          | 58.9516 | 41.8006 | 56.8249 | 56.9171   | 13.1493 |", "size_bytes": "990408885", "downloads": 8}