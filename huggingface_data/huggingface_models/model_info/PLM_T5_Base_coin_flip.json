{"pretrained_model_name": "WENGSYX/PLM_T5_Base_coin_flip", "description": "# Mastering Symbolic Operations: Augmenting Language Models with Compiled Neural Networks\n\n\n**Authors**: Yixuan Weng, Minjun Zhu, Fei Xia, Bin Li, Shizhu He, Kang Liu, Jun Zhao \ud83d\ude0e\n\n**[Contact]** If you have any questions, feel free to contact me via (wengsyx@gmail.com).\n\nThis repository contains code, models, and other related resources of our paper [\"Mastering Symbolic Operations: Augmenting Language Models with Compiled Neural Networks\"](https://arxiv.org/abs/2304.01665).\n\n\n****\n* [2023/05/19] We have supported the one-click implementation of integration between CoNN and PLM!\n* [2023/05/18] We have published the [\"paper-v2\"](https://arxiv.org/abs/2304.01665v2)!\n* [2023/04/04] We have used huggingface to release the weight of the CoNN model!\n* [2023/04/04] We have released the code for AutoCoNN!\n* [2023/04/03] We have published the paper!\n* [2023/03/26] We created the Github library!\n\n****\n\n\n\n### Install \n\n```\ngit clone https://github.com/WENGSYX/Neural-Comprehension\ncd Neural-Comprehension\npip install .\n```\n\nTo run neural comprehension, you need to install `PyTorch`, `Transformers`, `jax`, and `tracr`.\n```\n# https://beta.openai.com/account/api-keys\nexport OPENAI_API_KEY=(YOUR OPENAI API KEY)\n```\n\n### Use AutoCoNN to create your CoNN\n\nPlease note that setting an OpenAI Key is required to use AutoCoNN (but not necessary if you're just experimenting with neural cognition and CoNN models).\n\n```python\nfrom NeuralCom.AutoCoNN import AutoCoNN\n\nINSTRUCT = 'Create an SOp that is the last letter of a word'\nVOCAB = ['a','b','c','d','e','f','g']\nEXAMPLE = [[['a','b','c'],['c','c','c']],[['b','d'],['d','d']]]\n\nauto = AutoCoNN()\nmodel,tokenizer = auto(instruct=INSTRUCT,vocab=VOCAB,example=EXAMPLE)\n```\n\n\n\n\n\n\n\n### Use CoNN from huggingface\n\n```python\nfrom NeuralCom.CoNN.modeling_conn import CoNNModel\nfrom NeuralCom.CoNN import Tokenizer\n\n\nmodel = CoNNModel.from_pretrained('WENGSYX/CoNN_Reverse')\ntokenizer = Tokenizer(model.config.input_encoding_map, model.config.output_encoding_map,model.config.max_position_embeddings)\n\noutput = model(tokenizer('r e v e r s e').unsqueeze(0))\nprint(tokenizer.decode(output.argmax(2)))\n>>> [['bos', 'e', 's', 'r', 'e', 'v', 'e', 'r']]\n```\n\n\n### One-click implementation for Neural-Comprehension\n\n```python\nfrom transformers import AutoModel,AutoTokenizer,AutoModelForSeq2SeqLM\nfrom NeuralCom.CoNN.modeling_conn import CoNNModel\nfrom NeuralCom.CoNN import Tokenizer as CoNNTokenizer\nfrom NeuralCom.Model import NCModelForCoinFlip\n\nPLM = AutoModelForSeq2SeqLM.from_pretrained('WENGSYX/PLM_T5_Base_coin_flip')\nCoNN = CoNNModel.from_pretrained('WENGSYX/CoNN_Parity')\nPLMTokenizer = AutoTokenizer.from_pretrained('WENGSYX/PLM_T5_Base_coin_flip')\nCoNNTokenizer = CoNNTokenizer(CoNN.config.input_encoding_map, CoNN.config.output_encoding_map,CoNN.config.max_position_embeddings)\n\nneural_comprehension = NCModelForCoinFlip(PLM, CoNN, PLMTokenizer, CoNNTokenizer).to('cuda:0')\ninput_text = \"A coin is heads up. Aaron flips the coin. Julius does not flip the coin. Yixuan Weng flip the coin. Minjun Zhu does not flip the coin. Is the coin still heads up?\"\ninput_tokens_PLM = PLMTokenizer.encode(input_text, return_tensors='pt')\ngenerated_output = neural_comprehension.generate(input_tokens_PLM.to('cuda:0'))\ngenerated_text = PLMTokenizer.decode(generated_output, skip_special_tokens=True)\nprint(f\"Output: {generated_text}\")\n```\n\n\n#### Huggingface Model\n\nIn each link, we provide detailed instructions on how to use the CoNN model.\n\n| Model Name  | Model Size | Model Address                                             |\n| ----------- | ---------- | --------------------------------------------------------- |\n| Parity      | 2.2M       | [[link]](https://huggingface.co/WENGSYX/CoNN_Parity)      |\n| Reverse     | 4.3M       | [[link]](https://huggingface.co/WENGSYX/CoNN_Reverse)     |\n| Last Letter | 62.6K      | [[link]](https://huggingface.co/WENGSYX/CoNN_Last_Letter) |\n| Copy        | 8.8K       | [[link]](https://huggingface.co/WENGSYX/CoNN_Copy)        |\n| Add_Carry   | 117K       | [[link]](https://huggingface.co/WENGSYX/CoNN_Add_Carry)   |\n| Sub_Carry   | 117K       | [[link]](https://huggingface.co/WENGSYX/CoNN_Sub_Carry)   |\n\n###### If you have also created some amazing CoNN, you are welcome to share them publicly with us.\n\n\n## \ud83c\udf31 Neural-Comprehension's Roadmap \ud83c\udf31\n\n\nOur future plan includes but not limited to :\n- [x] One-click implementation of integration between CoNN and PLM (huggingface)\n- [ ] Combining CoNN with LLM (API-based)\n- [ ] Demo Presentation\n\n### \ud83d\ude4fCite\ud83d\ude4f\n\n\n###### If you are interested in our paper, please feel free to cite it.\n```\n@misc{weng2023mastering,\n      title={Mastering Symbolic Operations: Augmenting Language Models with Compiled Neural Networks}, \n      author={Yixuan Weng and Minjun Zhu and Fei Xia and Bin Li and Shizhu He and Kang Liu and Jun Zhao},\n      year={2023},\n      eprint={2304.01665},\n      archivePrefix={arXiv},\n      primaryClass={cs.CL}\n}\n```\n", "size_bytes": "891702929", "downloads": 2}