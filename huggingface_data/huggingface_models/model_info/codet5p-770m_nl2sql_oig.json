{"pretrained_model_name": "LarkAI/codet5p-770m_nl2sql_oig", "description": "---\nlicense: apache-2.0\ndatasets:\n- laion/OIG\nlanguage:\n- en\npipeline_tag: text2text-generation\ntags:\n- nl2sql\nwidget:\n  - text: 'Given the following schema:\\ntrack (Track_ID, Name, Location, Seating, Year_Opened)\\nrace (Race_ID, Name, Class, Date, Track_ID)\\nWrite a SQL query to count the number of tracks.'\n    example_title: 'count'\n  - text: 'Given the following schema:\\nmountain (Mountain_ID, Name, Height, Prominence, Range, Country)\\nclimber (Climber_ID, Name, Country, Time, Points, Mountain_ID)\\nWrite a SQL query to list the countries that have more than one mountain.'\n    example_title: 'having'\n  - text: 'Given the following schema:\\nairports (apid, name, city, country, x, y, elevation, iata, icao)\\nroutes (rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare)\\nairlines (alid, name, iata, icao, callsign, country, active)\\nWrite a SQL query to find the number of routes for each source airport and the airport name.'\n    example_title: 'join'\n---\n\n# How to Use\n\n```python\nimport torch\nfrom transformers import T5ForConditionalGeneration, AutoTokenizer\n\ndevice = torch.device(\"cuda:0\")\n\ntokenizer = AutoTokenizer.from_pretrained(\"LarkAI/codet5p-770m_nl2sql_oig\")\nmodel = T5ForConditionalGeneration.from_pretrained(\"LarkAI/codet5p-770m_nl2sql_oig\").to(device)\n\ntext = \"Given the following schema:\\ntrack (Track_ID, Name, Location, Seating, Year_Opened)\\nrace (Race_ID, Name, Class, Date, Track_ID)\\nWrite a SQL query to count the number of tracks.\"\ninputs = tokenizer.encode(text, return_tensors=\"pt\").to(device)\noutput_ids = model.generate(inputs, max_length=512)\nresponse_text = tokenizer.decode(outputs[0], skip_special_tokens=True)\n# SELECT COUNT( * ) FROM track\n```\n\n# How to Train\n\nDataset: \n- https://huggingface.co/datasets/laion/OIG#unified_sqlv1jsonl-17000\n- https://huggingface.co/datasets/laion/OIG#unified_sqlv2jsonl24000\n\n```json\n{\n    \"text\":\"<human>: Given the following schema:\\nlocation (restaurant_id, house_number, street_name, city_name)\\nrestaurant (id, name, food_type, city_name, rating)\\ngeographic (city_name, county, region)\\nWrite a SQL query to give me some good arabic -s on buchanan in san francisco ?\\n<bot>: SELECT location.house_number , restaurant.name FROM location , restaurant WHERE location.city_name = \\\"san francisco\\\" AND location.street_name = \\\"buchanan\\\" AND restaurant.food_type = \\\"arabic\\\" AND restaurant.id = location.restaurant_id AND restaurant.rating > 2.5 ;\",\n    \"metadata\":{\n        \"source\":\"unified_sqlv1\"\n    }\n}\n```", "size_bytes": "2950726657", "downloads": 403}