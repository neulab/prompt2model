{"pretrained_model_name": "ai4bharat/MultiIndicWikiBioUnified", "description": "---\ntags:\n- wikibio\n- multilingual\n- nlp\n- indicnlp\ndatasets:\n- ai4bharat/IndicWikiBio\nlanguage:\n- as\n- bn\n- hi\n- kn\n- ml\n- or\n- pa\n- ta\n- te\nlicenses:\n- cc-by-nc-4.0\nwidget:\n- <TAG> name </TAG> \u0928\u0935\u0924\u0947\u091c \u092d\u093e\u0930\u0924\u0940 <TAG> image </TAG> NavtejBharati . jpg <TAG> birth name </TAG> \u0928\u0935\u0924\u0947\u091c <TAG> birth date </TAG> 1938 <TAG> birth place </TAG> \u0930\u094b\u0921\u0947 , \u092d\u093e\u0930\u0924\u0940\u092f \u092a\u0902\u091c\u093e\u092c , \u092d\u093e\u0930\u0924 \u0964 \u092a\u0902\u091c\u093e\u092c <TAG> occupation </TAG> \u0932\u0947\u0916\u0915 , \u0915\u0935\u093f <TAG> nationality </TAG> \u0915\u0948\u0928\u0947\u0921\u093e \u0964 \u0915\u0948\u0928\u0947\u0921\u093f\u092f\u0928 <TAG> ethnicity </TAG> \u092a\u0902\u091c\u093e\u092c\u0940 \u0932\u094b\u0915 \u0964 \u092a\u0902\u091c\u093e\u092c\u0940 </s> <2hi>\n\n---\n\n# MultiIndicWikiBioUnified\n\nMultiIndicWikiBioUnified is a multilingual, sequence-to-sequence pre-trained model, a [IndicBART](https://huggingface.co/ai4bharat/IndicBART) checkpoint fine-tuned on the 9 languages of [IndicWikiBio](https://huggingface.co/datasets/ai4bharat/IndicWikiBio) dataset. For fine-tuning details,\nsee the [paper](https://arxiv.org/abs/2203.05437). You can use MultiIndicWikiBio to build biography generation applications for Indian languages by fine-tuning the model with supervised training data. Some salient features of the MultiIndicWikiBio are:\n\n<ul>\n<li >Supported languages: Assamese, Bengali, Hindi, Oriya, Punjabi, Kannada, Malayalam, Tamil, and Telugu. Not all of these languages are supported by mBART50 and mT5. </li>\n<li >The model is much smaller than the mBART and mT5(-base) models, so less computationally expensive for fine-tuning and decoding. </li>\n<li> Fine-tuned on an Indic language corpora (34,653 examples). </li>\n<li> All languages have been represented in Devanagari script to encourage transfer learning among the related languages. </li>\n</ul>\n\nYou can read more about MultiIndicWikiBioUnified in this <a href=\"https://arxiv.org/abs/2203.05437\">paper</a>.\n\n\n## Using this model in `transformers`\n\n```\nfrom transformers import MBartForConditionalGeneration, AutoModelForSeq2SeqLM\nfrom transformers import AlbertTokenizer, AutoTokenizer\n\ntokenizer = AutoTokenizer.from_pretrained(\"ai4bharat/MultiIndicWikiBioUnified\", do_lower_case=False, use_fast=False, keep_accents=True)\n# Or use tokenizer = AlbertTokenizer.from_pretrained(\"ai4bharat/MultiIndicWikiBioUnified\", do_lower_case=False, use_fast=False, keep_accents=True)\n\nmodel = AutoModelForSeq2SeqLM.from_pretrained(\"ai4bharat/MultiIndicWikiBioUnified\")\n# Or use model = MBartForConditionalGeneration.from_pretrained(\"ai4bharat/MultiIndicWikiBioUnified\")\n\n# Some initial mapping\nbos_id = tokenizer._convert_token_to_id_with_added_voc(\"<s>\")\neos_id = tokenizer._convert_token_to_id_with_added_voc(\"</s>\")\npad_id = tokenizer._convert_token_to_id_with_added_voc(\"<pad>\")\n# To get lang_id use any of ['<2as>', '<2bn>', '<2hi>', '<2kn>', '<2ml>', '<2or>', '<2pa>', '<2ta>', '<2te>']\n\n# First tokenize the input and outputs. The format below is how IndicBART was trained so the input should be \"Sentence </s> <2xx>\" where xx is the language code. Similarly, the output should be \"<2yy> Sentence </s>\". \ninp = tokenizer(\"<TAG> name </TAG> \u092d\u0940\u0916\u093e \u0932\u093e\u0932 <TAG> office </TAG> \u0935\u093f\u0927\u093e\u092f\u0915 - 318 - \u0939\u0938\u0928\u0917\u0902\u091c \u0935\u093f\u0927\u093e\u0928 \u0938\u092d\u093e \u0928\u093f\u0930\u094d\u0935\u093e\u091a\u0928 \u0915\u094d\u0937\u0947\u0924\u094d\u0930 , \u0909\u0924\u094d\u0924\u0930 \u092a\u094d\u0930\u0926\u0947\u0936 <TAG> term </TAG> 1957 \u0938\u0947 1962 <TAG> nationality </TAG> \u092d\u093e\u0930\u0924\u0940\u092f</s><2hi>\", add_special_tokens=False, return_tensors=\"pt\", padding=True).input_ids \n\nout = tokenizer(\"<2hi> \u092d\u0940\u0916\u093e \u0932\u093e\u0932 ,\u092d\u093e\u0930\u0924 \u0915\u0947 \u0909\u0924\u094d\u0924\u0930 \u092a\u094d\u0930\u0926\u0947\u0936 \u0915\u0940 \u0926\u0942\u0938\u0930\u0940 \u0935\u093f\u0927\u093e\u0928\u0938\u092d\u093e \u0938\u092d\u093e \u092e\u0947\u0902 \u0935\u093f\u0927\u093e\u092f\u0915 \u0930\u0939\u0947\u0964 </s>\", add_special_tokens=False, return_tensors=\"pt\", padding=True).input_ids \nmodel_outputs=model(input_ids=inp, decoder_input_ids=out[:,0:-1], labels=out[:,1:])\n\n# For loss\nmodel_outputs.loss ## This is not label smoothed.\n\n# For logits\nmodel_outputs.logits\n\n# For generation. Pardon the messiness. Note the decoder_start_token_id.\nmodel.eval() # Set dropouts to zero\n\nmodel_output=model.generate(inp, use_cache=True,no_repeat_ngram_size=3,encoder_no_repeat_ngram_size=3, num_beams=4, max_length=20, min_length=1, early_stopping=True, pad_token_id=pad_id, bos_token_id=bos_id, eos_token_id=eos_id, decoder_start_token_id=tokenizer._convert_token_to_id_with_added_voc(\"<2hi>\"))\n\n# Decode to get output strings\ndecoded_output=tokenizer.decode(model_output[0], skip_special_tokens=True, clean_up_tokenization_spaces=False)\n\nprint(decoded_output) # \u092d\u0940\u0916\u093e \u0932\u093e\u0932 ,\u092d\u093e\u0930\u0924 \u0915\u0947 \u0909\u0924\u094d\u0924\u0930 \u092a\u094d\u0930\u0926\u0947\u0936 \u0915\u0940 \u0926\u0942\u0938\u0930\u0940 \u0935\u093f\u0927\u093e\u0928\u0938\u092d\u093e \u0938\u092d\u093e \u092e\u0947\u0902 \u0935\u093f\u0927\u093e\u092f\u0915 \u0930\u0939\u0947\u0964\n\n# Disclaimer\nNote that if your output language is not Hindi or Marathi, you should convert its script from Devanagari to the desired language using the [Indic NLP Library](https://github.com/AI4Bharat/indic-bart/blob/main/indic_scriptmap.py).\n```\n# Note:\nIf you wish to use any language written in a non-Devanagari script, then you should first convert it to Devanagari using the <a href=\"https://github.com/anoopkunchukuttan/indic_nlp_library\">Indic NLP Library</a>. After you get the output, you should convert it back into the original script.\n\n## Benchmarks\n\nScores on the `IndicWikiBio` test sets are as follows:\n\nLanguage | RougeL\n---------|----------------------------\nas | 56.28\nbn | 57.42\nhi | 67.48\nkn | 40.01\nml | 38.84\nor | 67.13\npa | 52.88\nta | 51.82\nte | 51.43\n\n\n\n## Citation\n\nIf you use this model, please cite the following paper:\n```\n@inproceedings{Kumar2022IndicNLGSM,\n  title={IndicNLG Suite: Multilingual Datasets for Diverse NLG Tasks in Indic Languages},\n  author={Aman Kumar and Himani Shrotriya and Prachi Sahu and Raj Dabre and Ratish Puduppully and Anoop Kunchukuttan and Amogh Mishra and Mitesh M. Khapra and Pratyush Kumar},\n  year={2022},\n  url = \"https://arxiv.org/abs/2203.05437\"\n  }\n```\n# License\nThe model is available under the MIT License.", "size_bytes": "976422449", "downloads": 18}