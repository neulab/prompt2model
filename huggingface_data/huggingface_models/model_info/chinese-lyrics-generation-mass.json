{"pretrained_model_name": "zake7749/chinese-lyrics-generation-mass", "description": "---\nlicense: bigscience-openrail-m\nlanguage:\n- zh\npipeline_tag: text2text-generation\nthumbnail: Chinese Lyrics Generation with Masked Sequence-to-Sequence Pretraining.\n---\n\n# Chinese Generation with Masked Sequence-to-Sequence Pretraining\n\nThis repository demostrates a format-controllable Chinese lyric generator, fine-tuned on [Chinese-Lyric-Corpus](https://github.com/gaussic/Chinese-Lyric-Corpus) using a [MASS](https://arxiv.org/abs/1905.02450)-like strategy.\n\n# Usage\n\n## Initialization\n\n```python\nfrom transformers import MT5ForConditionalGeneration, MT5Tokenizer, Text2TextGenerationPipeline\nmodel_path = \"zake7749/chinese-lyrics-generation-mass\"\nmodel = MT5ForConditionalGeneration.from_pretrained(model_path)\ntokenizer = MT5Tokenizer.from_pretrained(model_path)\npipe = Text2TextGenerationPipeline(model=model, tokenizer=tokenizer)\n```\n\n## Generate lyrics with a template\n\n```python\ntemplate = \"\u98a8\u82b1\u96ea\u6708\u3002\u50cfXXXXXXXXXX\u3002\u65e5\u5347\u6708\u843d\u3002\u4eff\u82e5XXXXXXXXXX\u3002\"\nlyric = pipe(template, max_length=128, top_p=0.8, do_sample=True, repetition_penalty=1.2)[0]['generated_text']\nprint(lyric) # \u98a8\u82b1\u96ea\u6708\u3002\u50cf\u4f60\u5728\u6211\u7684\u5922\u88e1\u6162\u6162\u6563\u843d\u3002\u65e5\u5347\u6708\u843d\u3002\u4eff\u82e5\u6211\u5bbf\u547d\u7121\u6cd5\u966a\u96a8\u4f60\u8d70\u904e\u3002\n\n\ntemplate = \"XXXXXXX\u7559\u6200\u3002XXXXXXX\u3002XXX\u71c8\u706bXXXX\u3002XXX\u624b\u727d\u624bXXXX\u3002\"\nlyric = pipe(template, max_length=128, top_p=0.8, do_sample=True, repetition_penalty=1.2)[0]['generated_text']\nprint(lyric) # \u6211\u5011\u8aaa\u597d\u4e00\u751f\u4e0d\u7559\u6200\u3002\u6211\u5011\u76f8\u7d04\u5728\u590f\u5929\u3002\u6211\u5011\u7684\u71c8\u706b\u76f8\u504e\u76f8\u727d\u3002\u6211\u5011\u8aaa\u597d\u624b\u727d\u624b\u5230\u6c38\u9060\u3002\n\n```\n\n## Acrostic\n\n```python\ntemplate = \"\u5206XXXXXX\u3002\u624bXXXXXXXXX\u3002\u4e4bXXXXXXX\u3002\u5f8cXXXXXXXXX\u3002\"\nlyric = pipe(template, max_length=128, top_p=0.8, do_sample=True, repetition_penalty=1.2)[0]['generated_text']\nprint(lyric) # \u5206\u958b\u5f8c\u6fc0\u60c5\u6d6e\u73fe\u3002\u624b\u727d\u8457\u624b\u8d70\u904e\u7684\u90a3\u4e00\u5929\u3002\u4e4b\u9593\u6709\u592a\u591a\u7684\u5371\u96aa\u3002\u5f8c\u6094\u4e00\u9ede\u9ede,\u50b7\u5fc3\u4e00\u7247\u3002\n```\n\n## Completion\n\n```python\ntemplate = \"\u9918\u751f\u7684\u5149\u9670\u727d\u4f60\u624b\u524d\u884c\u3002\u6211\u5011\u5171\u8d74\u4e00\u5834\u5149\u5e74\u7684\u65c5\u884c\u3002XXXXXXXXXX\u3002XXXXXXXXXXXX\u3002\"\nlyric = pipe(template, max_length=128, top_p=0.8, do_sample=True, repetition_penalty=1.2)[0]['generated_text']\nprint(lyric) # \u9918\u751f\u7684\u5149\u9670\u727d\u4f60\u624b\u524d\u884c\u3002\u6211\u5011\u5171\u8d74\u4e00\u5834\u5149\u5e74\u7684\u65c5\u884c\u3002\u8d70\u904e\u7684\u7d93\u6b77\u65b0\u820a\u7684\u8a18\u61b6\u3002\u90fd\u662f\u5e36\u8457\u73cd\u73e0\u6dda\u6c34\u7121\u6cd5\u4ee3\u66ff\u3002\n```\n\n## Random Generation \n\n```python\nimport random\n\nnum_example = 5\nmin_sentence_num, max_sentence_num = 2, 5\nmin_characher_num, max_character_num = 4, 10\n\nfor example_id in range(num_example):\n    num_sentences = random.randint(min_sentence_num,  max_sentence_num)\n    num_words = [\"X\" * random.randint(min_characher_num, max_character_num)\n                 for _ in range(num_sentences)]\n\n    template = \"\u3002\".join(num_words) + \"\u3002\"\n    lyric = pipe(template, max_length=128, top_p=0.8, do_sample=True, repetition_penalty=1.2)[0]['generated_text']\n    print(f\"{example_id + 1}. {lyric}\")\n\n# 1. \u611b\u4e0d\u611b\u6211\u3002\u8b93\u81ea\u5df1\u96e3\u904e\u3002\u4f60\u7684\u64c1\u62b1\u662f\u90a3\u9ebc\u591a\u3002\n# 2. \u90a3\u4e00\u5929\u6211\u5011\u91cd\u76f8\u898b\u3002\u4f60\u5df2\u7ad9\u5728\u90a3\u500b\u719f\u6089\u7684\u8857\u908a\u3002\u8b93\u6211\u9b42\u727d\u5922\u7e5e\u5728\u80a9\u3002\u6709\u4f60\u7684\u660e\u5929\u3002\u4e0d\u518d\u7559\u6200\u3002\u98db\u904e\u5929\u908a\u3002\n# 3. \u8ab0\u77e5\u6211\u5011\u5165\u9aa8\u7684\u76f8\u601d\u3002\u6df1\u6df1\u5730\u88ab\u4fd8\u865c\u3002\u82e6\u6f80\u6ecb\u5473\u542b\u5728\u8336\u4e2d\u50be\u8a34\u3002\u9918\u60c5\u672a\u4e86\u843d\u5e55\u3002\u611b\u5230\u75db\u8655\u5962\u671b\u5e78\u798f\u3002\n# 4. \u70ba\u4ec0\u9ebc\u4f60\u4e00\u76f4\u8b93\u6211\u50b7\u5fc3\u3002\u7e3d\u89ba\u5f97\u5c0d\u4f60\u592a\u8457\u8ff7\u3002\n# 5. \u4e00\u9ede\u53ef\u6190\u3002\u9084\u5728\u671f\u5f85\u4f60\u6703\u51fa\u73fe\u3002\u54ea\u6015\u53ea\u662f\u5306\u5306\u4e00\u773c\u3002\n```\n\n# Note\n\n1. The model is still under training, so sometimes it might not follow the template explicitly, especially for long sequences generation.\n2. The model would output `,` as a pause in the lyric, for example `\u6211\u7684\u611b,\u50cf\u6f6e\u6c34\u3002`. If you don't need the pause, you can add the id of `,` to `bad_words_ids`.\n3. The model was only fine-tuned on traditional Chinese corpus which leads to a bit unstable performance in simplified Chinese.\n4. When there are no/few keywords in the given input, the model may **combine snippets from real world songs** to fit the template. \n\n# Disclaimer\n\nThis lyric generator is for academic purposes only. Users of this model should exercise caution and carefully evaluate the results before using them for any commercial or non-academic purpose. We are not liable for any damages or losses resulting from the use or misuse of the model.", "size_bytes": "2329696205", "downloads": 6}