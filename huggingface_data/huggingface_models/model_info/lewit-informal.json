{"pretrained_model_name": "s-nlp/lewit-informal", "description": "---\nlanguage:\n- en\n\ntags:\n- formality transfer\n\nlicenses:\n- cc-by-nc-sa\n---\nLEWIP-informal model is designed to transfer formal text into informal keeping the important slots from the source text. The slots can be either pre-defined or detected automatically.\n\nThe model is based on LEWIP (Levenshtein editing with the parallel corpus). It exploits the ability of T5 model to fill the slots between the known texts with undefined number of tokens. \n\n## How to use\n\n### Installation\n\n```python\n!pip install lewip_informal\n```\n\n### Generating content preserving informal paraphrases\n\n#### When the important entities are known in advance\n\n```python\nfrom lewip_informal import LEWIP\nmodel = LEWIP(use_cuda = True)\ntext = 'I want to go to NY'\nent = ['NY']\nmodel.generate(text, ent)\n# expected output 'i wanna go to NY'\n```\n\n#### When the important entities are NOT known in advance\n\nIn case the important slots are not known, they are automatically detected with auxiliary tagger model. \n\n```python\nfrom lewip_informal import LEWIP\nmodel = LEWIP(predefined_entities = False, use_cuda = True)\ntext = 'I really want to travel to NY'\nmodel.generate(text)\n# expected output 'I really want to go to NY'\n```\n\nYou may want to have a look at the slots which were labeled as important by the tagger. Use 'show_template' variable\n\n```python\n\nmodel.generate(text, show_template = True)\n# expected output \n# I <extra_id_0> want to <extra_id_1> to NY\n# 'I really want to go to NY'\n\n```", "size_bytes": "891697151", "downloads": 3}