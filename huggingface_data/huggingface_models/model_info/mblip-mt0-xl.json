{"pretrained_model_name": "Gregor/mblip-mt0-xl", "description": "---\nlanguage:\n- en\n- multilingual\nlicense: mit\ntags:\n- vision\n- image-to-text\n- image-captioning\n- visual-question-answering\npipeline_tag: image-to-text\ninference: false\ndatasets:\n- Gregor/mblip-train\n---\n\n# mBLIP mT0-XL\n\nThis is the model checkpoint for our work [mBLIP: Efficient Bootstrapping of Multilingual Vision-LLMs](https://arxiv.org/abs/2307.06930).\n\n\n\n## Model description\nmBLIP is a [BLIP-2](https://arxiv.org/abs/2301.12597) model which consists of 3 sub-models: a Vision Transformer (ViT), a Query-Transformer (Q-Former) and a large language model (LLM).\n\nThe Q-Former and ViT have both been initialized by an English BLIP-2 checkpoint ([blip2-flan-t5-xl](https://huggingface.co/Gregor/mblip-mt0-xl)) and then re-aligned \nto the multilingual LLM ([mt0-xl](https://huggingface.co/bigscience/mt0-xl)) using a [multilingual task mixture](https://huggingface.co/datasets/Gregor/mblip-train).\n\n<img src=\"https://github.com/gregor-ge/mBLIP/blob/main/architecture.png\"\nalt=\"The mBLIP architecture\" width=\"600\"/> \n\nThis allows the model to be used for tasks like:\n\n- image captioning\n- visual question answering (VQA)\n\nin 96 languages.\n\n#### Languages\nmBLIP was trained on the following 96 languages:\n\n`\naf, am, ar, az, be, bg, bn, ca, ceb, cs, cy, da, de, el, en, eo, es, et, eu, fa, fi, fil, fr, ga, gd, gl, gu, ha, hi, ht, hu, hy, id, ig, is, it, iw, ja, jv, ka, kk, km, kn, ko, ku, ky, lb, lo, lt, lv, mg, mi, mk, ml, mn, mr, ms, mt, my, ne, nl, no, ny, pa, pl, ps, pt, ro, ru, sd, si, sk, sl, sm, sn, so, sq, sr, st, su, sv, sw, ta, te, tg, th, tr, uk, ur, uz, vi, xh, yi, yo, zh, zu\n`\n\n\n## Direct Use and Downstream Use\n\nYou can use the raw model for conditional text generation given an image and prompt text in a zero-shot setup or \nalternatively finetune it for downstream applications.\nWe strongly recommend LoRA applied to the LLM when finetuning and to use bf16 as data type - standard fp16 can cause NaN loss.\n\nSee [our repository](https://github.com/gregor-ge/mBLIP) for the code used to train and finetune this model.\n\n\n## Bias, Risks, Limitations, and Ethical Considerations\n\nWhile mBLIP can work in theory with up to 100 languages, in practice, we expect best results when prompted in high-resource languages\nlike English, German, Spanish, etc. \n\n\n\nmBLIP inherits the risk, limitations, and biases from the models used to initialize it.\nmBLIP has not been tested in real world applications. It should not be directly deployed in any applications. Researchers should first carefully assess the safety and fairness of the model in relation to the specific context they\u2019re being deployed within.\n\n### How to use\n\nFor code examples, we refer to the BLIP-2 [documentation](https://huggingface.co/docs/transformers/main/en/model_doc/blip-2#transformers.Blip2ForConditionalGeneration.forward.example).\n\n#### Running the model on CPU\n\n<details>\n<summary> Click to expand </summary>\n\n```python\nimport requests\nfrom PIL import Image\nfrom transformers import BlipProcessor, Blip2ForConditionalGeneration\n\nprocessor = BlipProcessor.from_pretrained(\"Gregor/mblip-mt0-xl\")\nmodel = Blip2ForConditionalGeneration.from_pretrained(\"Gregor/mblip-mt0-xl\")\n\nimg_url = 'https://storage.googleapis.com/sfr-vision-language-research/BLIP/demo.jpg' \nraw_image = Image.open(requests.get(img_url, stream=True).raw).convert('RGB')\n\nquestion = \"Describe the image in German.\"\ninputs = processor(raw_image, question, return_tensors=\"pt\")\n\nout = model.generate(**inputs)\nprint(processor.decode(out[0], skip_special_tokens=True))\n```\n</details>\n\n#### Running the model on GPU\n\n##### In full precision \n\n<details>\n<summary> Click to expand </summary>\n\n```python\n# pip install accelerate\nimport requests\nfrom PIL import Image\nfrom transformers import Blip2Processor, Blip2ForConditionalGeneration\n\nprocessor = Blip2Processor.from_pretrained(\"Gregor/mblip-mt0-xl\")\nmodel = Blip2ForConditionalGeneration.from_pretrained(\"Gregor/mblip-mt0-xl\", device_map=\"auto\")\n\nimg_url = 'https://storage.googleapis.com/sfr-vision-language-research/BLIP/demo.jpg' \nraw_image = Image.open(requests.get(img_url, stream=True).raw).convert('RGB')\n\nquestion = \"Describe the image in German.\"\ninputs = processor(raw_image, question, return_tensors=\"pt\").to(\"cuda\")\n\nout = model.generate(**inputs)\nprint(processor.decode(out[0], skip_special_tokens=True))\n```\n</details>\n\n##### In half precision (`bfloat16`)\n\n<details>\n<summary> Click to expand </summary>\n\n```python\n# pip install accelerate\nimport torch\nimport requests\nfrom PIL import Image\nfrom transformers import Blip2Processor, Blip2ForConditionalGeneration\n\nprocessor = Blip2Processor.from_pretrained(\"Gregor/mblip-mt0-xl\")\nmodel = Blip2ForConditionalGeneration.from_pretrained(\"Gregor/mblip-mt0-xl\", torch_dtype=torch.bfloat16, device_map=\"auto\")\n\nimg_url = 'https://storage.googleapis.com/sfr-vision-language-research/BLIP/demo.jpg' \nraw_image = Image.open(requests.get(img_url, stream=True).raw).convert('RGB')\n\nquestion = \"Describe the image in German.\"\ninputs = processor(raw_image, question, return_tensors=\"pt\").to(\"cuda\", torch.bfloat16)\n\nout = model.generate(**inputs)\nprint(processor.decode(out[0], skip_special_tokens=True))\n```\n</details>\n\n##### In 8-bit precision (`int8`)\n\n<details>\n<summary> Click to expand </summary>\n\n```python\n# pip install accelerate bitsandbytes\nimport torch\nimport requests\nfrom PIL import Image\nfrom transformers import Blip2Processor, Blip2ForConditionalGeneration\n\nprocessor = Blip2Processor.from_pretrained(\"Gregor/mblip-mt0-xl\")\nmodel = Blip2ForConditionalGeneration.from_pretrained(\"Gregor/mblip-mt0-xl\", load_in_8bit=True, device_map=\"auto\")\n\nimg_url = 'https://storage.googleapis.com/sfr-vision-language-research/BLIP/demo.jpg' \nraw_image = Image.open(requests.get(img_url, stream=True).raw).convert('RGB')\n\nquestion = \"Describe the image in German.\"\ninputs = processor(raw_image, question, return_tensors=\"pt\").to(\"cuda\", torch.bfloat16)\n\nout = model.generate(**inputs)\nprint(processor.decode(out[0], skip_special_tokens=True))\n```\n</details>\n\n## Citation\nIf you use our model, please cite the following:\n```\n@article{geigle2023mblip,\n  author       = {Gregor Geigle and\n                  Abhay Jain and\n                  Radu Timofte and\n                  Goran Glava\\v{s}},\n  title        = {mBLIP: Efficient Bootstrapping of Multilingual Vision-LLMs},\n  journal      = {arXiv},\n  volume       = {abs/2307.06930},\n  year         = {2023},\n  url          = {https://arxiv.org/abs/2307.06930},\n  eprinttype    = {arXiv},\n  eprint       = {2307.06930},\n}\n```", "size_bytes": 17369331712, "downloads": 147}