{"pretrained_model_name": "persiannlp/mt5-large-parsinlu-qqp-query-paraphrasing", "description": "---\nlanguage:\n- fa\n- multilingual\nthumbnail: https://upload.wikimedia.org/wikipedia/commons/a/a2/Farsi.svg\ntags:\n- query-paraphrasing\n- mt5\n- persian\n- farsi\nlicense: cc-by-nc-sa-4.0\ndatasets:\n- parsinlu\n- qqp\nmetrics:\n- accuracy\n---\n\n# Detection of Paraphrased Queries (\u062a\u0634\u062e\u0635\u06cc\u0635 \u0633\u0648\u0627\u0644\u0627\u062a \u0647\u0645\u200c\u0645\u0639\u0646\u06cc)\n\nThis is a model for detection of paraphrased queries. \nHere is an example of how you can run this model: \n\n```python \nfrom transformers import MT5Config, MT5ForConditionalGeneration, MT5Tokenizer\n\nmodel_name = \"persiannlp/mt5-large-parsinlu-qqp-query-paraphrasing\"\ntokenizer = MT5Tokenizer.from_pretrained(model_name)\nmodel = MT5ForConditionalGeneration.from_pretrained(model_name)\n\ndef run_model(q1, q2, **generator_args):\n    input_ids = tokenizer.encode(f\"{q1}<sep>{q2}\", return_tensors=\"pt\")\n    res = model.generate(input_ids, **generator_args)\n    output = tokenizer.batch_decode(res, skip_special_tokens=True)\n    print(output)\n    return output\n\n\nrun_model(\"\u0686\u0647 \u0686\u06cc\u0632\u06cc \u0628\u0627\u0639\u062b \u067e\u0648\u06a9\u06cc \u0627\u0633\u062a\u062e\u0648\u0627\u0646 \u0645\u06cc \u0634\u0648\u062f\u061f\", \"\u0686\u0647 \u0686\u06cc\u0632\u06cc \u0628\u0627\u0639\u062b \u0645\u0642\u0627\u0648\u0645\u062a \u0627\u0633\u062a\u062e\u0648\u0627\u0646 \u062f\u0631 \u0628\u0631\u0627\u0628\u0631 \u0636\u0631\u0628\u0647 \u0645\u06cc \u0634\u0648\u062f\u061f\")\nrun_model(\"\u0645\u0646 \u062f\u0627\u0631\u0645 \u0628\u0647 \u0627\u06cc\u0646 \u0641\u06a9\u0631 \u0645\u06cc\u06a9\u0646\u0645 \u0686\u0631\u0627 \u0633\u0627\u0639\u062a \u0647\u0641\u062a \u0646\u0645\u06cc\u0634\u0647\u061f\", \"\u0686\u0631\u0627 \u0645\u0646 \u0633\u0627\u062f\u0647 \u0641\u06a9\u0631 \u0645\u06cc\u06a9\u0631\u062f\u0645 \u0628\u0647 \u0639\u0634\u0642\u062a \u067e\u0627\u0628\u0646\u062f\u06cc\u061f\")\nrun_model(\"\u062f\u0639\u0627\u06cc \u06a9\u0645\u06cc\u0644 \u062f\u0631 \u0686\u0647 \u0631\u0648\u0632\u0647\u0627\u06cc\u06cc \u062e\u0648\u0627\u0646\u062f\u0647 \u0645\u06cc \u0634\u0648\u062f\u061f\", \"\u062f\u0639\u0627\u06cc \u062c\u0648\u0634\u0646 \u06a9\u0628\u06cc\u0631 \u062f\u0631 \u0686\u0647 \u0634\u0628\u06cc \u062e\u0648\u0627\u0646\u062f\u0647 \u0645\u06cc \u0634\u0648\u062f\u061f\")\nrun_model(\"\u062f\u0639\u0627\u06cc \u06a9\u0645\u06cc\u0644 \u062f\u0631 \u0686\u0647 \u0631\u0648\u0632\u0647\u0627\u06cc\u06cc \u062e\u0648\u0627\u0646\u062f\u0647 \u0645\u06cc \u0634\u0648\u062f\u061f\", \"\u062f\u0639\u0627\u06cc \u062c\u0648\u0634\u0646 \u06a9\u0628\u06cc\u0631 \u062f\u0631 \u0686\u0647 \u0634\u0628\u06cc \u062e\u0648\u0627\u0646\u062f\u0647 \u0645\u06cc \u0634\u0648\u062f\u061f\")\nrun_model(\"\u0634\u0646\u0627\u0633\u0646\u0627\u0645\u0647 \u062f\u0631 \u0686\u0647 \u0633\u0627\u0644\u06cc \u0648\u0627\u0631\u062f \u0627\u06cc\u0631\u0627\u0646 \u0634\u062f\u061f\", \"\u0633\u06cc\u0628 \u0632\u0645\u06cc\u0646\u06cc \u062f\u0631 \u0686\u0647 \u0633\u0627\u0644\u06cc \u0648\u0627\u0631\u062f \u0627\u06cc\u0631\u0627\u0646 \u0634\u062f\u061f\")\nrun_model(\"\u0633\u06cc\u0628 \u0632\u0645\u06cc\u0646\u06cc \u0686\u0647 \u0632\u0645\u0627\u0646\u06cc \u0648\u0627\u0631\u062f \u0627\u06cc\u0631\u0627\u0646 \u0634\u062f\u061f\", \"\u0633\u06cc\u0628 \u0632\u0645\u06cc\u0646\u06cc \u062f\u0631 \u0686\u0647 \u0633\u0627\u0644\u06cc \u0648\u0627\u0631\u062f \u0627\u06cc\u0631\u0627\u0646 \u0634\u062f\u061f\")\n```\n\n\nFor more details, visit this page: https://github.com/persiannlp/parsinlu/ \n", "size_bytes": "4918522675", "downloads": 15}