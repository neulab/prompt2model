{"pretrained_model_name": "google/pix2struct-textcaps-large", "description": "---\nlanguage:\n  - en\n  - fr\n  - ro\n  - de\n  - multilingual\npipeline_tag: image-to-text\ninference: false\nlicense: apache-2.0\n---\n\n\n# Model card for Pix2Struct - Finetuned on TextCaps - Large version\n\n![model_image](https://s3.amazonaws.com/moonup/production/uploads/1678713353867-62441d1d9fdefb55a0b7d12c.png)\n\n#  Table of Contents\n\n0. [TL;DR](#TL;DR)\n1. [Using the model](#using-the-model)\n2. [Contribution](#contribution)\n3. [Citation](#citation)\n\n# TL;DR\n\nPix2Struct is an image encoder - text decoder model that is trained on image-text pairs for various tasks, including image captionning and visual question answering. The full list of available models can be found on the Table 1 of the paper:\n\n![Table 1 - paper](https://s3.amazonaws.com/moonup/production/uploads/1678712985040-62441d1d9fdefb55a0b7d12c.png)\n\n\nThe abstract of the model states that: \n> Visually-situated language is ubiquitous\u2014sources range from textbooks with diagrams to web pages with images and tables, to mobile apps with buttons and\nforms. Perhaps due to this diversity, previous work has typically relied on domainspecific recipes with limited sharing of the underlying data, model architectures,\nand objectives. We present Pix2Struct, a pretrained image-to-text model for\npurely visual language understanding, which can be finetuned on tasks containing visually-situated language. Pix2Struct is pretrained by learning to parse\nmasked screenshots of web pages into simplified HTML. The web, with its richness of visual elements cleanly reflected in the HTML structure, provides a large\nsource of pretraining data well suited to the diversity of downstream tasks. Intuitively, this objective subsumes common pretraining signals such as OCR, language modeling, image captioning. In addition to the novel pretraining strategy,\nwe introduce a variable-resolution input representation and a more flexible integration of language and vision inputs, where language prompts such as questions\nare rendered directly on top of the input image. For the first time, we show that a\nsingle pretrained model can achieve state-of-the-art results in six out of nine tasks\nacross four domains: documents, illustrations, user interfaces, and natural images.\n\n# Using the model \n\n## Converting from T5x to huggingface\n\nYou can use the [`convert_pix2struct_checkpoint_to_pytorch.py`](https://github.com/huggingface/transformers/blob/main/src/transformers/models/pix2struct/convert_pix2struct_checkpoint_to_pytorch.py) script as follows:\n```bash\npython convert_pix2struct_checkpoint_to_pytorch.py --t5x_checkpoint_path PATH_TO_T5X_CHECKPOINTS --pytorch_dump_path PATH_TO_SAVE\n```\nif you are converting a large model, run:\n```bash\npython convert_pix2struct_checkpoint_to_pytorch.py --t5x_checkpoint_path PATH_TO_T5X_CHECKPOINTS --pytorch_dump_path PATH_TO_SAVE --use-large\n```\nOnce saved, you can push your converted model with the following snippet:\n```python\nfrom transformers import Pix2StructForConditionalGeneration, Pix2StructProcessor\n\nmodel = Pix2StructForConditionalGeneration.from_pretrained(PATH_TO_SAVE)\nprocessor = Pix2StructProcessor.from_pretrained(PATH_TO_SAVE)\n\nmodel.push_to_hub(\"USERNAME/MODEL_NAME\")\nprocessor.push_to_hub(\"USERNAME/MODEL_NAME\")\n```\n\n## Running the model\n\n### In full precision, on CPU:\n\nYou can run the model in full precision on CPU:\n```python\nimport requests\nfrom PIL import Image\nfrom transformers import Pix2StructForConditionalGeneration, Pix2StructProcessor\n\nurl = \"https://www.ilankelman.org/stopsigns/australia.jpg\"\nimage = Image.open(requests.get(url, stream=True).raw)\n\nmodel = Pix2StructForConditionalGeneration.from_pretrained(\"google/pix2struct-textcaps-base\")\nprocessor = Pix2StructProcessor.from_pretrained(\"google/pix2struct-textcaps-base\")\n\n# image only\ninputs = processor(images=image, return_tensors=\"pt\")\n\npredictions = model.generate(**inputs)\nprint(processor.decode(predictions[0], skip_special_tokens=True))\n>>> A street scene with a sign that says \"STOP\".\n```\n\n### In full precision, on GPU:\n\nYou can run the model in full precision on CPU:\n```python\nimport requests\nfrom PIL import Image\nfrom transformers import Pix2StructForConditionalGeneration, Pix2StructProcessor\n\nurl = \"https://www.ilankelman.org/stopsigns/australia.jpg\"\nimage = Image.open(requests.get(url, stream=True).raw)\n\nmodel = Pix2StructForConditionalGeneration.from_pretrained(\"google/pix2struct-textcaps-large\").to(\"cuda\")\nprocessor = Pix2StructProcessor.from_pretrained(\"google/pix2struct-textcaps-large\")\n\n# image only\ninputs = processor(images=image, return_tensors=\"pt\").to(\"cuda\")\n\npredictions = model.generate(**inputs)\nprint(processor.decode(predictions[0], skip_special_tokens=True))\n>>> A street scene with a sign that says \"STOP\".\n```\n\n### In half precision, on GPU:\n\nYou can run the model in full precision on CPU:\n```python\nimport requests\nimport torch\n\nfrom PIL import Image\nfrom transformers import Pix2StructForConditionalGeneration, Pix2StructProcessor\n\nurl = \"https://www.ilankelman.org/stopsigns/australia.jpg\"\nimage = Image.open(requests.get(url, stream=True).raw)\n\nmodel = Pix2StructForConditionalGeneration.from_pretrained(\"google/pix2struct-textcaps-large\", torch_dtype=torch.bfloat16).to(\"cuda\")\nprocessor = Pix2StructProcessor.from_pretrained(\"google/pix2struct-textcaps-large\")\n\n# image only\ninputs = processor(images=image, return_tensors=\"pt\").to(\"cuda\", torch.bfloat16)\n\npredictions = model.generate(**inputs)\nprint(processor.decode(predictions[0], skip_special_tokens=True))\n>>> A street scene with a sign that says \"STOP\".\n```\n\n### Use different sequence length\n\nThis model has been trained on a sequence length of `4096`. You can try to reduce the sequence length for a more memory efficient inference but you may observe some performance degradation for small sequence length (<1024). Just pass `max_patches` when calling the processor:\n```python\ninputs = processor(images=image, return_tensors=\"pt\", max_patches=1024)\n```\n\n### Conditional generation\n\nYou can also pre-pend some input text to perform conditional generation:\n\n```python\nimport requests\nfrom PIL import Image\nfrom transformers import Pix2StructForConditionalGeneration, Pix2StructProcessor\n\nurl = \"https://www.ilankelman.org/stopsigns/australia.jpg\"\nimage = Image.open(requests.get(url, stream=True).raw)\ntext = \"A picture of\"\n\nmodel = Pix2StructForConditionalGeneration.from_pretrained(\"google/pix2struct-textcaps-large\")\nprocessor = Pix2StructProcessor.from_pretrained(\"google/pix2struct-textcaps-large\")\n\n# image only\ninputs = processor(images=image, text=text, return_tensors=\"pt\")\n\npredictions = model.generate(**inputs)\nprint(processor.decode(predictions[0], skip_special_tokens=True))\n```\n\n# Contribution\n\nThis model was originally contributed by Kenton Lee, Mandar Joshi et al. and added to the Hugging Face ecosystem by [Younes Belkada](https://huggingface.co/ybelkada).\n\n# Citation\n\nIf you want to cite this work, please consider citing the original paper:\n```\n@misc{https://doi.org/10.48550/arxiv.2210.03347,\n  doi = {10.48550/ARXIV.2210.03347},\n  \n  url = {https://arxiv.org/abs/2210.03347},\n  \n  author = {Lee, Kenton and Joshi, Mandar and Turc, Iulia and Hu, Hexiang and Liu, Fangyu and Eisenschlos, Julian and Khandelwal, Urvashi and Shaw, Peter and Chang, Ming-Wei and Toutanova, Kristina},\n  \n  keywords = {Computation and Language (cs.CL), Computer Vision and Pattern Recognition (cs.CV), FOS: Computer and information sciences, FOS: Computer and information sciences},\n  \n  title = {Pix2Struct: Screenshot Parsing as Pretraining for Visual Language Understanding},\n  \n  publisher = {arXiv},\n  \n  year = {2022},\n  \n  copyright = {Creative Commons Attribution 4.0 International}\n}\n```", "size_bytes": "2672356329", "downloads": 403}