{"pretrained_model_name": "doc2query/msmarco-japanese-mt5-base-v1", "description": "---\nlanguage: ja\ndatasets:\n- unicamp-dl/mmarco\nwidget:\n- text: \"Python\uff08\u30d1\u30a4\u30bd\u30f3\uff09\u306f\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u578b\u306e\u9ad8\u6c34\u6e96\u6c4e\u7528\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u3042\u308b\u3002\u30b0\u30a4\u30c9\u30fb\u30f4\u30a1\u30f3\u30fb\u30ed\u30c3\u30b5\u30e0\u306b\u3088\u308a\u5275\u308a\u51fa\u3055\u308c\u30011991\u5e74\u306b\u6700\u521d\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305fPython\u306e\u8a2d\u8a08\u54f2\u5b66\u306f\u3001\u6709\u610f\u306a\u30db\u30ef\u30a4\u30c8\u30b9\u30da\u30fc\u30b9(\u30aa\u30d5\u30b5\u30a4\u30c9\u30eb\u30fc\u30eb)\u306e\u9855\u8457\u306a\u4f7f\u7528\u306b\u3088\u3063\u3066\u30b3\u30fc\u30c9\u306e\u53ef\u8aad\u6027\u3092\u91cd\u8996\u3057\u3066\u3044\u308b\u3002\u305d\u306e\u8a00\u8a9e\u69cb\u6210\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30de\u304c\u5c0f\u898f\u6a21\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304b\u3089\u5927\u898f\u6a21\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u307e\u3067\u3001\u660e\u78ba\u3067\u8ad6\u7406\u7684\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u306e\u3092\u652f\u63f4\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u3066\u3044\u308b\u3002\"\n\nlicense: apache-2.0\n---\n\n# doc2query/msmarco-japanese-mt5-base-v1\n\nThis is a [doc2query](https://arxiv.org/abs/1904.08375) model based on mT5 (also known as [docT5query](https://cs.uwaterloo.ca/~jimmylin/publications/Nogueira_Lin_2019_docTTTTTquery-v2.pdf)).\n\nIt can be used for:\n- **Document expansion**: You generate for your paragraphs 20-40 queries and index the paragraphs and the generates queries in a standard BM25 index like Elasticsearch, OpenSearch, or Lucene. The generated queries help to close the lexical gap of lexical search, as the generate queries contain synonyms. Further, it re-weights words giving important words a higher weight even if they appear seldomn in a paragraph. In our [BEIR](https://arxiv.org/abs/2104.08663) paper we showed that BM25+docT5query is a powerful search engine. In the [BEIR repository](https://github.com/beir-cellar/beir) we have an example how to use docT5query with Pyserini.\n- **Domain Specific Training Data Generation**: It can be used to generate training data to learn an embedding model. In our [GPL-Paper](https://arxiv.org/abs/2112.07577) / [GPL Example on SBERT.net](https://www.sbert.net/examples/domain_adaptation/README.html#gpl-generative-pseudo-labeling) we have an example how to use the model to generate (query, text) pairs for a given collection of unlabeled texts. These pairs can then be used to train powerful dense embedding models.\n\n## Usage\n```python\nfrom transformers import AutoTokenizer, AutoModelForSeq2SeqLM\nimport torch\n\nmodel_name = 'doc2query/msmarco-japanese-mt5-base-v1'\ntokenizer = AutoTokenizer.from_pretrained(model_name)\nmodel = AutoModelForSeq2SeqLM.from_pretrained(model_name)\n\ntext = \"Python\uff08\u30d1\u30a4\u30bd\u30f3\uff09\u306f\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u578b\u306e\u9ad8\u6c34\u6e96\u6c4e\u7528\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u3042\u308b\u3002\u30b0\u30a4\u30c9\u30fb\u30f4\u30a1\u30f3\u30fb\u30ed\u30c3\u30b5\u30e0\u306b\u3088\u308a\u5275\u308a\u51fa\u3055\u308c\u30011991\u5e74\u306b\u6700\u521d\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305fPython\u306e\u8a2d\u8a08\u54f2\u5b66\u306f\u3001\u6709\u610f\u306a\u30db\u30ef\u30a4\u30c8\u30b9\u30da\u30fc\u30b9(\u30aa\u30d5\u30b5\u30a4\u30c9\u30eb\u30fc\u30eb)\u306e\u9855\u8457\u306a\u4f7f\u7528\u306b\u3088\u3063\u3066\u30b3\u30fc\u30c9\u306e\u53ef\u8aad\u6027\u3092\u91cd\u8996\u3057\u3066\u3044\u308b\u3002\u305d\u306e\u8a00\u8a9e\u69cb\u6210\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30de\u304c\u5c0f\u898f\u6a21\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304b\u3089\u5927\u898f\u6a21\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u307e\u3067\u3001\u660e\u78ba\u3067\u8ad6\u7406\u7684\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u306e\u3092\u652f\u63f4\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u3066\u3044\u308b\u3002\"\n\n\ndef create_queries(para):\n    input_ids = tokenizer.encode(para, return_tensors='pt')\n    with torch.no_grad():\n        # Here we use top_k / top_k random sampling. It generates more diverse queries, but of lower quality\n        sampling_outputs = model.generate(\n            input_ids=input_ids,\n            max_length=64,\n            do_sample=True,\n            top_p=0.95,\n            top_k=10, \n            num_return_sequences=5\n            )\n        \n        # Here we use Beam-search. It generates better quality queries, but with less diversity\n        beam_outputs = model.generate(\n            input_ids=input_ids, \n            max_length=64, \n            num_beams=5, \n            no_repeat_ngram_size=2, \n            num_return_sequences=5, \n            early_stopping=True\n        )\n\n\n    print(\"Paragraph:\")\n    print(para)\n    \n    print(\"\\nBeam Outputs:\")\n    for i in range(len(beam_outputs)):\n        query = tokenizer.decode(beam_outputs[i], skip_special_tokens=True)\n        print(f'{i + 1}: {query}')\n\n    print(\"\\nSampling Outputs:\")\n    for i in range(len(sampling_outputs)):\n        query = tokenizer.decode(sampling_outputs[i], skip_special_tokens=True)\n        print(f'{i + 1}: {query}')\n\ncreate_queries(text)\n\n```\n\n**Note:** `model.generate()` is non-deterministic for top_k/top_n sampling. It produces different queries each time you run it.\n\n## Training\nThis model fine-tuned [google/mt5-base](https://huggingface.co/google/mt5-base) for 66k training steps (4 epochs on the 500k training pairs from MS MARCO). For the  training script, see the `train_script.py` in this repository.\n\nThe input-text was truncated to 320 word pieces. Output text was generated up to 64 word pieces. \n\nThis model was trained on a (query, passage) from the [mMARCO dataset](https://github.com/unicamp-dl/mMARCO).\n\n\n\n", "size_bytes": "2329700301", "downloads": 57}