{"pretrained_model_name": "microsoft/tapex-base-finetuned-wtq", "description": "---\nlanguage: en\ntags:\n- tapex\n- table-question-answering\ndatasets:\n- wikitablequestions\nlicense: mit\n---\n\n# TAPEX (base-sized model) \n\nTAPEX was proposed in [TAPEX: Table Pre-training via Learning a Neural SQL Executor](https://arxiv.org/abs/2107.07653) by Qian Liu, Bei Chen, Jiaqi Guo, Morteza Ziyadi, Zeqi Lin, Weizhu Chen, Jian-Guang Lou. The original repo can be found [here](https://github.com/microsoft/Table-Pretraining).\n\n## Model description\n\nTAPEX (**Ta**ble **P**re-training via **Ex**ecution) is a conceptually simple and empirically powerful pre-training approach to empower existing models with *table reasoning* skills. TAPEX realizes table pre-training by learning a neural SQL executor over a synthetic corpus, which is obtained by automatically synthesizing executable SQL queries.\n\nTAPEX is based on the BART architecture, the transformer encoder-encoder (seq2seq) model with a bidirectional (BERT-like) encoder and an autoregressive (GPT-like) decoder.\n\nThis model is the `tapex-base` model fine-tuned on the [WikiTableQuestions](https://huggingface.co/datasets/wikitablequestions) dataset.\n\n## Intended Uses\n\nYou can use the model for table question answering on *complex* questions. Some **solveable** questions are shown below (corresponding tables now shown):\n\n| Question | Answer |\n|:---: |:---:|\n| according to the table, what is the last title that spicy horse produced? | Akaneiro: Demon Hunters |\n| what is the difference in runners-up from coleraine academical institution and royal school dungannon? | 20 |\n| what were the first and last movies greenstreet acted in? | The Maltese Falcon, Malaya |\n| in which olympic games did arasay thondike not finish in the top 20? | 2012 |\n| which broadcaster hosted 3 titles but they had only 1 episode? | Channel 4 |\n\n\n### How to Use\n\nHere is how to use this model in transformers:\n\n```python\nfrom transformers import TapexTokenizer, BartForConditionalGeneration\nimport pandas as pd\n\ntokenizer = TapexTokenizer.from_pretrained(\"microsoft/tapex-base-finetuned-wtq\")\nmodel = BartForConditionalGeneration.from_pretrained(\"microsoft/tapex-base-finetuned-wtq\")\n\ndata = {\n    \"year\": [1896, 1900, 1904, 2004, 2008, 2012],\n    \"city\": [\"athens\", \"paris\", \"st. louis\", \"athens\", \"beijing\", \"london\"]\n}\ntable = pd.DataFrame.from_dict(data)\n\n# tapex accepts uncased input since it is pre-trained on the uncased corpus\nquery = \"In which year did beijing host the Olympic Games?\"\nencoding = tokenizer(table=table, query=query, return_tensors=\"pt\")\n\noutputs = model.generate(**encoding)\n\nprint(tokenizer.batch_decode(outputs, skip_special_tokens=True))\n# [' 2008.0']\n```\n\n### How to Eval\n\nPlease find the eval script [here](https://github.com/SivilTaram/transformers/tree/add_tapex_bis/examples/research_projects/tapex).\n\n### BibTeX entry and citation info\n\n```bibtex\n@inproceedings{\n    liu2022tapex,\n    title={{TAPEX}: Table Pre-training via Learning a Neural {SQL} Executor},\n    author={Qian Liu and Bei Chen and Jiaqi Guo and Morteza Ziyadi and Zeqi Lin and Weizhu Chen and Jian-Guang Lou},\n    booktitle={International Conference on Learning Representations},\n    year={2022},\n    url={https://openreview.net/forum?id=O50443AsCP}\n}\n```", "size_bytes": "557940510", "downloads": 4336}