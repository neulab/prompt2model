{"pretrained_model_name": "etomoscow/T5_paraphrase_detector", "description": "---\nlicense: afl-3.0\n---\n\n[Google's T5](https://ai.googleblog.com/2020/02/exploring-transfer-learning-with-t5.html) fine-tuned on [PAWS](https://github.com/google-research-datasets/paws) for paraphrase generation. \n\n### Details of T5\nThe T5 model was presented in Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer by Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, Peter J. Liu in Here the abstract:\n\nTransfer learning, where a model is first pre-trained on a data-rich task before being fine-tuned on a downstream task, has emerged as a powerful technique in natural language processing (NLP). The effectiveness of transfer learning has given rise to a diversity of approaches, methodology, and practice. In this paper, we explore the landscape of transfer learning techniques for NLP by introducing a unified framework that converts every language problem into a text-to-text format. Our systematic study compares pre-training objectives, architectures, unlabeled datasets, transfer approaches, and other factors on dozens of language understanding tasks. By combining the insights from our exploration with scale and our new \u201cColossal Clean Crawled Corpus\u201d, we achieve state-of-the-art results on many benchmarks covering summarization, question answering, text classification, and more. To facilitate future work on transfer learning for NLP, we release our dataset, pre-trained models, and code.                         \n\n![model image](https://i.imgur.com/jVFMMWR.png)\n\n\n## Details of the downstream task (Binary Paraphrase Classification)\n\nDataset: ```PAWS```  [link](https://github.com/google-research-datasets/paws)\n\n## Performance:\n\nF1-score: 0.86\nROC-AUC score: 0.86\n\n## Usage:\n```python\nfrom transformers import T5ForConditionalGeneration, T5Tokenizer\nimport torch\n# use GPU for better performance\ndevice = torch.device('cuda')\ntokenizer = T5Tokenizer.from_pretrained(\"etomoscow/T5_paraphrase_detector\")\nmodel = T5ForConditionalGeneration.from_pretrained(\"etomoscow/T5_paraphrase_detector\").to(device)\ntext_1 = 'During her sophomore , junior and senior summers , she spent half of it with her Alaska team , and half playing , and living in Oregon .'\ntext_2 = 'During her second , junior and senior summers , she spent half of it with her Alaska team , half playing and living in Oregon.'\ntrue_label = '1'\ninput_text = tokenizer.encode_plus(text_1 + ' <sep> ' + text_2, return_tensors='pt')\nout = model.generate(input_text['input_ids'].to(device))\nprint(tokenizer.decode(out.squeeze(0), skip_special_tokens=True))\n# 1\n```", "size_bytes": "891730879", "downloads": 4}