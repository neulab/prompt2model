{"pretrained_model_name": "BelleGroup/BELLE-7B-0.2M", "description": "---\nlicense: apache-2.0\ntags:\n- text2text-generation\npipeline_tag: text2text-generation\nlanguage:\n- zh\n- en\nwidget:\n- text: |-\n    Human: \u4f7f\u7528python\u5199\u4e00\u4e2a\u4e8c\u5206\u67e5\u627e\u7684\u4ee3\u7801\n    Assistant: \n  example_title: code zh\n- text: >-\n    Human: Classify the sentiment of the following sentence into Positive,\n    Neutral, or Negative: \n\n    Super excited about teaching Stanford\u2019s first course on Large Language\n    Models! Check the syllabus out here\n\n    Assistant: \n  example_title: sentiment en\n- text: |-\n    Human: \u4eca\u5929\u5929\u6c14\u600e\u4e48\u6837\uff0c\u628a\u8fd9\u53e5\u8bdd\u7ffb\u8bd1\u6210\u82f1\u8bed\n    Assistant: \n  example_title: translation zh-en\n- text: |-\n    Human: \u600e\u4e48\u8ba9\u81ea\u5df1\u7cbe\u529b\u5145\u6c9b\uff0c\u52175\u70b9\u5efa\u8bae\n    Assistant: \n  example_title: brainstorming zh\n- text: |-\n    Human: \u8bf7\u4ee5\u300e\u6625\u5929\u7684\u5317\u4eac\u300f\u4e3a\u9898\u5199\u4e00\u9996\u8bd7\u6b4c\n    Assistant: \n  example_title: generation zh\n- text: |-\n    Human: \u660e\u5929\u5c31\u5047\u671f\u7ed3\u675f\u4e86\uff0c\u6709\u70b9\u6297\u62d2\u4e0a\u73ed\uff0c\u5e94\u8be5\u600e\u4e48\u529e\uff1f\n    Assistant: \n  example_title: brainstorming zh\n- text: |-\n    Human: \u7236\u6bcd\u90fd\u59d3\u5434\uff0c\u53d6\u4e00\u4e9b\u7537\u5b9d\u5b9d\u548c\u5973\u5b9d\u5b9d\u7684\u540d\u5b57\n    Assistant: \n  example_title: brainstorming zh\n- text: |-\n    Human: \u63a8\u8350\u51e0\u672c\u91d1\u5eb8\u7684\u6b66\u4fa0\u5c0f\u8bf4\n    Assistant: \n  example_title: brainstorming zh\n---\n\n# Model Card for Model ID\n\n## Model description\nBELLE is based on Bloomz-7b1-mt and finetuned with 0.2M Chinese data combined with 50,000 pieces of English data from the open source Stanford-Alpaca, resulting in good Chinese instruction understanding and response generation capabilities. \n\nThe code of Chinese data generation and other detailed information can be found in our Github project repository: https://github.com/LianjiaTech/BELLE.\n\nWe trained models using datasets of different sizes (200,000, 600,000, and 1,000,000 samples) for instruction learning, and we obtained different model versions as shown below:\n| Datasize| 200,000 | 600,000 | 1,000,000 |\n| ----- | ----- | ----- | ----- |\n| Finetuned Model | [BELLE-7B-0.2M](https://huggingface.co/BelleGroup/BELLE-7B-0.2M) | [BELLE-7B-0.6M](https://huggingface.co/BelleGroup/BELLE-7B-0.6M) | [BELLE-7B-1M](https://huggingface.co/BelleGroup/BELLE-7B-1M) |\n\n## Training hyper-parameters\n| Parameter | Value |\n| ------ | ------ |\n| Batch size | 64 |\n| Learning rate | 3e-6 |\n| Epochs | 3 |\n|Weight_decay | 0.001 |\n|Warmup_rate | 0.1 |\n|LR_scheduler | linear |\n\n## Use model\nPlease note that the input should be formatted as follows in both **training** and **inference**.\n``` python\nHuman: {input} \\n\\nAssistant:\n```\n\nBELLE can be easily loaded with AutoModelForCausalLM.\n``` python\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\nimport sys\n\nmodel_path = \"./\" # You can modify the path for storing the local model\nmodel =  AutoModelForCausalLM.from_pretrained(model_path)\ntokenizer = AutoTokenizer.from_pretrained(model_path)\nprint(\"Human:\")\nline = input()\nwhile line:\n        inputs = 'Human: ' + line.strip() + '\\n\\nAssistant:'\n        input_ids = tokenizer(inputs, return_tensors=\"pt\").input_ids\n        outputs = model.generate(input_ids, max_new_tokens=200, do_sample = True, top_k = 30, top_p = 0.85, temperature = 0.35, repetition_penalty=1.2)\n        rets = tokenizer.batch_decode(outputs, skip_special_tokens=True)\n        print(\"Assistant:\\n\" + rets[0].strip().replace(inputs, \"\"))\n        print(\"\\n------------------------------------------------\\nHuman:\")\n        line = input()\n\n```\n\nThe above example did not utilize the context from previous turns of the conversation. If you want to perform multi-turn dialogue understanding, you can concatenate the previous turns of the conversation in the format of Human:{input}\\n\\nAssistant:{output} and input it to the generate function.\n\n## Limitations\nThere still exists a few issues in the model trained on current base model and data:\n\n1. The model might generate factual errors when asked to follow instructions related to facts.\n\n2. Occasionally generates harmful responses since the model still struggles to identify potential harmful instructions.\n\n3. Needs improvements on reasoning and coding.\n\nSince the model still has its limitations, we require developers only use the open-sourced code, data, model and any other artifacts generated via this project for research purposes. Commercial use and other potential harmful use cases are not allowed.\n\n## Some use cases\n| Human | Assitant |\n| ----- | ------ |\n| \u4f7f\u7528python\u5199\u4e00\u4e2a\u4e8c\u5206\u67e5\u627e\u7684\u4ee3\u7801 | def binary_search(arr, target):<br/>&nbsp;&nbsp;low = 0<br/>&nbsp;&nbsp;high = len(arr) - 1<br/>&nbsp;&nbsp;while (low <= high):<br/>&nbsp;&nbsp;&nbsp;&nbsp;mid = low + high // 2<br/>&nbsp;&nbsp;&nbsp;&nbsp;if arr[mid] == target:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return mid<br/>&nbsp;&nbsp;&nbsp;&nbsp;elif target < arr[mid]:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;low = mid + 1<br/>&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;high = mid - 1<br/>&nbsp;&nbsp;return -1 |\n| \u4eca\u5929\u5929\u6c14\u600e\u4e48\u6837\uff0c\u628a\u8fd9\u53e5\u8bdd\u7ffb\u8bd1\u6210\u82f1\u8bed | What's the weather like today? |\n| Classify the sentiment of the following sentence into Positive, Neutral, or Negative: <br/>Super excited about teaching Stanford\u2019s first course on Large Language Models! Check the syllabus out here | Positive |\n| \u600e\u4e48\u8ba9\u81ea\u5df1\u7cbe\u529b\u5145\u6c9b\uff0c\u52175\u70b9\u5efa\u8bae | \u4ee5\u4e0b\u662f\u4e00\u4e9b\u53ef\u4ee5\u8ba9\u4f60\u4fdd\u6301\u7cbe\u529b\u5145\u6c9b\u7684\u5efa\u8bae\uff1a <br/>1. \u7761\u7720\u5145\u8db3\u3002\u786e\u4fdd\u6bcf\u5929\u665a\u4e0a\u5f97\u5230\u5145\u8db3\u7684\u7761\u7720\u65f6\u95f4\u3002 <br/>2. \u591a\u8fd0\u52a8\u3002\u8fdb\u884c\u9002\u5ea6\u7684\u6709\u6c27\u8fd0\u52a8\uff0c\u5982\u6162\u8dd1\u3001\u6e38\u6cf3\u7b49\uff0c\u53ef\u4ee5\u5e2e\u52a9\u4f60\u63d0\u9ad8\u80fd\u91cf\u548c\u8010\u529b\u3002<br/>3. \u5403\u5065\u5eb7\u98df\u54c1\u3002\u9009\u62e9\u5bcc\u542b\u86cb\u767d\u8d28\u7684\u98df\u7269\uff0c\u5982\u9e21\u8089\u3001\u9c7c\u8089\u548c\u9e21\u86cb\uff0c\u4ee5\u53ca\u65b0\u9c9c\u7684\u6c34\u679c\u548c\u852c\u83dc\u3002 <br/>4. \u51cf\u5c11\u5496\u5561\u56e0\u7684\u6444\u5165\u91cf\u3002\u5c3d\u91cf\u907f\u514d\u5728\u767d\u5929\u559d\u542b\u5496\u5561\u56e0\u7684\u996e\u6599\u6216\u5403\u542b\u6709\u5496\u5561\u56e0\u7684\u98df\u7269\u3002 <br/>5. \u653e\u677e\u8eab\u5fc3\u3002\u5c1d\u8bd5\u51a5\u60f3\u3001\u745c\u4f3d\u6216\u5176\u4ed6\u5f62\u5f0f\u7684\u653e\u677e\u6d3b\u52a8\u6765\u51cf\u8f7b\u538b\u529b\u548c\u7126\u8651\u611f\u3002 |\n| \u8bf7\u4ee5\u300e\u6625\u5929\u7684\u5317\u4eac\u300f\u4e3a\u9898\u5199\u4e00\u9996\u8bd7\u6b4c | \u6625\u5929\u6765\u5230\u5317\u4eac\uff0c\u4e07\u7269\u590d\u82cf\u3002\u8349\u5730\u4e0a\u5f00\u6ee1\u4e86\u4e94\u989c\u516d\u8272\u7684\u82b1\u6735\uff0c <br/>\u6e05\u65b0\u7684\u7a7a\u6c14\u4e2d\u5f25\u6f2b\u7740\u82ac\u82b3\u7684\u6c14\u606f\u3002 <br/>\u4eba\u4eec\u5728\u516c\u56ed\u91cc\u6563\u6b65\u3001\u6253\u592a\u6781\u62f3\uff0c\u4eab\u53d7\u8fd9\u7f8e\u597d\u7684\u65f6\u5149\u3002 <br/>\u591c\u665a\uff0c\u661f\u661f\u95ea\u70c1\uff0c\u6708\u4eae\u5982\u94f6\u76d8\u4e00\u822c\u660e\u4eae\u3002 <br/>\u5728\u8fd9\u4e2a\u5145\u6ee1\u751f\u673a\u7684\u5b63\u8282\u91cc\uff0c\u6211\u4eec\u611f\u53d7\u5230\u4e86\u751f\u547d\u7684\u6d3b\u529b\u4e0e\u5e0c\u671b\u3002 |\n| \u660e\u5929\u5c31\u5047\u671f\u7ed3\u675f\u4e86\uff0c\u6709\u70b9\u6297\u62d2\u4e0a\u73ed\uff0c\u5e94\u8be5\u600e\u4e48\u529e\uff1f | \u9762\u5bf9\u5373\u5c06\u7ed3\u675f\u7684\u5047\u671f\u548c\u5f00\u59cb\u5de5\u4f5c\u65f6\u7684\u7d27\u5f20\u60c5\u7eea\uff0c\u60a8\u53ef\u4ee5\u91c7\u53d6\u4ee5\u4e0b\u63aa\u65bd\u6765\u5e2e\u52a9\u60a8\u66f4\u597d\u5730\u9002\u5e94\uff1a <br/>1. \u4e3a\u81ea\u5df1\u5236\u5b9a\u4e00\u4e2a\u6e05\u6670\u7684\u5de5\u4f5c\u8ba1\u5212\u3002\u8fd9\u53ef\u4ee5\u5e2e\u52a9\u60a8\u66f4\u597d\u5730\u7ec4\u7ec7\u65f6\u95f4\u548c\u4efb\u52a1\uff0c\u5e76\u907f\u514d\u5728\u5de5\u4f5c\u4e2d\u611f\u5230\u6df7\u4e71\u3002 <br/>2. \u4e0e\u540c\u4e8b\u6216\u670b\u53cb\u4ea4\u6d41\uff0c\u5206\u4eab\u60a8\u7684\u611f\u53d7\u548c\u5de5\u4f5c\u538b\u529b\u3002\u8fd9\u5c06\u6709\u52a9\u4e8e\u7f13\u89e3\u4e00\u4e9b\u7126\u8651\u611f\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u83b7\u5f97\u652f\u6301\u548c\u5efa\u8bae\u3002 <br/>3. \u5728\u5de5\u4f5c\u65e5\u524d\u82b1\u4e9b\u65f6\u95f4\u653e\u677e\u8eab\u5fc3\uff0c\u4f8b\u5982\u8fdb\u884c\u745c\u4f3d\u3001\u51a5\u60f3\u7b49\u6d3b\u52a8\u3002\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u51cf\u8f7b\u8eab\u4f53\u548c\u7cbe\u795e\u4e0a\u7684\u75b2\u52b3\u611f\uff0c\u4f7f\u60a8\u66f4\u52a0\u7cbe\u529b\u5145\u6c9b\u5730\u8fce\u63a5\u6311\u6218\u3002 |\n| \u7236\u6bcd\u90fd\u59d3\u5434\uff0c\u53d6\u4e00\u4e9b\u7537\u5b9d\u5b9d\u548c\u5973\u5b9d\u5b9d\u7684\u540d\u5b57 | - \u7537\u5b9d\uff1a\u5434\u4fca\u6770\u3001\u5434\u96e8\u8fb0\u3001\u5434\u5b50\u58a8\u3001\u5434\u601d\u6e90\u3001\u5434\u6cfd\u9633\u3001\u5434\u5b87\u822a\u3001\u5434\u535a\u6587\u3001\u5434\u54f2\u6bc5\u3002 <br/>- \u5973\u5b9d\uff1a\u5434\u7f8e\u742a\u3001\u5434\u4f73\u6021\u3001\u5434\u6b23\u745c\u3001\u5434\u9999\u51dd\u3001\u5434\u96ea\u67d4\u3001\u5434\u9896\u8bd7\u3001\u5434\u8bed\u5ae3\u3002 |\n| \u63a8\u8350\u51e0\u672c\u91d1\u5eb8\u7684\u6b66\u4fa0\u5c0f\u8bf4 | \u4ee5\u4e0b\u662f\u4e09\u672c\u6211\u6700\u559c\u6b22\u7684\u91d1\u5eb8\u6b66\u4fa0\u5c0f\u8bf4\u7684\u63a8\u8350\uff1a <br/>1. \u300a\u5c04\u96d5\u82f1\u96c4\u4f20\u300b - \u4e00\u90e8\u5145\u6ee1\u667a\u6167\u548c\u673a\u667a\u7684\u5c0f\u8bf4\uff0c\u8bb2\u8ff0\u4e86\u90ed\u9756\u3001\u9ec4\u84c9\u592b\u5987\u7684\u6545\u4e8b\u3002 <br/>2. \u300a\u795e\u96d5\u4fa0\u4fa3\u300b- \u8fd9\u662f\u4e00\u90e8\u6d6a\u6f2b\u800c\u611f\u4eba\u7684\u6545\u4e8b\uff0c\u8bb2\u8ff0\u4e86\u4e00\u5bf9\u60c5\u4fa3\u5c0f\u9f99\u5973\u4e0e\u6768\u8fc7\u4e4b\u95f4\u7684\u7231\u60c5\u6545\u4e8b\u3002 <br/>3. \u300a\u501a\u5929\u5c60\u9f99\u8bb0\u300b- \u8fd9\u662f\u4e00\u4e2a\u5b8f\u4f1f\u800c\u58ee\u89c2\u7684\u6545\u4e8b\uff0c\u63cf\u7ed8\u4e86\u660e\u6559\u9886\u8896\u5f20\u65e0\u5fcc\u5982\u4f55\u6210\u4e3a\u4e00\u4f4d\u51fa\u8272\u7684\u82f1\u96c4\u3002 |\n\n***\n\n## \u6a21\u578b\u63cf\u8ff0\nBELLE\u6a21\u578b\u4ee5Bloomz-7b1-mt\u4e3a\u57fa\u7840\uff0c\u5728 0.2M \u6761\u4e2d\u6587\u6570\u636e\u4e0a\uff0c\u7ed3\u5408Stanford-Alpaca\u5f00\u6e90\u76845\u4e07\u6761\u82f1\u6587\u6570\u636e\u4e0a\u8bad\u7ec3\uff0c\u53d6\u5f97\u4e86\u8f83\u597d\u7684\u4e2d\u6587instruction\u7406\u89e3\u4ee5\u53caresponse\u751f\u6210\u80fd\u529b\u3002\n\n\u4e2d\u6587\u6570\u636e\u751f\u6210\u4ee3\u7801\u53ca\u5176\u4ed6\u8be6\u7ec6\u4fe1\u606f\uff0c\u4f4d\u4e8e\u6211\u4eec\u7684Github\u9879\u76ee\u4ed3\u5e93: https://github.com/LianjiaTech/BELLE\n\n\u6211\u4eec\u91c7\u53d6\u4e86\u4e0d\u540c\u5927\u5c0f\u89c4\u6a21\uff0820\u4e07\u300160\u4e07\u548c100\u4e07\u6837\u672c\uff09\u7684\u6307\u4ee4\u5b66\u4e60\u7684\u6570\u636e\u96c6\u8bad\u7ec3\u6a21\u578b\uff0c\u6211\u4eec\u5f97\u5230\u4e0d\u540c\u7684\u6a21\u578b\u7248\u672c\u5982\u4e0b\u6240\u793a:\n| Datasize| 200,000 | 600,000 | 1,000,000 |\n| ----- | ----- | ----- | ----- |\n| Finetuned Model | [BELLE-7B-0.2M](https://huggingface.co/BelleGroup/BELLE-7B-0.2M) | [BELLE-7B-0.6M](https://huggingface.co/BelleGroup/BELLE-7B-0.6M) | [BELLE-7B-1M](https://huggingface.co/BelleGroup/BELLE-7B-1M) |\n\n## \u6a21\u578b\u8bad\u7ec3\u8d85\u53c2\u6570\n| \u53c2\u6570 | \u503c |\n| ------ | ------ |\n| Batch size | 64 |\n| Learning rate | 3e-6 |\n| Epochs | 3 |\n|Weight_decay | 0.001 |\n|Warmup_rate | 0.1 |\n|LR_scheduler | linear |\n\n## \u4f7f\u7528\u6a21\u578b\n\u8bf7\u6ce8\u610f\uff0c\u5728\u8bad\u7ec3\u548c\u63a8\u7406\u65f6\uff0c\u6a21\u578b\u7684\u8f93\u5165\u5e94\u8be5\u5904\u7406\u6210\u5982\u4e0b\u5f62\u5f0f\uff1a\n``` python\nHuman: {input} \\n\\nAssistant:\n```\n\n\u901a\u8fc7AutoModelForCausalLM\u5373\u53ef\u76f4\u63a5\u8f7d\u5165\u6a21\u578b\u5e76\u4f7f\u7528\u3002\n``` python\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\nimport sys\n\nmodel_path = \"./\" # You can modify the path for storing the local model\nmodel =  AutoModelForCausalLM.from_pretrained(model_path)\ntokenizer = AutoTokenizer.from_pretrained(model_path)\nprint(\"Human:\")\nline = input()\nwhile line:\n        inputs = 'Human: ' + line.strip() + '\\n\\nAssistant:'\n        input_ids = tokenizer(inputs, return_tensors=\"pt\").input_ids\n        outputs = model.generate(input_ids, max_new_tokens=200, do_sample = True, top_k = 30, top_p = 0.85, temperature = 0.35, repetition_penalty=1.2)\n        rets = tokenizer.batch_decode(outputs, skip_special_tokens=True)\n        print(\"Assistant:\\n\" + rets[0].strip().replace(inputs, \"\"))\n        print(\"\\n------------------------------------------------\\nHuman:\")\n        line = input()\n\n```\n\n\u4e0a\u9762\u6837\u4f8b\u6ca1\u6709\u5229\u7528\u5bf9\u8bdd\u4e0a\u6587\uff0c\u5982\u679c\u4f60\u60f3\u505a\u591a\u8f6e\u5bf9\u8bdd\u7406\u89e3\uff0c\u53ef\u4ee5\u5c06\u5bf9\u8bdd\u4e0a\u6587\u6309\u7167Human:{input}\\n\\nAssistant:{output} \u65b9\u5f0f\u62fc\u63a5\u8d77\u6765\u8f93\u5165\u7ed9generate\u51fd\u6570\n\n## \u5c40\u9650\u6027\u548c\u4f7f\u7528\u9650\u5236\n\u57fa\u4e8e\u5f53\u524d\u6570\u636e\u548c\u57fa\u7840\u6a21\u578b\u8bad\u7ec3\u5f97\u5230\u7684SFT\u6a21\u578b\uff0c\u5728\u6548\u679c\u4e0a\u4ecd\u5b58\u5728\u4ee5\u4e0b\u95ee\u9898\uff1a\n\n1. \u5728\u6d89\u53ca\u4e8b\u5b9e\u6027\u7684\u6307\u4ee4\u4e0a\u53ef\u80fd\u4f1a\u4ea7\u751f\u8fdd\u80cc\u4e8b\u5b9e\u7684\u9519\u8bef\u56de\u7b54\u3002\n\n2. \u5bf9\u4e8e\u5177\u5907\u5371\u5bb3\u6027\u7684\u6307\u4ee4\u65e0\u6cd5\u5f88\u597d\u7684\u9274\u522b\uff0c\u7531\u6b64\u4f1a\u4ea7\u751f\u5371\u5bb3\u6027\u8a00\u8bba\u3002\n\n3. \u5728\u4e00\u4e9b\u6d89\u53ca\u63a8\u7406\u3001\u4ee3\u7801\u7b49\u573a\u666f\u4e0b\u6a21\u578b\u7684\u80fd\u529b\u4ecd\u6709\u5f85\u63d0\u9ad8\u3002\n\n\u57fa\u4e8e\u4ee5\u4e0a\u6a21\u578b\u5c40\u9650\u6027\uff0c\u6211\u4eec\u8981\u6c42\u5f00\u53d1\u8005\u4ec5\u5c06\u6211\u4eec\u5f00\u6e90\u7684\u4ee3\u7801\u3001\u6570\u636e\u3001\u6a21\u578b\u53ca\u540e\u7eed\u7528\u6b64\u9879\u76ee\u751f\u6210\u7684\u884d\u751f\u7269\u7528\u4e8e\u7814\u7a76\u76ee\u7684\uff0c\u4e0d\u5f97\u7528\u4e8e\u5546\u4e1a\uff0c\u4ee5\u53ca\u5176\u4ed6\u4f1a\u5bf9\u793e\u4f1a\u5e26\u6765\u5371\u5bb3\u7684\u7528\u9014\u3002\n\n## \u4e00\u4e9b\u793a\u4f8b\n\n| Human | Assitant |\n| ----- | ------ |\n| \u4f7f\u7528python\u5199\u4e00\u4e2a\u4e8c\u5206\u67e5\u627e\u7684\u4ee3\u7801 | def binary_search(arr, target):<br/>&nbsp;&nbsp;low = 0<br/>&nbsp;&nbsp;high = len(arr) - 1<br/>&nbsp;&nbsp;while (low <= high):<br/>&nbsp;&nbsp;&nbsp;&nbsp;mid = low + high // 2<br/>&nbsp;&nbsp;&nbsp;&nbsp;if arr[mid] == target:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return mid<br/>&nbsp;&nbsp;&nbsp;&nbsp;elif target < arr[mid]:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;low = mid + 1<br/>&nbsp;&nbsp;&nbsp;&nbsp;else:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;high = mid - 1<br/>&nbsp;&nbsp;return -1 |\n| \u4eca\u5929\u5929\u6c14\u600e\u4e48\u6837\uff0c\u628a\u8fd9\u53e5\u8bdd\u7ffb\u8bd1\u6210\u82f1\u8bed | What's the weather like today? |\n| Classify the sentiment of the following sentence into Positive, Neutral, or Negative: <br/>Super excited about teaching Stanford\u2019s first course on Large Language Models! Check the syllabus out here | Positive |\n| \u600e\u4e48\u8ba9\u81ea\u5df1\u7cbe\u529b\u5145\u6c9b\uff0c\u52175\u70b9\u5efa\u8bae | \u4ee5\u4e0b\u662f\u4e00\u4e9b\u53ef\u4ee5\u8ba9\u4f60\u4fdd\u6301\u7cbe\u529b\u5145\u6c9b\u7684\u5efa\u8bae\uff1a <br/>1. \u7761\u7720\u5145\u8db3\u3002\u786e\u4fdd\u6bcf\u5929\u665a\u4e0a\u5f97\u5230\u5145\u8db3\u7684\u7761\u7720\u65f6\u95f4\u3002 <br/>2. \u591a\u8fd0\u52a8\u3002\u8fdb\u884c\u9002\u5ea6\u7684\u6709\u6c27\u8fd0\u52a8\uff0c\u5982\u6162\u8dd1\u3001\u6e38\u6cf3\u7b49\uff0c\u53ef\u4ee5\u5e2e\u52a9\u4f60\u63d0\u9ad8\u80fd\u91cf\u548c\u8010\u529b\u3002<br/>3. \u5403\u5065\u5eb7\u98df\u54c1\u3002\u9009\u62e9\u5bcc\u542b\u86cb\u767d\u8d28\u7684\u98df\u7269\uff0c\u5982\u9e21\u8089\u3001\u9c7c\u8089\u548c\u9e21\u86cb\uff0c\u4ee5\u53ca\u65b0\u9c9c\u7684\u6c34\u679c\u548c\u852c\u83dc\u3002 <br/>4. \u51cf\u5c11\u5496\u5561\u56e0\u7684\u6444\u5165\u91cf\u3002\u5c3d\u91cf\u907f\u514d\u5728\u767d\u5929\u559d\u542b\u5496\u5561\u56e0\u7684\u996e\u6599\u6216\u5403\u542b\u6709\u5496\u5561\u56e0\u7684\u98df\u7269\u3002 <br/>5. \u653e\u677e\u8eab\u5fc3\u3002\u5c1d\u8bd5\u51a5\u60f3\u3001\u745c\u4f3d\u6216\u5176\u4ed6\u5f62\u5f0f\u7684\u653e\u677e\u6d3b\u52a8\u6765\u51cf\u8f7b\u538b\u529b\u548c\u7126\u8651\u611f\u3002 |\n| \u8bf7\u4ee5\u300e\u6625\u5929\u7684\u5317\u4eac\u300f\u4e3a\u9898\u5199\u4e00\u9996\u8bd7\u6b4c | \u6625\u5929\u6765\u5230\u5317\u4eac\uff0c\u4e07\u7269\u590d\u82cf\u3002\u8349\u5730\u4e0a\u5f00\u6ee1\u4e86\u4e94\u989c\u516d\u8272\u7684\u82b1\u6735\uff0c <br/>\u6e05\u65b0\u7684\u7a7a\u6c14\u4e2d\u5f25\u6f2b\u7740\u82ac\u82b3\u7684\u6c14\u606f\u3002 <br/>\u4eba\u4eec\u5728\u516c\u56ed\u91cc\u6563\u6b65\u3001\u6253\u592a\u6781\u62f3\uff0c\u4eab\u53d7\u8fd9\u7f8e\u597d\u7684\u65f6\u5149\u3002 <br/>\u591c\u665a\uff0c\u661f\u661f\u95ea\u70c1\uff0c\u6708\u4eae\u5982\u94f6\u76d8\u4e00\u822c\u660e\u4eae\u3002 <br/>\u5728\u8fd9\u4e2a\u5145\u6ee1\u751f\u673a\u7684\u5b63\u8282\u91cc\uff0c\u6211\u4eec\u611f\u53d7\u5230\u4e86\u751f\u547d\u7684\u6d3b\u529b\u4e0e\u5e0c\u671b\u3002 |\n| \u660e\u5929\u5c31\u5047\u671f\u7ed3\u675f\u4e86\uff0c\u6709\u70b9\u6297\u62d2\u4e0a\u73ed\uff0c\u5e94\u8be5\u600e\u4e48\u529e\uff1f | \u9762\u5bf9\u5373\u5c06\u7ed3\u675f\u7684\u5047\u671f\u548c\u5f00\u59cb\u5de5\u4f5c\u65f6\u7684\u7d27\u5f20\u60c5\u7eea\uff0c\u60a8\u53ef\u4ee5\u91c7\u53d6\u4ee5\u4e0b\u63aa\u65bd\u6765\u5e2e\u52a9\u60a8\u66f4\u597d\u5730\u9002\u5e94\uff1a <br/>1. \u4e3a\u81ea\u5df1\u5236\u5b9a\u4e00\u4e2a\u6e05\u6670\u7684\u5de5\u4f5c\u8ba1\u5212\u3002\u8fd9\u53ef\u4ee5\u5e2e\u52a9\u60a8\u66f4\u597d\u5730\u7ec4\u7ec7\u65f6\u95f4\u548c\u4efb\u52a1\uff0c\u5e76\u907f\u514d\u5728\u5de5\u4f5c\u4e2d\u611f\u5230\u6df7\u4e71\u3002 <br/>2. \u4e0e\u540c\u4e8b\u6216\u670b\u53cb\u4ea4\u6d41\uff0c\u5206\u4eab\u60a8\u7684\u611f\u53d7\u548c\u5de5\u4f5c\u538b\u529b\u3002\u8fd9\u5c06\u6709\u52a9\u4e8e\u7f13\u89e3\u4e00\u4e9b\u7126\u8651\u611f\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u83b7\u5f97\u652f\u6301\u548c\u5efa\u8bae\u3002 <br/>3. \u5728\u5de5\u4f5c\u65e5\u524d\u82b1\u4e9b\u65f6\u95f4\u653e\u677e\u8eab\u5fc3\uff0c\u4f8b\u5982\u8fdb\u884c\u745c\u4f3d\u3001\u51a5\u60f3\u7b49\u6d3b\u52a8\u3002\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u51cf\u8f7b\u8eab\u4f53\u548c\u7cbe\u795e\u4e0a\u7684\u75b2\u52b3\u611f\uff0c\u4f7f\u60a8\u66f4\u52a0\u7cbe\u529b\u5145\u6c9b\u5730\u8fce\u63a5\u6311\u6218\u3002 |\n| \u7236\u6bcd\u90fd\u59d3\u5434\uff0c\u53d6\u4e00\u4e9b\u7537\u5b9d\u5b9d\u548c\u5973\u5b9d\u5b9d\u7684\u540d\u5b57 | - \u7537\u5b9d\uff1a\u5434\u4fca\u6770\u3001\u5434\u96e8\u8fb0\u3001\u5434\u5b50\u58a8\u3001\u5434\u601d\u6e90\u3001\u5434\u6cfd\u9633\u3001\u5434\u5b87\u822a\u3001\u5434\u535a\u6587\u3001\u5434\u54f2\u6bc5\u3002 <br/>- \u5973\u5b9d\uff1a\u5434\u7f8e\u742a\u3001\u5434\u4f73\u6021\u3001\u5434\u6b23\u745c\u3001\u5434\u9999\u51dd\u3001\u5434\u96ea\u67d4\u3001\u5434\u9896\u8bd7\u3001\u5434\u8bed\u5ae3\u3002 |\n| \u63a8\u8350\u51e0\u672c\u91d1\u5eb8\u7684\u6b66\u4fa0\u5c0f\u8bf4 | \u4ee5\u4e0b\u662f\u4e09\u672c\u6211\u6700\u559c\u6b22\u7684\u91d1\u5eb8\u6b66\u4fa0\u5c0f\u8bf4\u7684\u63a8\u8350\uff1a <br/>1. \u300a\u5c04\u96d5\u82f1\u96c4\u4f20\u300b - \u4e00\u90e8\u5145\u6ee1\u667a\u6167\u548c\u673a\u667a\u7684\u5c0f\u8bf4\uff0c\u8bb2\u8ff0\u4e86\u90ed\u9756\u3001\u9ec4\u84c9\u592b\u5987\u7684\u6545\u4e8b\u3002 <br/>2. \u300a\u795e\u96d5\u4fa0\u4fa3\u300b- \u8fd9\u662f\u4e00\u90e8\u6d6a\u6f2b\u800c\u611f\u4eba\u7684\u6545\u4e8b\uff0c\u8bb2\u8ff0\u4e86\u4e00\u5bf9\u60c5\u4fa3\u5c0f\u9f99\u5973\u4e0e\u6768\u8fc7\u4e4b\u95f4\u7684\u7231\u60c5\u6545\u4e8b\u3002 <br/>3. \u300a\u501a\u5929\u5c60\u9f99\u8bb0\u300b- \u8fd9\u662f\u4e00\u4e2a\u5b8f\u4f1f\u800c\u58ee\u89c2\u7684\u6545\u4e8b\uff0c\u63cf\u7ed8\u4e86\u660e\u6559\u9886\u8896\u5f20\u65e0\u5fcc\u5982\u4f55\u6210\u4e3a\u4e00\u4f4d\u51fa\u8272\u7684\u82f1\u96c4\u3002 |", "size_bytes": "28276106203", "downloads": 28}