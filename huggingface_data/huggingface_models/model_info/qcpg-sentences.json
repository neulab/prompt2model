{"pretrained_model_name": "ibm/qcpg-sentences", "description": "---\ntags:\n- text-2-text-generation\n- t5\n- augmentation\n- paraphrase\n- paraphrasing\nlicense: apache-2.0\n---\n\n# Model Card for qcpg-sentences  \n \n# Model Details\n\n# Quality Controlled Paraphrase Generation (ACL 2022)\n> Paraphrase generation has been widely used in various downstream tasks. Most tasks benefit mainly from high quality paraphrases, namely those that are semantically similar to, yet linguistically diverse from, the original sentence. Generating high-quality paraphrases is challenging as it becomes increasingly hard to preserve meaning as linguistic diversity increases. Recent works achieve nice results by controlling specific aspects of the paraphrase, such as its syntactic tree. However, they do not allow to directly control the quality of the generated paraphrase, and suffer from low flexibility and scalability. \n\n<img src=\"https://github.com/IBM/quality-controlled-paraphrase-generation/raw/main/assets/images/ilus.jpg\" width=\"40%\"> \n\n> Here we propose `QCPG`, a quality-guided controlled paraphrase generation model, that allows directly controlling the quality dimensions. Furthermore, we suggest a method that given a sentence, identifies points in the quality control space that are expected to yield optimal generated paraphrases. We show that our method is able to generate paraphrases which maintain the original meaning while achieving higher diversity than the uncontrolled baseline.\n\n## Training, Evaluation and Inference\nThe code for training, evaluation and inference for both `QCPG` and `QP` is located in the dedicated directories.  Scripts necassery for reproducing the experiments can be found in the `QCPG/scripts`, `QP/scripts` directories. \n\nMake sure to run `QCPG/scripts/prepare_data.sh` and set the missing datasets directories accordingly before training!\n\n<img src=\"https://github.com/IBM/quality-controlled-paraphrase-generation/raw/main/assets/images/arch.png\" width=\"90%\"> \n\n## Trained Models\n\n```\n!!! Notice !!! Our results show that on avarage QCPG is follwing the quality conditions and capable of generating higher quality greedy-sampled paraphrases then finetuned model. It does not mean it will output perfect paraphrases all the time!!! In practice, for best preformence, we highly reccomend: (1) Find the right quality control values (2) Use more sophisticated sampling methods (3) Apply post-generation monitoring and filtering. \n```\n\n\n[`qcpg-questions`](https://huggingface.co/ibm/qcpg-questions) (Trained on `data/wikians`)\n\n[`qcpg-sentences`](https://huggingface.co/ibm/qcpg-sentences) (Trained on `data/parabk2`)\n\n[`qcpg-captions`](https://huggingface.co/ibm/qcpg-captions) (Trained on `data/mscoco`)\n\n## Usage\n\nThe best way to use the model is with the following code:\n```python\nfrom transformers import pipeline\n\nclass QualityControlPipeline:\n    \n    def __init__(self, type):\n        assert type in ['captions', 'questions', 'sentences']\n        self.pipe = pipeline('text2text-generation', model=f'ibm/qcpg-{type}')\n        self.ranges = {\n            'captions': {'lex': [0, 90], 'syn': [0, 80], 'sem': [0, 95]},\n            'sentences': {'lex': [0, 100], 'syn': [0, 80], 'sem': [0, 95]},\n            'questions': {'lex': [0, 90], 'syn': [0, 75], 'sem': [0, 95]}\n        }[type]\n\n    def __call__(self, text, lexical, syntactic, semantic, **kwargs):\n        assert all([0 <= val <= 1 for val in [lexical, syntactic, semantic]]), \\\n                 f' control values must be between 0 and 1, got {lexical}, {syntactic}, {semantic}'\n        names = ['semantic_sim', 'lexical_div', 'syntactic_div']\n        control = [int(5 * round(val * 100 / 5)) for val in [semantic, lexical, syntactic]]\n        control ={name: max(min(val , self.ranges[name[:3]][1]), self.ranges[name[:3]][0]) for name, val in zip(names, control)}\n        control = [f'COND_{name.upper()}_{control[name]}' for name in names]\n        assert all(cond in self.pipe.tokenizer.additional_special_tokens for cond in control)\n        text = ' '.join(control) + text if isinstance(text, str) else [' '.join(control) for t in text]\n        return self.pipe(text, **kwargs)\n```\n\nLoading:\n```python\nmodel = QualityControlPipeline('sentences')\n```\n\nGeneration with quality controlls:\n```python\nmodel('Is this going to work or what are we doing here?', lexical=0.3, syntactic=0.5, semantic=0.8)\n```\nOutput: `[{'generated_text': \"Will it work or what is it we're doing?\"}]`\n    \n    \n## Citation\n```\n@inproceedings{bandel-etal-2022-quality,\n    title = \"Quality Controlled Paraphrase Generation\",\n    author = \"Bandel, Elron  and\n      Aharonov, Ranit  and\n      Shmueli-Scheuer, Michal  and\n      Shnayderman, Ilya  and\n      Slonim, Noam  and\n      Ein-Dor, Liat\",\n    booktitle = \"Proceedings of the 60th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)\",\n    month = may,\n    year = \"2022\",\n    address = \"Dublin, Ireland\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"https://aclanthology.org/2022.acl-long.45\",\n    pages = \"596--609\",\n    abstract = \"Paraphrase generation has been widely used in various downstream tasks. Most tasks benefit mainly from high quality paraphrases, namely those that are semantically similar to, yet linguistically diverse from, the original sentence. Generating high-quality paraphrases is challenging as it becomes increasingly hard to preserve meaning as linguistic diversity increases. Recent works achieve nice results by controlling specific aspects of the paraphrase, such as its syntactic tree. However, they do not allow to directly control the quality of the generated paraphrase, and suffer from low flexibility and scalability. Here we propose QCPG, a quality-guided controlled paraphrase generation model, that allows directly controlling the quality dimensions. Furthermore, we suggest a method that given a sentence, identifies points in the quality control space that are expected to yield optimal generated paraphrases. We show that our method is able to generate paraphrases which maintain the original meaning while achieving higher diversity than the uncontrolled baseline. The models, the code, and the data can be found in https://github.com/IBM/quality-controlled-paraphrase-generation.\",\n}\n```\n \n## Model Description\nThe model creators note in the [associated paper](https://arxiv.org/pdf/2203.10940.pdf):\n>Here we propose QCPG, a quality-guided controlled paraphrase generation model, that allows directly controlling the quality dimensions. Furthermore, we suggest a method that given a sentence, identifies points in the quality control space that are expected to yield optimal generated paraphrases. We show that our method is able to generate paraphrases which maintain the original meaning while achieving higher diversity than the uncontrolled baseline.\n \n- **Developed by:** IBM\n- **Shared by [Optional]:** IBM\n\n- **Model type:** Text2Text Generation\n- **Language(s) (NLP):** More information needed\n- **License:** More information needed\n- **Parent Model:** [All T5 Checkpoints](https://huggingface.co/models?search=t5)\n- **Resources for more information:** \n  - [GitHub Repo](https://github.com/IBM/quality-controlled-paraphrase-generation)\n   - [Associated Paper](https://arxiv.org/pdf/2203.10940.pdf)\n\n\n# Uses\n \n\n## Direct Use\nThis model can be used for the task of Text2Text generation. \n \n## Downstream Use [Optional]\n \nMore information needed.\n \n## Out-of-Scope Use\n \nThe model should not be used to intentionally create hostile or alienating environments for people. \n \n# Bias, Risks, and Limitations\n \n \nSignificant research has explored bias and fairness issues with language models (see, e.g., [Sheng et al. (2021)](https://aclanthology.org/2021.acl-long.330.pdf) and [Bender et al. (2021)](https://dl.acm.org/doi/pdf/10.1145/3442188.3445922)). Predictions generated by the model may include disturbing and harmful stereotypes across protected classes; identity characteristics; and sensitive, social, and occupational groups.\n\n\n\n## Recommendations\n \n \nUsers (both direct and downstream) should be made aware of the risks, biases and limitations of the model. More information needed for further recommendations.\n\n# Training Details\n \n## Training Data\n \nThe model creators note in the [associated paper](https://arxiv.org/pdf/2203.10940.pdf):\n> These datasets are large but noisy, and contain only a relatively small amount of high quality paraphrases.\n*MSCOCO:* This dataset consists of 123K im- ages, where each image contains at most five human-labeled captions (Lin et al., 2014). Similar to previous works we consider different captions of the same image as paraphrases.\n*WikiAnswers (WikiAns for short):* The WikiAnswers corpus contains clusters of ques- tions tagged by wiki-answers.com users as similar. There are 30, 370, 994 clusters with 25 question in each on average. In total, the corpus contains over 70 million question pairs \n*ParaBank2.0:* A dataset containing clusters of sentential paraphrases, produced from a bilingual corpus using negative constraints, inference sam- pling, and clustering. The dataset is composed of avarage of 5 paraphrases in every cluster and close to 100 million pairs in total.\n \n \n## Training Procedure\n\n \n### Preprocessing\n \nThe model creators note in the [associated paper](https://arxiv.org/pdf/2203.10940.pdf):\n> To get comparable results across all datasets, we randomly sub-sampled ParaBank2.0 and WikiAns to the same size as MSCOCO, and split them to train, dev and test sets, of sizes 900K, 14K and 14K respectively. We carefully made sure that there are no pairs from the same cluster in differ- ent splits of the data. \n \n\n\n \n### Speeds, Sizes, Times\n \nThe model creators note in the [associated paper](https://arxiv.org/pdf/2203.10940.pdf):\n> All models are trained with batch size of 32 on 2 NVIDIA A100 GPUs for 6 epochs. \n \n# Evaluation\n \n \n## Testing Data, Factors & Metrics\n \n### Testing Data\n \nMore information needed\n \n### Factors\nMore information needed\n \n### Metrics\n \nMore information needed\n \n \n## Results \n \nMore information needed\n\n \n# Model Examination\n \nMore information needed\n \n# Environmental Impact\n \nCarbon emissions can be estimated using the [Machine Learning Impact calculator](https://mlco2.github.io/impact#compute) presented in [Lacoste et al. (2019)](https://arxiv.org/abs/1910.09700).\n \n- **Hardware Type:** 2 NVIDIA A100 \n- **Hours used:** More information needed\n- **Cloud Provider:** More information needed\n- **Compute Region:** More information needed\n- **Carbon Emitted:** More information needed\n \n# Technical Specifications [optional]\n \n## Model Architecture and Objective\n \nMore information needed\n \n## Compute Infrastructure\n \nMore information needed\n \n### Hardware\n \n \nMore information needed\n \n### Software\n \nMore information needed.\n \n# Citation\n\n \n**BibTeX:**\n \nMore information needed\n```bibtex\n@inproceedings{bandel-etal-2022-quality,\n    title = \"Quality Controlled Paraphrase Generation\",\n    author = \"Bandel, Elron  and\n      Aharonov, Ranit  and\n      Shmueli-Scheuer, Michal  and\n      Shnayderman, Ilya  and\n      Slonim, Noam  and\n      Ein-Dor, Liat\",\n    booktitle = \"Proceedings of the 60th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)\",\n    month = may,\n    year = \"2022\",\n    address = \"Dublin, Ireland\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"https://aclanthology.org/2022.acl-long.45\",\n    pages = \"596--609\",\n    abstract = \"Paraphrase generation has been widely used in various downstream tasks. Most tasks benefit mainly from high quality paraphrases, namely those that are semantically similar to, yet linguistically diverse from, the original sentence. Generating high-quality paraphrases is challenging as it becomes increasingly hard to preserve meaning as linguistic diversity increases. Recent works achieve nice results by controlling specific aspects of the paraphrase, such as its syntactic tree. However, they do not allow to directly control the quality of the generated paraphrase, and suffer from low flexibility and scalability. Here we propose QCPG, a quality-guided controlled paraphrase generation model, that allows directly controlling the quality dimensions. Furthermore, we suggest a method that given a sentence, identifies points in the quality control space that are expected to yield optimal generated paraphrases. We show that our method is able to generate paraphrases which maintain the original meaning while achieving higher diversity than the uncontrolled baseline. The models, the code, and the data can be found in https://github.com/IBM/quality-controlled-paraphrase-generation.\",\n}\n \n```\n\n\n\n**APA:**\n\nMore information needed\n  \n# Glossary [optional]\n \nMore information needed\n\n# More Information [optional]\nMore information needed \n\n# Model Card Authors [optional]\n \nIBM  in collaboration with Ezi Ozoani and the Hugging Face team\n\n# Model Card Contact\n \nMore information needed\n \n# How to Get Started with the Model\n \nUse the code below to get started with the model.\n \n<details>\n<summary> Click to expand </summary>\n\n```python\nfrom transformers import AutoTokenizer, AutoModelForSeq2SeqLM\n\ntokenizer = AutoTokenizer.from_pretrained(\"ibm/qcpg-sentences\")\n\nmodel = AutoModelForSeq2SeqLM.from_pretrained(\"ibm/qcpg-sentences\")\n\n \n ```\n</details>", "size_bytes": "891819455", "downloads": 3594}