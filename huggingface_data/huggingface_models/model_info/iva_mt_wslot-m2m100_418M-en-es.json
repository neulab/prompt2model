{"pretrained_model_name": "cartesinus/iva_mt_wslot-m2m100_418M-en-es", "description": "---\nlicense: mit\ntags:\n- generated_from_trainer\ndatasets:\n- cartesinus/iva_mt_wslot\nmetrics:\n- bleu\nmodel-index:\n- name: iva_mt_wslot-m2m100_418M-en-es\n  results:\n  - task:\n      name: Sequence-to-sequence Language Modeling\n      type: text2text-generation\n    dataset:\n      name: iva_mt_wslot\n      type: iva_mt_wslot\n      config: en-es\n      split: validation\n      args: en-es\n    metrics:\n    - name: Bleu\n      type: bleu\n      value: 69.2836\nlanguage:\n- en\n- es\npipeline_tag: translation\n---\n\n<!-- This model card has been generated automatically according to the information the Trainer had access to. You\nshould probably proofread and complete it, then remove this comment. -->\n\n# iva_mt_wslot-m2m100_418M-en-es\n\nThis model is a fine-tuned version of [facebook/m2m100_418M](https://huggingface.co/facebook/m2m100_418M) on the iva_mt_wslot dataset.\nIt achieves the following results on the evaluation set:\n- Loss: 0.0115\n- Bleu: 69.2836\n- Gen Len: 20.2064\n\n## Model description\n\nMore information needed\n\n## How to use\n\nFirst please make sure to install `pip install transformers`. First download model: \n\n```python\nfrom transformers import M2M100ForConditionalGeneration, M2M100Tokenizer\nimport torch\n\ndef translate(input_text, lang):\n    input_ids = tokenizer(input_text, return_tensors=\"pt\")\n    generated_tokens = model.generate(**input_ids, forced_bos_token_id=tokenizer.get_lang_id(lang))\n    return tokenizer.batch_decode(generated_tokens, skip_special_tokens=True)\n\nmodel_name = \"cartesinus/iva_mt_wslot-m2m100_418M-0.1.0-en-es\"\ntokenizer = M2M100Tokenizer.from_pretrained(model_name, src_lang=\"en\", tgt_lang=\"es\")\nmodel = M2M100ForConditionalGeneration.from_pretrained(model_name)\n```\n\nThen you can translate either plain text like this:\n```python\nprint(translate(\"set the temperature on my thermostat\", \"es\"))\n```\nor you can translate with slot annotations that will be restored in tgt language:\n```python\nprint(translate(\"wake me up at <a>nine am<a> on <b>friday<b>\", \"es\"))\n```\nLimitations of translation with slot transfer:\n1) Annotated words must be placed between semi-xml tags like this \"this is \\<a\\>example\\<a\\>\"\n2) There is no closing tag for example \"\\<\\a\\>\" in the above example - this is done on purpose to omit problems with backslash escape\n3) If the sentence consists of more than one slot then simply use the next alphabet letter. For example \"this is \\<a\\>example\\<a\\> with more than \\<b\\>one\\<b\\> slot\"\n4) Please do not add space before the first or last annotated word because this particular model was trained this way and it most probably will lower its results\n\n## Training procedure\n\n### Training hyperparameters\n\nThe following hyperparameters were used during training:\n- learning_rate: 2e-05\n- train_batch_size: 4\n- eval_batch_size: 4\n- seed: 42\n- optimizer: Adam with betas=(0.9,0.999) and epsilon=1e-08\n- lr_scheduler_type: linear\n- num_epochs: 7\n- mixed_precision_training: Native AMP\n\n### Training results\n\n| Training Loss | Epoch | Step  | Validation Loss | Bleu    | Gen Len |\n|:-------------:|:-----:|:-----:|:---------------:|:-------:|:-------:|\n| 0.0135        | 1.0   | 2104  | 0.0122          | 66.8284 | 20.2851 |\n| 0.009         | 2.0   | 4208  | 0.0112          | 68.1164 | 20.1501 |\n| 0.0067        | 3.0   | 6312  | 0.0110          | 68.256  | 20.0603 |\n| 0.0051        | 4.0   | 8416  | 0.0110          | 68.7002 | 20.1219 |\n| 0.0037        | 5.0   | 10520 | 0.0112          | 68.699  | 20.2733 |\n| 0.0027        | 6.0   | 12624 | 0.0113          | 68.9916 | 20.209  |\n| 0.0023        | 7.0   | 14728 | 0.0115          | 69.2836 | 20.2064 |\n\n\n### Framework versions\n\n- Transformers 4.28.1\n- Pytorch 2.0.0+cu118\n- Datasets 2.11.0\n- Tokenizers 0.13.3\n\n## Citation\n\nIf you use this model, please cite the following:\n```\n@article{Sowanski2023SlotLI,\n  title={Slot Lost in Translation? Not Anymore: A Machine Translation Model for Virtual Assistants with Type-Independent Slot Transfer},\n  author={Marcin Sowanski and Artur Janicki},\n  journal={2023 30th International Conference on Systems, Signals and Image Processing (IWSSIP)},\n  year={2023},\n  pages={1-5}\n}\n```", "size_bytes": "1944201353", "downloads": 16}