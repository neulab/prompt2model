{"pretrained_model_name": "seonghyeonye/flipped_3B", "description": "---\ndatasets:\n- bigscience/P3\nlanguage: en\nlicense: apache-2.0\nwidget:\n- text : \"input: <extra_id_0> The item was packaged in bubble wrap. <extra_id_1>\\n\n- It was fragile.\\n\n- It was small.\\n\noutput: It was fragile.\"\n---\n\n**Official repository**: [seonghyeonye/Flipped-Learning](https://github.com/seonghyeonye/Flipped-Learning)\n# Model Description\nFLIPPED uses a unique meta-learning method to show zero-shot task generalization on classification natural language prompts, outperforming GPT-3 and T0-11B on many tasks with a 4x smaller scale.\nIt is a series of encoder-decoder model trained on a numerous classification dataset. We show inputs and its corresponding outputs of each instances in each dataset to FLIPPED, and train it to generate its possible instruction. We add unlikelihood loss in order **not** to generate the instruction when given the same input, but a wrong output. To obtain FLIPPED, we fine-tune a T5 model in a given scale on a multitask mixture covering many different classification NLP tasks.\n# Intended uses\nYou can use the models to perform inference on tasks by specifying your input-output NLP query in a \"input: {input}\\noutput: {output}\" form , and the model will predict the instruction. For example, You can try \n*\"input: <extra_id_0> this is the best cast iron skillet you will ever buy<extra_id_1>\\noutput: Positive\"*\nas an input, and the model will hopefully generate *\"Title: Review:\"*.\n\n# How to use\nOur overall explanation models along with ablations can be found in our [paper](https://arxiv.org/abs/2210.02969). We recommend using the [FLIPPED-11B](seonghyeonye/flipped_11B) checkpoint as it leads (on average) to the best performances on a variety of NLP tasks.\n|Model|Number of parameters|\n|-|-|\n|[Flipped_11B](https://huggingface.co/seonghyeonye/flipped_11B)|11 billion|\n|[Flipped_3B](https://huggingface.co/seonghyeonye/flipped_3B)|3 billion|\nHere is how to download the model in PyTorch:\n\n```python\nimport torch\nfrom transformers import T5Tokenizer, T5ForConditionalGeneration\n\nmodel = T5ForConditionalGeneration.from_pretrained(\"seonghyeonye/flipped_3B\")\ntokenizer = T5Tokenizer.from_pretrained(\"seonghyeonye/flipped_3B\")\n```\nIf you want to use another checkpoint, please replace the path in `T5Tokenizer` and `T5ForConditionalGeneration`.\nWe also provide a quick [Jupyter Notebook](https://github.com/seonghyeonye/Flipped-Learning/blob/master/flipped_inference.ipynb) where you can inference with our method.\n**Note: the model was trained with fp32 activations. As such, we highly discourage running inference with fp16.**\n\n# Training procedure\nFLIPPED models are based on [T5](https://huggingface.co/google/t5-v1_1-xl), a Transformer-based encoder-decoder language model pre-trained with a masked language modeling-style objective on [C4](https://huggingface.co/datasets/c4).\nAt a high level, the input text along with output label is fed to the encoder and the instruction text is produced by the decoder. The model is fine-tuned to autoregressively generate the target. We also feed input text along with a wrong input, adding an unlikelihood loss in order not to make model produce the proper instruction in that case. Here are our training details.\nTraining details:\n- Fine-tuning steps: 5'000\n- Input sequence length: 512\n- Target sequence length: 128\n- Batch size: 240\n- Optimizer: Adafactor\n- Learning rate: 5e-5\n- Dropout: 0.1\n- Sampling strategy: proportional to the number of examples in each dataset (we randomly sampled any dataset if it has over 500'000 examples so that it has at most 500'000 examples. Also, we randomly choose which instruction to generate for each training steps, so ideally each instruction appears *num_examples/num_templates* while training.)\n\n# Training data\nWe trained different variants T0 with different mixtures of datasets.\n|Model|Training datasets|\n|--|--|\n|FLIPPED_11B|- Multiple-Choice QA: CommonsenseQA, DREAM, QUAIL, QuaRTz, Social IQA, WiQA, Cosmos, QASC, Quarel, SciQ<br>-  Sentiment: Amazon, App Reviews, IMDB, Rotten Tomatoes, Yelp<br>- Topic Classification: AG News, DBPedia<br>- Paraphrase Identification: MRPC, PAWS, QQP|\n|FLIPPED_3B|Same as FLIPPED_11B|\nWe only choose prompts examples that has output lables, which can be found on the dataset page.\n\n# Evaluation data\n\nWe evaluate our models on following datasets:\n|Task category|Datasets|\n|-|-|\n|Natural language inference|ANLI(R1, R2, R3), CB, RTE|\n|Coreference resolution|WSC, Winogrande|\n|Word sense disambiguation|WiC|\n|Sentence completion|COPA, HellaSwag, Story Cloze|\n|QA|PIQA, ARC-Challenge, OpenbookQA|\nWe also evaluate FLIPPED on a subset of [BIG-bench benchmark](https://github.com/google/BIG-bench):\n- Code description task\n- Conceptual combinations\n- Hindu knowledge json\n- Known unknowns\n- Language identification\n- Logic grid puzzle task\n- Logical deduction\n- Common misconceptions\n- Movie dialog same or different\n- Novel concepts\n- Strategyqa\n- Formal fallacies syllogisms negation\n- VitaminC\n- Winowhy multiple choice\n\n# Label generalization\nWe evaluate the robustness of models on following datasets with changing the output label of the datasets. The substitute words can be found in our [paper](https://arxiv.org/abs/2210.02969).\n|Task category|(Datasets, Template name)| \n|-|-|\n|Unseen tasks|(WSC, does the pronoun refer to), (CB, can we infer), (RTE, MNLI crowdsource)|\n|Seen tasks|(IMDB, Reviewer Enjoyment Yes No), (PAWS, Meaning) |\n The template name we used can be found in the [promptsource template library](https://github.com/bigscience-workshop/promptsource/tree/main/promptsource/templates). \n# BibTeX entry and citation info\n```bibtex\n@article{ye2022guess,\n  title={Guess the Instruction! Flipped Learning Makes Language Models Stronger Zero-Shot Learners},\n  author={Ye, Seonghyeon and Kim, Doyoung and Jang, Joel and Shin, Joongbo and Seo, Minjoon},\n  journal={arXiv preprint arXiv:2210.02969},\n  year={2022}\n}\n```", "size_bytes": 11925413888, "downloads": 100}