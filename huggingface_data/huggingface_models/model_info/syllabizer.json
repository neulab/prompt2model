{"pretrained_model_name": "imjeffhi/syllabizer", "description": "## About\nThis model takes in a word as an input and splits it into syllables. I did this by pre-training a T5 model from a syllables dataset I scraped from the internet. I'm using a custom tokenizer that is effectively character-based. It seems to work okay in my limited tests, but the output may be unpredictable when inputting multiple words, numbers, or non-English characters. It can, however, handle things such as trailing punctuation.\n\n## Calling the Model\n```python\nfrom transformers import AutoTokenizer, T5ForConditionalGeneration\n\nmodel = T5ForConditionalGeneration.from_pretrained('imjeffhi/syllabizer')\ntokenizer = AutoTokenizer.from_pretrained('imjeffhi/syllabizer')\n\ndef generate_output(word):\n    tokens = tokenizer(word, return_tensors='pt')\n    output = model.generate(**tokens, do_sample=False, max_length=30, early_stopping=True)[0]\n    return tokenizer.decode(output, skip_special_tokens=True)\n    \nsyllables = generate_output('syllabizer')\n```\nThe model returns syllables in spaced format. See output below. \n```python\nsyl la biz er\n```\n## Using pipelines to syllabize sentences\nYou can easily syllabize an entire sentence/paragraph and/or convert the output into a list of syllables with the following code:\n```python\nfrom transformers import pipeline\n\nsyllabizer_pipe = pipeline('text2text-generation', model = 'imjeffhi/syllabizer', tokenizer='imjeffhi/syllabizer')\n\nsentence = \"A unit of spoken language consisting of a single uninterrupted sound formed by a vowel, diphthong, or syllabic consonant alone, or by any of these sounds preceded, followed, or surrounded by one or more consonants.\"\nwords = sentence.split(\" \")\noutput = syllabizer_pipe(words, batch_size=len(words),do_sample=False, max_length=30, early_stopping=True)\n\n[{words[i]: gen_text['generated_text'].split(\" \")} for i, gen_text in enumerate(output)]\n```\n\nThis outputs the following:\n```\n[{'A': ['a']},\n {'unit': ['u', 'nit']},\n {'of': ['of']},\n {'spoken': ['spok', 'en']},\n {'language': ['lan', 'guage']},\n {'consisting': ['con', 'sis', 'ting']},\n {'of': ['of']},\n {'a': ['a']},\n {'single': ['sing', 'le']},\n {'uninterrupted': ['un', 'in', 'ter', 'rupt', 'ed']},\n {'sound': ['sound']},\n {'formed': ['formed']},\n {'by': ['by']},\n {'a': ['a']},\n {'vowel,': ['vow', 'el']},\n {'diphthong,': ['diph', 'thong']},\n {'or': ['or']},\n {'syllabic': ['syl', 'la', 'bic']},\n {'consonant': ['con', 'so', 'nant']},\n {'alone,': ['a', 'lone']},\n {'or': ['or']},\n {'by': ['by']},\n {'any': ['an', 'y']},\n {'of': ['of']},\n {'these': ['these']},\n {'sounds': ['sounds']},\n {'preceded,': ['pre', 'ced', 'ed']},\n {'followed,': ['fol', 'lowed']},\n {'or': ['or']},\n {'surrounded': ['sur', 'round', 'ed']},\n {'by': ['by']},\n {'one': ['one']},\n {'or': ['or']},\n {'more': ['more']},\n {'consonants.': ['con', 'so', 'nants']}]\n```\n", "size_bytes": "232612707", "downloads": 3}