{"pretrained_model_name": "microsoft/tapex-base-finetuned-wikisql", "description": "---\nlanguage: en\ntags:\n- tapex\n- table-question-answering\ndatasets:\n- wikisql\nlicense: mit\n---\n\n# TAPEX (base-sized model) \n\nTAPEX was proposed in [TAPEX: Table Pre-training via Learning a Neural SQL Executor](https://arxiv.org/abs/2107.07653) by Qian Liu, Bei Chen, Jiaqi Guo, Morteza Ziyadi, Zeqi Lin, Weizhu Chen, Jian-Guang Lou. The original repo can be found [here](https://github.com/microsoft/Table-Pretraining).\n\n## Model description\n\nTAPEX (**Ta**ble **P**re-training via **Ex**ecution) is a conceptually simple and empirically powerful pre-training approach to empower existing models with *table reasoning* skills. TAPEX realizes table pre-training by learning a neural SQL executor over a synthetic corpus, which is obtained by automatically synthesizing executable SQL queries.\n\nTAPEX is based on the BART architecture, the transformer encoder-encoder (seq2seq) model with a bidirectional (BERT-like) encoder and an autoregressive (GPT-like) decoder.\n\nThis model is the `tapex-base` model fine-tuned on the [WikiSQL](https://huggingface.co/datasets/wikisql) dataset.\n\n## Intended Uses\n\nYou can use the model for table question answering on relatively simple questions. Some **solveable** questions are shown below (corresponding tables now shown):\n\n| Question | Answer |\n|:---: |:---:|\n| tell me what the notes are for south australia | no slogan on current series |\n| what position does the player who played for butler cc (ks) play? | guard-forward |\n| how many schools did player number 3 play at? | 1.0 |\n| how many winning drivers in the kraco twin 125 (r2) race were there? | 1.0 |\n| for the episode(s) aired in the u.s. on 4 april 2008, what were the names? | \"bust a move\" part one, \"bust a move\" part two |\n\n\n### How to Use\n\nHere is how to use this model in transformers:\n\n```python\nfrom transformers import TapexTokenizer, BartForConditionalGeneration\nimport pandas as pd\n\ntokenizer = TapexTokenizer.from_pretrained(\"microsoft/tapex-base-finetuned-wikisql\")\nmodel = BartForConditionalGeneration.from_pretrained(\"microsoft/tapex-base-finetuned-wikisql\")\n\ndata = {\n    \"year\": [1896, 1900, 1904, 2004, 2008, 2012],\n    \"city\": [\"athens\", \"paris\", \"st. louis\", \"athens\", \"beijing\", \"london\"]\n}\ntable = pd.DataFrame.from_dict(data)\n\n# tapex accepts uncased input since it is pre-trained on the uncased corpus\nquery = \"In which year did beijing host the Olympic Games?\"\nencoding = tokenizer(table=table, query=query, return_tensors=\"pt\")\n\noutputs = model.generate(**encoding)\n\nprint(tokenizer.batch_decode(outputs, skip_special_tokens=True))\n# [' 2008.0']\n```\n\n### How to Eval\n\nPlease find the eval script [here](https://github.com/SivilTaram/transformers/tree/add_tapex_bis/examples/research_projects/tapex).\n\n### BibTeX entry and citation info\n\n```bibtex\n@inproceedings{\n    liu2022tapex,\n    title={{TAPEX}: Table Pre-training via Learning a Neural {SQL} Executor},\n    author={Qian Liu and Bei Chen and Jiaqi Guo and Morteza Ziyadi and Zeqi Lin and Weizhu Chen and Jian-Guang Lou},\n    booktitle={International Conference on Learning Representations},\n    year={2022},\n    url={https://openreview.net/forum?id=O50443AsCP}\n}\n```", "size_bytes": "557985683", "downloads": 1250}