{"pretrained_model_name": "nathansutton/generate-cxr", "description": "---\nlicense: apache-2.0\npipeline_tag: image-to-text\n---\n\n## generate-cxr\n\nThis BlipForConditionalGeneration model generates realistic radiology reports given an chest X-ray and a clinical indication (e.g. 'RLL crackles, eval for pneumonia').\n\n- **Developed by:** Nathan Sutton\n- **Model type:** BLIP\n- **Language(s) (NLP):** English\n- **License:** Apache 2.0\n- **Finetuned from model:** Salesforce/blip-image-captioning-large\n\n## Model Sources\n\n- **Repository:** https://github.com/nathansutton/prerad\n- **Paper:** https://medium.com/@nasutton/a-new-generative-model-for-radiology-b687a993cbb\n- **Demo:** https://nathansutton-prerad.hf.space/\n\n\n## Out-of-Scope Use\n\nAny medical application.\n\n## How to Get Started with the Model\n\n```\nfrom PIL import Image\nfrom transformers import BlipForConditionalGeneration, BlipProcessor\n\n# read in the model\nprocessor = BlipProcessor.from_pretrained(\"nathansutton/generate-cxr\")\nmodel = BlipForConditionalGeneration.from_pretrained(\"nathansutton/generate-cxr\")\n\n# your data\nmy_image = 'my-chest-x-ray.jpg'\nmy_indication = 'RLL crackles, eval for pneumonia'\n\n# process the inputs\ninputs = processor(\n    images=Image.open(my_image), \n    text='indication:' + my_indication,\n    return_tensors=\"pt\"\n)\n\n# generate an entire radiology report\noutput = model.generate(**inputs,max_length=512)\nreport = processor.decode(output[0], skip_special_tokens=True)\n\n```\n\n# Training Details\n\nThis model was trained by cross-referencing the radiology reports in MIMIC-CXR with the images in the MIMIC-CXR-JPG.  None are available here and require a data usage agreement with physionet.\n", "size_bytes": "1879139631", "downloads": 15}