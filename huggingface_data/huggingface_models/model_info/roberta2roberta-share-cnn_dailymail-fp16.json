{"pretrained_model_name": "patrickvonplaten/roberta2roberta-share-cnn_dailymail-fp16", "description": "# Shared Roberta2Roberta Summarization with \ud83e\udd17 EncoderDecoder Framework\n\nThis model is a shared Roberta2Roberta model, meaning that the encoder and decoder weights are tied, fine-tuned on summarization.\n\nRoberta2Roberta is a `EncoderDecoderModel`, meaning that both the encoder and the decoder are `roberta-base` \nRoBERTa models. In this setup the encoder and decoder weights are tied. Leveraging the [EncoderDecoderFramework](https://huggingface.co/transformers/model_doc/encoderdecoder.html#encoder-decoder-models), the \ntwo pretrained models can simply be loaded into the framework via:\n\n```python\nroberta2roberta = EncoderDecoderModel.from_encoder_decoder_pretrained(\"roberta-base\", \"roberta-base\", tie_encoder_decoder=True)\n```\n\nThe decoder of an `EncoderDecoder` model needs cross-attention layers and usually makes use of causal \nmasking for auto-regressiv generation.\nThus, ``roberta2roberta`` is consequently fined-tuned on the `CNN/Daily Mail`dataset and the resulting model\n`roberta2roberta-share-cnn_dailymail-fp16` is uploaded here.\n\n## Example\n\nThe model is by no means a state-of-the-art model, but nevertheless \nproduces reasonable summarization results. It was mainly fine-tuned \nas a proof-of-concept for the \ud83e\udd17 EncoderDecoder Framework.\n\nThe model can be used as follows:\n\n```python\nfrom transformers import RobertaTokenizer, EncoderDecoderModel\n\nmodel = EncoderDecoderModel.from_pretrained(\"patrickvonplaten/roberta2roberta-share-cnn_dailymail-fp16\")\ntokenizer = RobertaTokenizer.from_pretrained(\"roberta-base\")\n\narticle = \"\"\"(CNN)Sigma Alpha Epsilon is under fire for a video showing party-bound fraternity members singing a racist chant. SAE's national chapter suspended the students, but University of Oklahoma President David B\noren took it a step further, saying the university's affiliation with the fraternity is permanently done. The news is shocking, but it's not the first time SAE has faced controversy. SAE was founded March 9, 185\n6, at the University of Alabama, five years before the American Civil War, according to the fraternity website. When the war began, the group had fewer than 400 members, of which \"369 went to war for the Confede\nrate States and seven for the Union Army,\" the website says. The fraternity now boasts more than 200,000 living alumni, along with about 15,000 undergraduates populating 219 chapters and 20 \"colonies\" seeking fu\nll membership at universities. SAE has had to work hard to change recently after a string of member deaths, many blamed on the hazing of new recruits, SAE national President Bradley Cohen wrote in a message on t\nhe fraternity's website. The fraternity's website lists more than 130 chapters cited or suspended for \"health and safety incidents\" since 2010. At least 30 of the incidents involved hazing, and dozens more invol\nved alcohol. However, the list is missing numerous incidents from recent months. Among them, according to various media outlets: Yale University banned the SAEs from campus activities last month after members al\nlegedly tried to interfere with a sexual misconduct investigation connected to an initiation rite. Stanford University in December suspended SAE housing privileges after finding sorority members attending a frat\nernity function were subjected to graphic sexual content. And Johns Hopkins University in November suspended the fraternity for underage drinking. \"The media has labeled us as the 'nation's deadliest fraternity,\n' \" Cohen said. In 2011, for example, a student died while being coerced into excessive alcohol consumption, according to a lawsuit. SAE's previous insurer dumped the fraternity. \"As a result, we are paying Lloy\nd's of London the highest insurance rates in the Greek-letter world,\" Cohen said. Universities have turned down SAE's attempts to open new chapters, and the fraternity had to close 12 in 18 months over hazing in\ncidents.\"\"\"\n\ninput_ids = tokenizer(article, return_tensors=\"pt\").input_ids\noutput_ids = model.generate(input_ids)\n\nprint(tokenizer.decode(output_ids[0], skip_special_tokens=True))\n# should produce\n# SAE's national chapter suspended after video shows party-bound fraternity members singing racist chant. University of Oklahoma president says university's affiliation with fraternity is permanently done.\n# SAE has had to close 12 chapters since 2010 after members were killed in hazing. The fraternity has had more than 130 chapters in 18 months.\n```\n\n## Training script:\n\n**IMPORTANT**: In order for this code to work, make sure you checkout to the branch \n[more_general_trainer_metric](https://github.com/huggingface/transformers/tree/more_general_trainer_metric), which slightly adapts \nthe `Trainer` for `EncoderDecoderModels` according to this PR: https://github.com/huggingface/transformers/pull/5840. \n\nThe following code shows the complete training script that was used to fine-tune `roberta2roberta-cnn_dailymail-fp16\n` for reproducability. The training last ~9h on a standard GPU.\n\n```python\n#!/usr/bin/env python3\nimport nlp\nimport logging\nfrom transformers import RobertaTokenizer, EncoderDecoderModel, Trainer, TrainingArguments\n\nlogging.basicConfig(level=logging.INFO)\n\nmodel = EncoderDecoderModel.from_encoder_decoder_pretrained(\"roberta-base\", \"roberta-base\", tie_encoder_decoder=True)\ntokenizer =  RobertaTokenizer.from_pretrained(\"roberta-base\")\n\n# load train and validation data\ntrain_dataset = nlp.load_dataset(\"cnn_dailymail\", \"3.0.0\", split=\"train\")\nval_dataset = nlp.load_dataset(\"cnn_dailymail\", \"3.0.0\", split=\"validation[:5%]\")\n\n# load rouge for validation\nrouge = nlp.load_metric(\"rouge\", experiment_id=0)\n\n# set decoding params\nmodel.config.decoder_start_token_id = tokenizer.bos_token_id\nmodel.config.eos_token_id = tokenizer.eos_token_id\nmodel.config.max_length = 142\nmodel.config.min_length = 56\nmodel.config.no_repeat_ngram_size = 3\nmodel.early_stopping = True\nmodel.length_penalty = 2.0\nmodel.num_beams = 4\n\nencoder_length = 512\ndecoder_length = 128\nbatch_size = 16\n\n\n# map data correctly\ndef map_to_encoder_decoder_inputs(batch):\n    # Tokenizer will automatically set [BOS] <text> [EOS]\n    # cut off at Longformer at 2048\n    inputs = tokenizer(batch[\"article\"], padding=\"max_length\", truncation=True, max_length=encoder_length)\n    # force summarization <= 256\n    outputs = tokenizer(batch[\"highlights\"], padding=\"max_length\", truncation=True, max_length=decoder_length)\n\n    batch[\"input_ids\"] = inputs.input_ids\n    batch[\"attention_mask\"] = inputs.attention_mask\n    batch[\"decoder_input_ids\"] = outputs.input_ids\n    batch[\"labels\"] = outputs.input_ids.copy()\n    # mask loss for padding\n    batch[\"labels\"] = [\n        [-100 if token == tokenizer.pad_token_id else token for token in labels] for labels in batch[\"labels\"]\n    ]\n    batch[\"decoder_attention_mask\"] = outputs.attention_mask\n\n    assert all([len(x) == encoder_length for x in inputs.input_ids])\n    assert all([len(x) == decoder_length for x in outputs.input_ids])\n\n    return batch\n\n\ndef compute_metrics(pred):\n    labels_ids = pred.label_ids\n    pred_ids = pred.predictions\n\n    # all unnecessary tokens are removed\n    pred_str = tokenizer.batch_decode(pred_ids, skip_special_tokens=True)\n    labels_ids[labels_ids == -100] = tokenizer.eos_token_id\n    label_str = tokenizer.batch_decode(labels_ids, skip_special_tokens=True)\n\n    rouge_output = rouge.compute(predictions=pred_str, references=label_str, rouge_types=[\"rouge2\"])[\"rouge2\"].mid\n\n    return {\n        \"rouge2_precision\": round(rouge_output.precision, 4),\n        \"rouge2_recall\": round(rouge_output.recall, 4),\n        \"rouge2_fmeasure\": round(rouge_output.fmeasure, 4),\n    }\n\n\n# make train dataset ready\ntrain_dataset = train_dataset.map(\n    map_to_encoder_decoder_inputs, batched=True, batch_size=batch_size, remove_columns=[\"article\", \"highlights\"],\n)\ntrain_dataset.set_format(\n    type=\"torch\", columns=[\"input_ids\", \"attention_mask\", \"decoder_attention_mask\", \"decoder_input_ids\", \"labels\"],\n)\n\n# same for validation dataset\nval_dataset = val_dataset.map(\n    map_to_encoder_decoder_inputs, batched=True, batch_size=batch_size, remove_columns=[\"article\", \"highlights\"],\n)\nval_dataset.set_format(\n    type=\"torch\", columns=[\"input_ids\", \"decoder_attention_mask\", \"attention_mask\", \"decoder_input_ids\", \"labels\"],\n)\n\n# set training arguments - these params are not really tuned, feel free to change\ntraining_args = TrainingArguments(\n    output_dir=\"./\",\n    per_device_train_batch_size=batch_size,\n    per_device_eval_batch_size=batch_size,\n    predict_from_generate=True,\n    evaluate_during_training=True,\n    do_train=True,\n    do_eval=True,\n    logging_steps=1000,\n    save_steps=1000,\n    eval_steps=1000,\n    overwrite_output_dir=True,\n    warmup_steps=2000,\n    save_total_limit=3,\n    fp16=True,\n)\n\n# instantiate trainer\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n    compute_metrics=compute_metrics,\n    train_dataset=train_dataset,\n    eval_dataset=val_dataset,\n)\n\n# start training\ntrainer.train()\n```\n\n## Evaluation\n\nThe following script evaluates the model on the test set of \nCNN/Daily Mail.\n\n```python\n#!/usr/bin/env python3\nimport nlp\nfrom transformers import RobertaTokenizer, EncoderDecoderModel\n\ntokenizer = RobertaTokenizer.from_pretrained(\"roberta-base\")\nmodel = EncoderDecoderModel.from_pretrained(\"patrickvonplaten/roberta2roberta-share-cnn_dailymail-fp16\")\nmodel.to(\"cuda\")\n\ntest_dataset = nlp.load_dataset(\"cnn_dailymail\", \"3.0.0\", split=\"test\")\nbatch_size = 128\n\n\n# map data correctly\ndef generate_summary(batch):\n    # Tokenizer will automatically set [BOS] <text> [EOS]\n    # cut off at BERT max length 512\n    inputs = tokenizer(batch[\"article\"], padding=\"max_length\", truncation=True, max_length=512, return_tensors=\"pt\")\n    input_ids = inputs.input_ids.to(\"cuda\")\n    attention_mask = inputs.attention_mask.to(\"cuda\")\n\n    outputs = model.generate(input_ids, attention_mask=attention_mask)\n\n    # all special tokens including will be removed\n    output_str = tokenizer.batch_decode(outputs, skip_special_tokens=True)\n\n    batch[\"pred\"] = output_str\n\n    return batch\n\n\nresults = test_dataset.map(generate_summary, batched=True, batch_size=batch_size, remove_columns=[\"article\"])\n\n# load rouge for validation\nrouge = nlp.load_metric(\"rouge\")\n\npred_str = results[\"pred\"]\nlabel_str = results[\"highlights\"]\n\nrouge_output = rouge.compute(predictions=pred_str, references=label_str, rouge_types=[\"rouge2\"])[\"rouge2\"].mid\n\nprint(rouge_output)\n```\n\nThe obtained results should be:\n\n| -   |      Rouge2 - mid -precision      |  Rouge2 - mid - recall | Rouge2 - mid - fmeasure |\n|----------|:-------------:|:------:|:------:|\n| **CNN/Daily Mail** |  15.6 | 18.79 | **16.59** |\n", "size_bytes": "614819877", "downloads": 3}