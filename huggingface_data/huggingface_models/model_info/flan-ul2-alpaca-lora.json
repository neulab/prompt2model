{"pretrained_model_name": "VMware/flan-ul2-alpaca-lora", "description": "---\ndatasets:\n- tatsu-lab/alpaca\nlanguage:\n- en\npipeline_tag: text2text-generation\nlibrary_name: transformers\nlicense: other\n---\n\n\n# Model Details\n\n- **Model name:** Flan-UL2-Alpaca-LoRA\n- **Model type:** - Text2Text Generation\n- **Parent Model:** [google/flan-ul2](https://huggingface.co/google/flan-ul2)\n- **Training dataset:** [Alpaca](https://huggingface.co/datasets/tatsu-lab/alpaca) \n- **Language:** English\n- **Framework:** PyTorch\n- **Model version:** 1.0\n\n\nWe take the instruction-tuned Flan models (trained on Academic datasets) and perform style transfer using the Alpaca dataset.\n\nWe released the code for LORA fine-tuning Seq2Seq models along with code walkthrough medium article here:\n- https://github.com/vmware-labs/research-and-development-artificial-intelligence-lab/tree/main/instruction-tuning/peft-seq2seq\n- https://medium.com/vmware-data-ml-blog/lora-finetunning-of-ul-2-and-t5-models-35a08863593d\n\nWe fine-tuned the `google/flan-ul2` model on the Alpaca dataset using [PEFT-LORA](https://huggingface.co/docs/diffusers/main/en/training/lora). \n\n# License\n- Parent model ([google/flan-ul2](https://huggingface.co/google/flan-ul2)): Apache 2.0\n- Dataset ([Alpaca](https://huggingface.co/datasets/tatsu-lab/alpaca)) : cc-by-4.0\n- text-davinci-003 (Used to generate Alpaca): [OpenAI Terms of Use](https://openai.com/policies/terms-of-use)\n\n\n\n# How to Use\n\n```\nimport torch\nfrom transformers import pipeline\n\n# Chose the model inference precision\ndtype = torch.float16 # options are torch.float16, torch.bfloat16, torch.float32\n\nmodel = pipeline(\n    model = \"VMware/flan-ul2-alpaca-lora\",\n    device_map = 'auto',\n    torch_dtype=dtype\n)\n\nprompt = \"YOUR PROMPT HERE\"\n\noutput = model(prompt, max_length=2048, do_sample=True)\n```\n\n\nUsing Alpaca prompt template might generate better outputs for certain prompts as the model was trained using the bellow template.\n\n```\n# Chose the model inference precision\nimport torch\nfrom transformers import pipeline\n\ndtype = torch.float16 # options are torch.float16, torch.bfloat16, torch.float32\nmodel = pipeline(model=\"VMware/flan-ul2-alpaca-lora\",device_map = 'auto',torch_dtype=dtype )\n\nprompt_template = \"\"\"\nBelow is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\n{instruction}\n\n### Response:\"\"\"\n\nprompt = \"YOUR INSTRUCTION HERE\"\n\noutput = model(prompt_template.format(instruction=prompt), max_length=2048)\n```\n\n# Training Details\n\nThe model was trained on 3xV100 GPUs using PEFT-LORA and Deepspeed\n\n* Hyperparameters:\n* learning_rate = 3e-4\n* per_device_batch_size = 2\n* gradient_accumulation_steps = 21 \n*  epochs = 3\n\n\n# Limitations and Bias\n\nThe model is based on a large and diverse dataset, but it may still have limitations and biases in certain areas. Some limitations include:\n\n- Language: The model is designed to work with English text only and may not perform as well in other languages.\n\n\nIn addition, the model may have some bias in terms of the data it was trained on. The dataset includes questions from a variety of sources, but it may not be representative of all populations or perspectives. As a result, the model may perform better or worse for certain types of questions or on certain types of texts.\n", "size_bytes": 79417610240, "downloads": 68}