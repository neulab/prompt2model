{"pretrained_model_name": "ai4bharat/MultiIndicSentenceSummarizationSS", "description": "---\ntags:\n- sentence-summarization\n- multilingual\n- nlp\n- indicnlp\ndatasets:\n- ai4bharat/IndicSentenceSummarization\nlanguage:\n- as\n- bn\n- gu\n- hi\n- kn\n- ml\n- mr\n- or\n- pa\n- ta\n- te\nlicense:\n- mit\nwidget:\n- \u091c\u092e\u094d\u092e\u0942 \u090f\u0935\u0902 \u0915\u0936\u094d\u092e\u0940\u0930 \u0915\u0947 \u0905\u0928\u0902\u0924\u0928\u093e\u0917 \u091c\u093f\u0932\u0947 \u092e\u0947\u0902 \u0936\u0928\u093f\u0935\u093e\u0930 \u0915\u094b \u0938\u0941\u0930\u0915\u094d\u0937\u093e\u092c\u0932\u094b\u0902 \u0915\u0947 \u0938\u093e\u0925 \u092e\u0941\u0920\u092d\u0947\u0921\u093c \u092e\u0947\u0902 \u0926\u094b \u0906\u0924\u0902\u0915\u0935\u093e\u0926\u093f\u092f\u094b\u0902 \u0915\u094b \u092e\u093e\u0930 \u0917\u093f\u0930\u093e\u092f\u093e \u0917\u092f\u093e\u0964 <s> <2hi>\n\n\n---\n\n# MultiIndicSentenceSummarizationSS\n\nThis repository contains the [IndicBARTSS](https://huggingface.co/ai4bharat/IndicBARTSS) checkpoint finetuned on the 11 languages of [IndicSentenceSummarization](https://huggingface.co/datasets/ai4bharat/IndicSentenceSummarization) dataset. For finetuning details,\nsee the [paper](https://arxiv.org/abs/2203.05437). \n<ul>\n<li >Supported languages: Assamese, Bengali, Gujarati, Hindi, Marathi, Odiya, Punjabi, Kannada, Malayalam, Tamil, and Telugu. Not all of these languages are supported by mBART50 and mT5. </li>\n<li >The model is much smaller than the mBART and mT5(-base) models, so less computationally expensive for decoding. </li>\n<li> Trained on large Indic language corpora (5.53 million sentences). </li>\n<li> Unlike <a href=\"https://huggingface.co/ai4bharat/MultiIndicSentenceSummarization\">MultiIndicSentenceSummarization</a> each language is written in its own script, so you do not need to perform any script mapping to/from Devanagari. </li>\n</ul>\n\n\n\n## Using this model in `transformers`\n\n```\nfrom transformers import MBartForConditionalGeneration, AutoModelForSeq2SeqLM\nfrom transformers import AlbertTokenizer, AutoTokenizer\ntokenizer = AutoTokenizer.from_pretrained(\"ai4bharat/MultiIndicSentenceSummarizationSS\", do_lower_case=False, use_fast=False, keep_accents=True)\n# Or use tokenizer = AlbertTokenizer.from_pretrained(\"ai4bharat/MultiIndicSentenceSummarizationSS\", do_lower_case=False, use_fast=False, keep_accents=True)\nmodel = AutoModelForSeq2SeqLM.from_pretrained(\"ai4bharat/MultiIndicSentenceSummarizationSS\")\n# Or use model = MBartForConditionalGeneration.from_pretrained(\"ai4bharat/MultiIndicSentenceSummarizationSS\")\n\n# Some initial mapping\nbos_id = tokenizer._convert_token_to_id_with_added_voc(\"<s>\")\neos_id = tokenizer._convert_token_to_id_with_added_voc(\"</s>\")\npad_id = tokenizer._convert_token_to_id_with_added_voc(\"<pad>\")\n\n# To get lang_id use any of ['<2as>', '<2bn>', '<2en>', '<2gu>', '<2hi>', '<2kn>', '<2ml>', '<2mr>', '<2or>', '<2pa>', '<2ta>', '<2te>']\n# First tokenize the input. The format below is how IndicBART was trained so the input should be \"Sentence </s> <2xx>\" where xx is the language code. Similarly, the output should be \"<2yy> Sentence </s>\".\ninp = tokenizer(\"\u091c\u092e\u094d\u092e\u0942 \u090f\u0935\u0902 \u0915\u0936\u094d\u092e\u0940\u0930 \u0915\u0947 \u0905\u0928\u0902\u0924\u0928\u093e\u0917 \u091c\u093f\u0932\u0947 \u092e\u0947\u0902 \u0936\u0928\u093f\u0935\u093e\u0930 \u0915\u094b \u0938\u0941\u0930\u0915\u094d\u0937\u093e\u092c\u0932\u094b\u0902 \u0915\u0947 \u0938\u093e\u0925 \u092e\u0941\u0920\u092d\u0947\u0921\u093c \u092e\u0947\u0902 \u0926\u094b \u0906\u0924\u0902\u0915\u0935\u093e\u0926\u093f\u092f\u094b\u0902 \u0915\u094b \u092e\u093e\u0930 \u0917\u093f\u0930\u093e\u092f\u093e \u0917\u092f\u093e\u0964 </s> <2hi>\", add_special_tokens=False, return_tensors=\"pt\", padding=True).input_ids \n\n# For generation. Pardon the messiness. Note the decoder_start_token_id.\n\nmodel_output=model.generate(inp, use_cache=True,no_repeat_ngram_size=3, num_beams=5, length_penalty=0.8, max_length=20, min_length=1, early_stopping=True, pad_token_id=pad_id, bos_token_id=bos_id, eos_token_id=eos_id, decoder_start_token_id=tokenizer._convert_token_to_id_with_added_voc(\"<2hi>\"))\n\n# Decode to get output strings\ndecoded_output=tokenizer.decode(model_output[0], skip_special_tokens=True, clean_up_tokenization_spaces=False)\nprint(decoded_output) # \u0905\u0928\u0902\u0924\u0928\u093e\u0917 \u092e\u0947\u0902 \u0938\u0941\u0930\u0915\u094d\u0937\u093e\u092c\u0932\u094b\u0902 \u0915\u0947 \u0938\u093e\u0925 \u092e\u0941\u0920\u092d\u0947\u0921\u093c \u092e\u0947\u0902 \u0926\u094b \u0906\u0924\u0902\u0915\u0935\u093e\u0926\u0940 \u0922\u0947\u0930\n```\n\n## Benchmarks\n\nScores on the `IndicSentenceSummarization` test sets are as follows:\n\nLanguage | Rouge-1 / Rouge-2 / Rouge-L\n---------|----------------------------\nas\t|\t63.56\t/\t49.90\t/\t62.57\nbn\t|\t52.52\t/\t36.15\t/\t50.60\ngu\t|\t47.69\t/\t29.77\t/\t45.61\nhi\t|\t50.43\t/\t28.13\t/\t45.15\nkn\t|\t77.06\t/\t69.36\t/\t76.33\nml\t|\t65.00\t/\t51.99\t/\t63.76\nmr\t|\t47.05\t/\t25.97\t/\t45.52\nor\t|\t50.96\t/\t30.32\t/\t49.23\npa\t|\t54.95\t/\t36.26\t/\t51.26\nta\t|\t58.52\t/\t38.36\t/\t56.49\nte\t|\t53.75\t/\t35.17\t/\t52.66\n\n\n\n## Citation\n\nIf you use this model, please cite the following paper:\n```\n@inproceedings{Kumar2022IndicNLGSM,\n  title={IndicNLG Suite: Multilingual Datasets for Diverse NLG Tasks in Indic Languages},\n  author={Aman Kumar and Himani Shrotriya and Prachi Sahu and Raj Dabre and Ratish Puduppully and Anoop Kunchukuttan and Amogh Mishra and Mitesh M. Khapra and Pratyush Kumar},\n  year={2022},\n  url = \"https://arxiv.org/abs/2203.05437\"\n  }\n```\n", "size_bytes": "976426545", "downloads": 21}