{"pretrained_model_name": "cjwilliams/codet5-base-python-sum", "description": "---\nlicense: bsd-2-clause\nlanguage:\n- en\n---\n# CodeT5 Base Python Summarization\n\nFine-tuned from [codet5-base-multi-sum](https://huggingface.co/Salesforce/codet5-base-multi-sum) \nusing the Python split of [CodeXGlue code-to-text dataset](https://huggingface.co/datasets/code_x_glue_ct_code_to_text).\n\n##\u00a0How to use\n\n(Modified from example [here](https://huggingface.co/Salesforce/codet5-base-multi-sum))\n\nfrom transformers import RobertaTokenizer, T5ForConditionalGeneration\n\n```python\nif __name__ == '__main__':\n    tokenizer = RobertaTokenizer.from_pretrained('Salesforce/codet5-base')\n    model = T5ForConditionalGeneration.from_pretrained('cjwilliams/codet5-base-python-sum')\n\n    text = \"\"\"def svg_to_image(string, size=None):\n    if isinstance(string, unicode):\n        string = string.encode('utf-8')\n        renderer = QtSvg.QSvgRenderer(QtCore.QByteArray(string))\n    if not renderer.isValid():\n        raise ValueError('Invalid SVG data.')\n    if size is None:\n        size = renderer.defaultSize()\n        image = QtGui.QImage(size, QtGui.QImage.Format_ARGB32)\n        painter = QtGui.QPainter(image)\n        renderer.render(painter)\n    return image\"\"\"\n\n    input_ids = tokenizer(text, return_tensors=\"pt\").input_ids\n\n    generated_ids = model.generate(input_ids, max_length=20)\n    print(tokenizer.decode(generated_ids[0], skip_special_tokens=True))\n```", "size_bytes": "891613329", "downloads": 3}