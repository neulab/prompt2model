{"pretrained_model_name": "liamcripwell/o-ledpara", "description": "---\nlanguage:\n- en\n---\n\n# O->LED_para document simplification system\n\nThis is a pretrained version of the document simplification model presented in the Findings of ACL 2023 paper [\"Context-Aware Document Simplification\"](https://arxiv.org/abs/2305.06274). \n\nIt is a system based on the [Longformer encoder-decoder](https://huggingface.co/allenai/led-base-16384) that operates at the paragraph-level and is intended to be guided by a planner.\n\nTarget reading levels (1-4) should be indicated via a control token prepended to each input sequence (\"\\<RL_1\\>\", \"\\<RL_2\\>\", \"\\<RL_3\\>\", \"\\<RL_4\\>\"). If using the terminal interface, this will be handled automatically.\n\n## How to use\nIt is recommended to use the [plan_simp](https://github.com/liamcripwell/plan_simp/tree/main) library to interface with the model.\n\nHere is how to load this model in PyTorch:\n\n```python\n# loading\nfrom plan_simp.models.bart import load_simplifier\nsimplifier, tokenizer, hparams = load_simplifier(\"liamcripwell/o-ledpara\")\n\n# generation\nfrom plan_simp.scripts.generate import Launcher\nlauncher = Launcher()\nlauncher.dynamic(model_ckpt=\"liamcripwell/o-ledpara\", clf_model_ckpt=\"liamcripwell/pgdyn-plan\", **params)\n```\n\nPlan-guided generation and evaluation can be run from the terminal (see the repo for more details).\n\n```bash\npython doc_simp/scripts/generate.py dynamic\n  --clf_model_ckpt=liamcripwell/pgdyn-plan\n  --model_ckpt=liamcripwell/o-ledpara\n  --test_file=<test_data>\n  --doc_id_col=pair_id\n  --context_dir=<context_dir>\n  --out_file=<output_csv>\n  --reading_lvl=s_level\n  --context_doc_id=pair_id\n  --para_lvl=True\n\npython plan_simp/scripts/eval_simp.py\n    --input_data=newselaauto_docs_test.csv\n    --output_data=test_out_oledpara.csv\n    --x_col=complex_str\n    --r_col=simple_str\n    --y_col=pred\n    --doc_id_col=pair_id\n    --prepro=True\n    --sent_level=True\n```\n", "size_bytes": "647713559", "downloads": 2}