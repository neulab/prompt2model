{"pretrained_model_name": "Salesforce/codet5-base-multi-sum", "description": "---\nlicense: bsd-3-clause\ntags:\n- codet5\ndatasets:\n- code_search_net\ninference: true\n---\n\n# CodeT5-base for Code Summarization\n\n[CodeT5-base](https://huggingface.co/Salesforce/codet5-base) model fine-tuned on CodeSearchNet data in a multi-lingual training setting (\nRuby/JavaScript/Go/Python/Java/PHP) for code summarization. It was introduced in this EMNLP 2021\npaper [CodeT5: Identifier-aware Unified Pre-trained Encoder-Decoder Models for Code Understanding and Generation](https://arxiv.org/abs/2109.00859)\nby Yue Wang, Weishi Wang, Shafiq Joty, Steven C.H. Hoi. Please check out more\nat [this repository](https://github.com/salesforce/CodeT5).\n\n## How to use\n\nHere is how to use this model:\n\n```python\nfrom transformers import RobertaTokenizer, T5ForConditionalGeneration\n\nif __name__ == '__main__':\n    tokenizer = RobertaTokenizer.from_pretrained('Salesforce/codet5-base-multi-sum')\n    model = T5ForConditionalGeneration.from_pretrained('Salesforce/codet5-base-multi-sum')\n\n    text = \"\"\"def svg_to_image(string, size=None):\n    if isinstance(string, unicode):\n        string = string.encode('utf-8')\n        renderer = QtSvg.QSvgRenderer(QtCore.QByteArray(string))\n    if not renderer.isValid():\n        raise ValueError('Invalid SVG data.')\n    if size is None:\n        size = renderer.defaultSize()\n        image = QtGui.QImage(size, QtGui.QImage.Format_ARGB32)\n        painter = QtGui.QPainter(image)\n        renderer.render(painter)\n    return image\"\"\"\n\n    input_ids = tokenizer(text, return_tensors=\"pt\").input_ids\n\n    generated_ids = model.generate(input_ids, max_length=20)\n    print(tokenizer.decode(generated_ids[0], skip_special_tokens=True))\n    # this prints: \"Convert a SVG string to a QImage.\"\n```\n\n## Fine-tuning data\n\nWe employ the filtered version of CodeSearchNet data [[Husain et al., 2019](https://arxiv.org/abs/1909.09436)]\nfrom [CodeXGLUE](https://github.com/microsoft/CodeXGLUE/tree/main/Code-Text/code-to-text) benchmark for fine-tuning on\ncode summarization. The data is tokenized with our pre-trained code-specific BPE (Byte-Pair Encoding) tokenizer. One can\nprepare text (or code) for the model using RobertaTokenizer with the vocab files from [codet5-base](https://huggingface.co/Salesforce/codet5-base).\n\n### Data statistic\n\n| Programming Language | Training |  Dev   |  Test  |\n| :------------------- | :------: | :----: | :----: |\n| Python               | 251,820  | 13,914 | 14,918 |\n| PHP                  | 241,241  | 12,982 | 14,014 |\n| Go                   | 167,288  | 7,325  | 8,122  |\n| Java                 | 164,923  | 5,183  | 10,955 |\n| JavaScript           |  58,025  | 3,885  | 3,291  |\n| Ruby                 |  24,927  | 1,400  | 1,261  |\n\n## Training procedure\n\nWe fine-tune codet5-base on these six programming languages (Ruby/JavaScript/Go/Python/Java/PHP) in the multi-task learning setting. We employ the\nbalanced sampling to avoid biasing towards high-resource tasks. Please refer to the [paper](https://arxiv.org/abs/2109.00859) for more details.\n\n## Evaluation results\n\nUnlike the paper allowing to select different best checkpoints for different programming languages (PLs), here we employ one checkpoint for\nall PLs. Besides, we remove the task control prefix to specify the PL in training and inference. The results on the test set are shown as below:\n\n| Model       |   Ruby    | Javascript |    Go     |  Python   |   Java    |    PHP    |  Overall  |\n| ----------- | :-------: | :--------: | :-------: | :-------: | :-------: | :-------: | :-------: |\n| Seq2Seq     |   9.64    |   10.21    |   13.98   |   15.93   |   15.09   |   21.08   |   14.32   |\n| Transformer |   11.18   |   11.59    |   16.38   |   15.81   |   16.26   |   22.12   |   15.56   |\n| [RoBERTa](https://arxiv.org/pdf/1907.11692.pdf)     |   11.17   |   11.90    |   17.72   |   18.14   |   16.47   |   24.02   |   16.57   |\n| [CodeBERT](https://arxiv.org/pdf/2002.08155.pdf)    | 12.16 | 14.90  | 18.07 | 19.06 | 17.65 | 25.16 | 17.83 |\n| [PLBART](https://aclanthology.org/2021.naacl-main.211.pdf)    | 14.11 |15.56  |  18.91 |   19.30 |  18.45 |  23.58 |  18.32 | \n| [CodeT5-small](https://arxiv.org/abs/2109.00859)    |14.87    | 15.32   |  19.25    | 20.04   |  19.92   |  25.46   |  19.14 | \n| [CodeT5-base](https://arxiv.org/abs/2109.00859)    |  **15.24**   |  16.16   |  19.56   |  20.01   |  **20.31**   |  26.03   |  19.55 | \n| [CodeT5-base-multi-sum](https://arxiv.org/abs/2109.00859)    | **15.24**  | **16.18**  | **19.95**   |   **20.42**    | 20.26  | **26.10**  |  **19.69** | \n\n## Citation\n\n```bibtex\n@inproceedings{\n    wang2021codet5,\n    title={CodeT5: Identifier-aware Unified Pre-trained Encoder-Decoder Models for Code Understanding and Generation}, \n    author={Yue Wang, Weishi Wang, Shafiq Joty, Steven C.H. Hoi},\n    booktitle={Proceedings of the 2021 Conference on Empirical Methods in Natural Language Processing, EMNLP 2021},\n    year={2021},\n}\n```", "size_bytes": "891651384", "downloads": 6996}