{"pretrained_model_name": "alperiox/mT5_multilingual_XLSum-finetuned-mlsum-tr", "description": "---\ntags:\n- summarization\n- generated_from_trainer\ndatasets:\n- mlsum\nmodel-index:\n- name: mT5_multilingual_XLSum-finetuned-mlsum-tr\n  results: []\nwidget:\n- text: \"PyTorch Nedir? Pytorch vs Tensorflow vs Keras ! Yapay zekan\u0131n alt dallar\u0131ndan biri olan derin \u00f6\u011frenme \u00fczerine yap\u0131lan ara\u015ft\u0131rmalar g\u00fcn ge\u00e7tik\u00e7e artmakta. \u00c7o\u011fu alanda klasik makine \u00f6\u011frenmesi algoritmalar\u0131na g\u00f6re do\u011fruluk oran\u0131 \u00e7ok daha y\u00fcksek bu algoritmalar ses tan\u0131ma, nesne tan\u0131ma, s\u0131n\u0131fland\u0131rma gibi alanlarda aktif \u015fekilde kullan\u0131lmaya devam etmektedir.Bu derin \u00f6\u011frenme modellerini olu\u015fturmak i\u00e7in de a\u00e7\u0131k kaynak olarak geli\u015ftirilen bir\u00e7ok k\u00fct\u00fcphane mevcuttur. Daha \u00f6nce Keras ve Tensorflow k\u00fct\u00fcphanelerinden bahsetmi\u015ftik. Bunlard\u0131\u015f\u0131nda s\u0131kl\u0131kla kullan\u0131lan, bizim i\u00e7in derin \u00f6\u011frenme modellerinde arkadaki matematiksel i\u015flemleri yapan k\u00fct\u00fcphaneler mevcut. Bunlar\u0131n en me\u015fhuru ise PyTorch\u2019dur. Bu yaz\u0131da son zamanlarda \u00e7ok fazla pop\u00fcler olan ve olduk\u00e7a s\u0131k kullan\u0131lan PyTorch\u2019u tan\u0131mlad\u0131ktan sonra TensorFlow ve Keras ile kar\u015f\u0131la\u015ft\u0131rarak avantajlar\u0131 ve dezavantajlar\u0131dan bahsedece\u011fiz. PyTorch, derin \u00f6\u011frenme modelleri olu\u015ftururken kullan\u0131lan ve geli\u015ftiricilerin i\u015flerini olduk\u00e7a kolayla\u015ft\u0131ran bir Python k\u00fct\u00fcphanesidir. Grafik i\u015flem birimlerini kullanan PyTorch esnek ve h\u0131zl\u0131 yap\u0131s\u0131 ile g\u00fcn\u00fcm\u00fczdeolduk\u00e7a pop\u00fcler konumdad\u0131r. PyTorch\u2019un rakiplerine g\u00f6re m\u00fckemmel bir ivme ile geli\u015fmesinin sebebi zahmetsizce olu\u015fturabilmesidir. PyTorch \u00d6zellikleri : Basit Aray\u00fcz : Kullan\u0131m\u0131 kolay API sunar, bu nedenle Python gibi \u00e7al\u0131\u015ft\u0131r\u0131lmas\u0131 \u00e7ok basittir. Pythonic in nature : Pythonic olan bu k\u00fct\u00fcphane, Python veri bilimi ile sorunsuz bir \u015fekilde b\u00fct\u00fcnle\u015fir . B\u00f6ylece Python taraf\u0131ndan sunulan t\u00fcm hizmetlerden ve i\u015flevlerden yararlanabilir ve kolayca adapte edilebilir. Hesaplamal\u0131 grafikler : PyTorch dinamik hesaplama grafikleri sunan kullan\u0131\u015fl\u0131 bir platform sa\u011flar, b\u00f6ylece \u00e7al\u0131\u015fma zaman\u0131 s\u0131ras\u0131nda de\u011fi\u015ftirilebilir. Bu, n\u00f6ral bir a\u011f modeli olu\u015fturmak i\u00e7in ne kadar bellek gerekece\u011fini bilmedi\u011finizde olduk\u00e7a kullan\u0131\u015fl\u0131d\u0131r. Pytorch ve TensorFlow Deep Learning ve yapay zeka alan\u0131nda \u00e7al\u0131\u015fan herkes muhtemelen Google\u2019\u0131n en pop\u00fcler a\u00e7\u0131k kaynak k\u00fct\u00fcphanesi olan TensorFlow ile \u00e7al\u0131\u015fm\u0131\u015ft\u0131r . Bununla birlikte, en son deep learning freamwork\u2019\u00fc \u2014 PyTorch ara\u015ft\u0131rma \u00e7al\u0131\u015fmalar\u0131 a\u00e7\u0131s\u0131ndan \u00f6nemli sorunlar\u0131 \u00e7\u00f6zmektedir. Muhtemelen PyTorch, TensorFlow\u2019un bug\u00fcne kadarki en b\u00fcy\u00fck rakibi ve \u015fu anda ara\u015ft\u0131rma toplulu\u011funda \u00e7ok\u00e7a tercih edilen deep learning ve yapay zeka k\u00fct\u00fcphanesidir. Pytorch g\u00fcn\u00fcm\u00fczde bir\u00e7ok derin \u00f6\u011frenme projesi i\u00e7in kullan\u0131lmaktad\u0131r ve \u00fc\u00e7 ana \u00e7er\u00e7eveden en az pop\u00fcler olan olmas\u0131na ra\u011fmen trendler bunun yak\u0131nda de\u011fi\u015fece\u011fini g\u00f6steriyor. Ara\u015ft\u0131rmac\u0131lar esneklik, hata ay\u0131klama yetenekleri ve k\u0131sa e\u011fitim s\u00fcresi istediklerinde Pytorch\u2019u se\u00e7erler. Linux, macOS ve Windows \u00fczerinde \u00e7al\u0131\u015fmaktad\u0131r. \u0130yi belgelenmi\u015f \u00e7er\u00e7evesi ve \u00e7ok say\u0131da e\u011fitimli model ve \u00f6\u011fretici sayesinde TensorFlow, bir\u00e7ok end\u00fcstri profesyonelinin ve ara\u015ft\u0131rmac\u0131n\u0131n favori arac\u0131d\u0131r. TensorFlow, geli\u015ftiricilerin daha iyi hata ay\u0131klamas\u0131na ve e\u011fitim s\u00fcrecini izlemesine olanak tan\u0131yan daha iyi g\u00f6rselle\u015ftirme sunar. Ancak Pytorch, yaln\u0131zca s\u0131n\u0131rl\u0131 g\u00f6rselle\u015ftirme sa\u011flar.TensorFlow ayr\u0131ca, TensorFlow Sunma \u00e7er\u00e7evesi sayesinde e\u011fitimli modelleri \u00fcretime da\u011f\u0131tmada Pytorch\u2019u geride b\u0131rak\u0131yor. Pytorch b\u00f6yle bir \u00e7er\u00e7eve sunmaz. Veri paralelli\u011fi alan\u0131nda, PyTorch, Python arac\u0131l\u0131\u011f\u0131yla e\u015fzamans\u0131z y\u00fcr\u00fctme i\u00e7in yerel deste\u011fe g\u00fcvenerek en iyi performans\u0131 elde eder. Ancak TensorFlow ile, da\u011f\u0131t\u0131lm\u0131\u015f e\u011fitime izin vermek i\u00e7in belirli bir cihazda \u00e7al\u0131\u015ft\u0131r\u0131lan her i\u015flemi manuel olarak kodlaman\u0131z ve optimize etmeniz gerekir. \u00d6zetle, PyTorch\u2019taki her \u015feyi TensorFlow\u2019da \u00e7o\u011faltabilirsiniz; sadece \u00fczerinde daha \u00e7ok \u00e7al\u0131\u015fman gerekiyor. Derin \u00f6\u011frenmeyi ke\u015ffetmeye yeni ba\u015fl\u0131yorsan\u0131z, ara\u015ft\u0131rma toplulu\u011fundaki pop\u00fclaritesi nedeniyle \u00f6nce Pytorch\u2019u \u00f6\u011frenmelisiniz. Ancak, makine \u00f6\u011frenimi ve derin \u00f6\u011frenmeye a\u015finaysan\u0131z ve sekt\u00f6rde m\u00fcmk\u00fcn olan en k\u0131sa s\u00fcrede i\u015f bulmaya odakland\u0131ysan\u0131z, \u00f6nce TensorFlow\u2019u \u00f6\u011frenmelisiniz. Pytorch ve Keras Derin \u00f6\u011frenme \u00e7er\u00e7eveleriyle \u00e7al\u0131\u015fmaya yeni ba\u015fl\u0131yorsan\u0131z, bu se\u00e7eneklerin ikisi de tercih edilebilir. Matematik\u00e7iler ve deneyimli ara\u015ft\u0131rmac\u0131lar, Pytorch\u2019u daha fazla \u00f6nermektedir. Keras, modellerini h\u0131zl\u0131 bir \u015fekilde olu\u015fturmalar\u0131na, e\u011fitmelerine ve de\u011ferlendirmelerine olanak sa\u011flayarak geli\u015ftiriciler i\u00e7in daha uygundur. Keras ayr\u0131ca daha fazla da\u011f\u0131t\u0131m se\u00e7ene\u011fi ve daha kolay model aktar\u0131m\u0131 sunar. Ancak, Pytorch\u2019un Keras\u2019tan daha h\u0131zl\u0131 oldu\u011funu ve daha iyi hata ay\u0131klama yeteneklerine sahip oldu\u011funu unutmay\u0131n. Her iki platform da bol miktarda \u00f6\u011frenme kayna\u011f\u0131 sunduklar\u0131 i\u00e7in yeterli d\u00fczeyde pop\u00fclerli\u011fe sahiptir. Keras, yeniden kullan\u0131labilir kod ve \u00f6\u011freticilere m\u00fckemmel eri\u015fim imkan\u0131 ile \u00f6ne \u00e7\u0131karken, Pytorch ola\u011fan\u00fcst\u00fc topluluk deste\u011fine ve aktif geli\u015ftirmeye sahiptir. Keras, k\u00fc\u00e7\u00fck veri k\u00fcmeleri, h\u0131zl\u0131 prototip olu\u015fturma ve \u00e7oklu arka u\u00e7 deste\u011fi ile \u00e7al\u0131\u015f\u0131rken en iyisidir. Kar\u015f\u0131la\u015ft\u0131rmal\u0131 sadeli\u011fi sayesinde en pop\u00fcler platformdur. Linux, MacOS ve Windows \u00fczerinde \u00e7al\u0131\u015f\u0131r. En \u0130yisi Hangisi? Herkesin ihtiya\u00e7lar\u0131 farkl\u0131d\u0131r, bu nedenle yapay zeka projeniz i\u00e7in hangi \u00f6zelliklerin en \u00f6nemli oldu\u011fu belirleyici bir fakt\u00f6rd\u00fcr. Daha iyi anlayabilmek i\u00e7in burada Keras ve Pytorch ve TensorFlow aras\u0131ndaki \u00f6zelliklerin kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131n\u0131 veren bir tablo bulunmaktad\u0131r. Bu tabloyu inceledi\u011fimizde hepsinin birbirine kar\u015f\u0131 \u00fcst\u00fcn olduklar\u0131 noktalar oldu\u011funu g\u00f6r\u00fcyoruz. Asl\u0131nda sonu\u00e7 olarak hepsi birbirine benzerdir. Buradaki se\u00e7im yap\u0131l\u0131rken \u00f6nemli olan projemizdeki hangi \u00f6zelli\u011fin daha fazla \u00f6ne \u00e7\u0131kmas\u0131n\u0131 istedi\u011fimizdir. Sonraki yaz\u0131lar\u0131m\u0131zda g\u00f6r\u00fc\u015fmek \u00fczere\u2026\"\n  example_title: \"Random Medium article\"\n---\n\n<!-- This model card has been generated automatically according to the information the Trainer had access to. You\nshould probably proofread and complete it, then remove this comment. -->\n\n# mT5_multilingual_XLSum-finetuned-mlsum-tr\n\nThis model is a fine-tuned version of [csebuetnlp/mT5_multilingual_XLSum](https://huggingface.co/csebuetnlp/mT5_multilingual_XLSum) on the mlsum dataset.\nIt achieves the following results on the evaluation set:\n- eval_loss: 1.8230\n- eval_rouge1: 38.1147\n- eval_rouge2: 25.2516\n- eval_rougeL: 33.3003\n- eval_rougeLsum: 34.7125\n- eval_runtime: 810.61\n- eval_samples_per_second: 2.853\n- eval_steps_per_second: 0.358\n- epoch: 4.0\n- step: 24928\n\n## Model description\n\nMore information needed\n\n## Intended uses & limitations\n\nMore information needed\n\n## Training and evaluation data\n\nMore information needed\n\n## Training procedure\n\n### Training hyperparameters\n\nThe following hyperparameters were used during training:\n- learning_rate: 5.6e-05\n- train_batch_size: 8\n- eval_batch_size: 8\n- seed: 42\n- optimizer: Adam with betas=(0.9,0.999) and epsilon=1e-08\n- lr_scheduler_type: linear\n- num_epochs: 8\n\n### Framework versions\n\n- Transformers 4.25.1\n- Pytorch 1.13.0+cu116\n- Datasets 2.8.0\n- Tokenizers 0.13.2\n", "size_bytes": "2329702453", "downloads": 29}