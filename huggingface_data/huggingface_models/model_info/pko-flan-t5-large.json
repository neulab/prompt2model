{"pretrained_model_name": "paust/pko-flan-t5-large", "description": "---\nlanguage: ko\nlicense: mit\nlibrary_name: transformers\npipeline_tag: text2text-generation\n---\n\n# FLAN T5\n[Source Code](https://github.com/paust/pko-t5/tree/main/pkot5/flan)\n\nFLAN T5\ub294 [paust/pko-t5-large](https://huggingface.co/paust/pko-t5-large) \ubaa8\ub378\uc744 \uae30\ubc18\uc73c\ub85c \ub2e4\uc591\ud55c \ud0dc\uc2a4\ud06c\ub97c instruction finetuning\uc744 \ud1b5\ud574\uc11c \ub9cc\ub4e0 \ubaa8\ub378\uc785\ub2c8\ub2e4.\n\n\ud604\uc7ac \uacc4\uc18d Instruction Finetuning \uc744 \uc9c4\ud589\ud558\uba74\uc11c \uc911\uac04\uacb0\uacfc\ub97c \ubaa8\ub378\ub85c \uc5c5\ub370\uc774\ud2b8\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n## \ud559\uc2b5\ub41c \ud0dc\uc2a4\ud06c\n| Task name                  | Task type      | \n|----------------------------|----------------|\n| NSMC                       | Classification |\n| Klue Ynat                  | Classification |\n| KorNLI                     | Classification |\n| KorSTS                     | Classification |\n| QuestionPair               | Classification |\n| Klue STS                   | Classification |\n| AIHub news Summary         | Summarization  |\n| AIHub document Summary     | Summarization  |\n| AIHub book Summary         | Summarization  |\n| AIHub conversation Summary | Summarization  |\n| AIHub ko-to-en             | Translation    |\n| AIHub ko-to-en Expert      | Translation    |\n| AIHub ko-to-en Tech        | Translation    |\n| AIHub ko-to-en social      | Translation    |\n| AIHub ko-to-jp             | Translation    |\n| AIHub ko-to-cn Tech        | Translation    |\n| AIHub Translation Corpus   | Translation    |\n| korquad                    | QA             |\n| Klue MRC                   | QA             |\n| AIHub mindslab's MRC       | QA             |\n\n\n## \ubaa8\ub378\n- [Hugginface \ub9c1\ud06c](https://huggingface.co/paust/pko-flan-t5-large)\n\n\n## \uc0ac\uc6a9 \uc608\uc2dc\n```python\nfrom transformers import T5ForConditionalGeneration, T5TokenizerFast\n\ntokenizer = T5TokenizerFast.from_pretrained('paust/pko-flan-t5-large')\nmodel = T5ForConditionalGeneration.from_pretrained('paust/pko-flan-t5-large', device_map='cuda')\n\nprompt = \"\"\"\uc11c\uc6b8\ud2b9\ubcc4\uc2dc(\uc11c\uc6b8\u7279\u5225\u5e02, \uc601\uc5b4: Seoul Metropolitan Government)\ub294 \ub300\ud55c\ubbfc\uad6d \uc218\ub3c4\uc774\uc790 \ucd5c\ub300 \ub3c4\uc2dc\uc774\ub2e4. \uc120\uc0ac\uc2dc\ub300\ubd80\ud130 \uc0ac\ub78c\uc774 \uac70\uc8fc\ud558\uc600\uc73c\ub098 \ubcf8 \uc5ed\uc0ac\ub294 \ubc31\uc81c \uccab \uc218\ub3c4 \uc704\ub840\uc131\uc744 \uc2dc\ucd08\ub85c \ud55c\ub2e4. \uc0bc\uad6d\uc2dc\ub300\uc5d0\ub294 \uc804\ub7b5\uc801 \uc694\ucda9\uc9c0\ub85c\uc11c \uace0\uad6c\ub824, \ubc31\uc81c, \uc2e0\ub77c\uac00 \ubc88\uac08\uc544 \ucc28\uc9c0\ud558\uc600\uc73c\uba70, \uace0\ub824 \uc2dc\ub300\uc5d0\ub294 \uc655\uc2e4\uc758 \ubcc4\uad81\uc774 \uc138\uc6cc\uc9c4 \ub0a8\uacbd(\u5357\u4eac)\uc73c\ub85c \uc774\ub984\ud558\uc600\ub2e4.\n\ud55c\uad6d\uc758 \uc218\ub3c4\ub294 \uc5b4\ub514\uc785\ub2c8\uae4c?\"\"\"\ninput_ids = tokenizer(prompt, add_special_tokens=True, return_tensors='pt').input_ids\noutput_ids = model.generate(input_ids=input_ids.cuda(), max_new_tokens=32, num_beams=12)\ntext = tokenizer.batch_decode(output_ids, skip_special_tokens=True)[0]\nprint(text)  # \uc11c\uc6b8\ud2b9\ubcc4\uc2dc\n```\n\n## License\n[PAUST](https://paust.io)\uc5d0\uc11c \ub9cc\ub4e0 pko-t5\ub294 [MIT license](https://github.com/paust-team/pko-t5/blob/main/LICENSE) \ud558\uc5d0 \uacf5\uac1c\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.", "size_bytes": "1641163589", "downloads": 110}