{"pretrained_model_name": "ToddGoldfarb/Cadet-Medium", "description": "---\nlicense: openrail\ndatasets:\n- allenai/soda\nlanguage:\n- en\npipeline_tag: conversational\n---\n# What is Cadet-Medium?\n\nInspired by Allen AI's **Cosmo-XL**, **Cadet-Medium** is a somewhat small conversational model trained off of the **SODA** dataset. **Cadet-Medium** is intended for inference at the edge (on something as small as a 2GB RAM Raspberry Pi).\n\n**Cadet-Medium** is trained off of the **t5-base** pretrained model from Google.\n\nIf you have any questions, or any comments on improvements, please contact me at:  **tcgoldfarb@gmail.com**\n\n\n\n# Google Colab Link\n\nHere is the link to the Google Colab file, where I walk through the process of training the model and using the SODA public dataset from AI2.\n\nhttps://colab.research.google.com/drive/1uekZ0gO3GqjPwno16tV1A4Gitrl7p3ur?usp=sharing\n\n# Get Started With Cadet-Medium\n\nUse the code snippet below to get started with Cadet-Medium!\n\n```\nimport torch\nfrom transformers import AutoTokenizer, AutoModelForSeq2SeqLM\nimport colorful as cf\n\ncf.use_true_colors()\ncf.use_style('monokai')\nclass CadetMedAgent:\n    def __init__(self):\n        print(cf.bold | cf.purple(\"Waking up Cadet-Medium...\"))\n        self.device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n        self.tokenizer = AutoTokenizer.from_pretrained(\"t5-base\", model_max_length=512)\n        self.model = AutoModelForSeq2SeqLM.from_pretrained(\"ToddGoldfarb/Cadet-Medium\", low_cpu_mem_usage=True).to(self.device)\n        self.conversation_history = \"\"\n\n    def observe(self, observation):\n        self.conversation_history = self.conversation_history + observation\n        # The number 400 below is just a truncation safety net. It leaves room for 112 input tokens.\n        if len(self.conversation_history) > 400:\n            self.conversation_history = self.conversation_history[112:]\n\n    def set_input(self, situation_narrative=\"\", role_instruction=\"\"):\n        input_text = \"dialog: \"\n\n        if situation_narrative != \"\":\n            input_text = input_text + situation_narrative\n\n        if role_instruction != \"\":\n            input_text = input_text + \" <SEP> \" + role_instruction\n\n        input_text = input_text + \" <TURN> \" + self.conversation_history\n\n        # Uncomment the line below to see what is fed to the model.\n        # print(input_text)\n\n        return input_text\n\n    def generate(self, situation_narrative, role_instruction, user_response):\n        user_response = user_response + \" <TURN> \"\n        self.observe(user_response)\n\n        input_text = self.set_input(situation_narrative, role_instruction)\n\n        inputs = self.tokenizer([input_text], return_tensors=\"pt\").to(self.device)\n        \n        # I encourage you to change the hyperparameters of the model! Start by trying to modify the temperature.\n        outputs = self.model.generate(inputs[\"input_ids\"], max_new_tokens=512, temperature=1, top_p=.95,\n                                      do_sample=True)\n        cadet_response = self.tokenizer.decode(outputs[0], skip_special_tokens=True, clean_up_tokenization_spaces=False)\n        added_turn = cadet_response + \" <TURN> \"\n        self.observe(added_turn)\n\n        return cadet_response\n\n    def reset_history(self):\n        self.conversation_history = []\n\n    def run(self):\n        def get_valid_input(prompt, default):\n            while True:\n                user_input = input(prompt)\n                if user_input in [\"Y\", \"N\", \"y\", \"n\"]:\n                    return user_input\n                if user_input == \"\":\n                    return default\n\n        while True:\n            continue_chat = \"\"\n\n            # MODIFY THESE STRINGS TO YOUR LIKING :)\n            situation_narrative = \"Imagine you are Cadet-Medium talking to ???.\"\n            role_instruction = \"You are Cadet-Medium, and you are talking to ???.\"\n\n            self.chat(situation_narrative, role_instruction)\n            continue_chat = get_valid_input(cf.purple(\"Start a new conversation with new setup? [Y/N]:\"), \"Y\")\n            if continue_chat in [\"N\", \"n\"]:\n                break\n\n        print(cf.blue(\"CM: See you!\"))\n\n    def chat(self, situation_narrative, role_instruction):\n        print(cf.green(\n            \"Cadet-Medium is running! Input [RESET] to reset the conversation history and [END] to end the conversation.\"))\n        while True:\n            user_input = input(\"You: \")\n            if user_input == \"[RESET]\":\n                self.reset_history()\n                print(cf.green(\"[Conversation history cleared. Chat with Cadet-Medium!]\"))\n                continue\n            if user_input == \"[END]\":\n                break\n            response = self.generate(situation_narrative, role_instruction, user_input)\n            print(cf.blue(\"CM: \" + response))\n\n\ndef main():\n    print(cf.bold | cf.blue(\"LOADING MODEL\"))\n\n    CadetMed = CadetMedAgent()\n    CadetMed.run()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n# Citations and Special Thanks\nSpecial thanks to Hyunwoo Kim for discussing with me the best way to use the SODA dataset. If you haven't looked into their work with SODA, Prosocial-Dialog, or COSMO, I recommend you do so! As well, read the paper on SODA!\nThe article is listed below.\n\n```\n@article{kim2022soda,\n    title={SODA: Million-scale Dialogue Distillation with Social Commonsense Contextualization},\n    author={Hyunwoo Kim and Jack Hessel and Liwei Jiang and Peter West and Ximing Lu and Youngjae Yu and Pei Zhou and Ronan Le Bras and Malihe Alikhani and Gunhee Kim and Maarten Sap and Yejin Choi},\n    journal={ArXiv},\n    year={2022},\n    volume={abs/2212.10465}\n}\n```", "size_bytes": "891702929", "downloads": 18}