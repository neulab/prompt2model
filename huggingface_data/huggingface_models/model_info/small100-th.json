{"pretrained_model_name": "kimmchii/small100-th", "description": "---\nlicense: mit\n---\n# SMALL-100 Model\n\nSMaLL-100 is a compact and fast massively multilingual machine translation model covering more than 10K language pairs, that achieves competitive results with M2M-100 while being much smaller and faster. It is introduced in [this paper](https://arxiv.org/abs/2210.11621)(accepted to EMNLP2022), and initially released in [this repository](https://github.com/alirezamshi/small100).\n\nThe model architecture and config are the same as [M2M-100](https://huggingface.co/facebook/m2m100_418M/tree/main) implementation, but the tokenizer is modified to adjust language codes. So, you should load the tokenizer locally from [tokenization_small100.py](https://huggingface.co/alirezamsh/small100/blob/main/tokenization_small100.py) file for the moment.\n\n**Demo**: https://huggingface.co/spaces/alirezamsh/small100\n\n**Note**: SMALL100Tokenizer requires sentencepiece, so make sure to install it by:\n\n```pip install sentencepiece```\n\n- **Supervised Training**\n\nSMaLL-100 is a seq-to-seq model for the translation task. The input to the model is ```source:[tgt_lang_code] + src_tokens + [EOS]``` and ```target: tgt_tokens + [EOS]```. \n\n# `small-100-th` is the fine-tuned version of SMALL-100 for Thai\nThe dataset can be acquired from [scb-mt-en-th-2020](https://airesearch.in.th/releases/machine-translation-datasets/) and [OPUS](https://opus.nlpl.eu/). \nIt can also be directly download from [Vistec](https://github.com/vistec-AI/thai2nmt/releases/tag/scb-mt-en-th-2020%2Bmt-opus_v1.0). \n\n## small-100-th inference\n```\nfrom transformers import M2M100ForConditionalGeneration\nfrom tokenization_small100 import SMALL100Tokenizer\nfrom huggingface_hub import notebook_login\n\nnotebook_login()\n\ncheckpoint = \"kimmchii/small-100-th\"\nmodel = M2M100ForConditionalGeneration.from_pretrained(checkpoint)\ntokenizer = SMALL100Tokenizer.from_pretrained(checkpoint)\n\nthai_text = \"\u0e2a\u0e27\u0e31\u0e2a\u0e14\u0e35\"\n\n# translate Thai to English\ntokenizer.tgt_lang = \"en\"\nencoded_th = tokenizer(thai_text, return_tensors=\"pt\")\ngenerated_tokens = model.generate(**encoded_th)\ntokenizer.batch_decode(generated_tokens, skip_special_tokens=True)\n# => \"Hello\"\n```", "size_bytes": "1339441057", "downloads": 8}