{"pretrained_model_name": "Davlan/mt5_base_yor_eng_mt", "description": "Hugging Face's logo\n---\nlanguage: \n- yo\n- en\ndatasets:\n- JW300 + [Menyo-20k](https://huggingface.co/datasets/menyo20k_mt)\n---\n# mT5_base_yor_eng_mt\n## Model description\n**mT5_base_yor_eng_mt** is a **machine translation** model from Yor\u00f9b\u00e1 language to English language based on a fine-tuned  mT5-base  model.  It establishes a **strong baseline** for automatically translating texts from Yor\u00f9b\u00e1 to English.  \n\nSpecifically, this model is a *mT5_base* model that was fine-tuned on  JW300 Yor\u00f9b\u00e1 corpus and [Menyo-20k](https://huggingface.co/datasets/menyo20k_mt)\n## Intended uses & limitations\n#### How to use\nYou can use this model with Transformers *pipeline* for MT.\n```python\nfrom transformers import MT5ForConditionalGeneration, T5Tokenizer\n\nmodel = MT5ForConditionalGeneration.from_pretrained(\"Davlan/mt5_base_yor_eng_mt\")\ntokenizer = T5Tokenizer.from_pretrained(\"google/mt5-base\")\ninput_string = \"Ak\u1ecdni aj\u00ecj\u00e0gbara ob\u00ecnrin t\u00f3 sun \u00e0t\u00ecmal\u00e9 tor\u00ed ow\u00f3 or\u00ed\"\ninputs = tokenizer.encode(input_string, return_tensors=\"pt\")\ngenerated_tokens = model.generate(inputs)\nresults = tokenizer.batch_decode(generated_tokens, skip_special_tokens=True)\nprint(results)\n```\n#### Limitations and bias\nThis model is limited by its training dataset of entity-annotated news articles from a specific span of time. This may not generalize well for all use cases in different domains.  \n## Training data\nThis model was fine-tuned on on  JW300 Yor\u00f9b\u00e1 corpus and [Menyo-20k](https://huggingface.co/datasets/menyo20k_mt) dataset\n\n## Training procedure\nThis model was trained on a single NVIDIA V100 GPU\n\n## Eval results on Test set (BLEU score)\n15.57 BLEU on [Menyo-20k test set](https://arxiv.org/abs/2103.08647)\n\n### BibTeX entry and citation info\nBy David Adelani\n```\n\n```\n\n\n", "size_bytes": "2329707353", "downloads": 16}