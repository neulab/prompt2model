{"pretrained_model_name": "doc2query/msmarco-chinese-mt5-base-v1", "description": "---\nlanguage: zh\ndatasets:\n- unicamp-dl/mmarco\nwidget:\n- text: \"Python\uff08\u82f1\u570b\u767c\u97f3\uff1a/\u02c8pa\u026a\u03b8\u0259n/ \u7f8e\u570b\u767c\u97f3\uff1a/\u02c8pa\u026a\u03b8\u0251\u02d0n/\uff09\uff0c\u662f\u4e00\u79cd\u5e7f\u6cdb\u4f7f\u7528\u7684\u89e3\u91ca\u578b\u3001\u9ad8\u7ea7\u548c\u901a\u7528\u7684\u7f16\u7a0b\u8bed\u8a00\u3002Python\u652f\u6301\u591a\u79cd\u7f16\u7a0b\u8303\u578b\uff0c\u5305\u62ec\u51fd\u6570\u5f0f\u3001\u6307\u4ee4\u5f0f\u3001\u53cd\u5c04\u5f0f\u3001\u7ed3\u6784\u5316\u548c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u3002\u5b83\u62e5\u6709\u52a8\u6001\u7c7b\u578b\u7cfb\u7edf\u548c\u5783\u573e\u56de\u6536\u529f\u80fd\uff0c\u80fd\u591f\u81ea\u52a8\u7ba1\u7406\u5185\u5b58\u4f7f\u7528\uff0c\u5e76\u4e14\u5176\u672c\u8eab\u62e5\u6709\u4e00\u4e2a\u5de8\u5927\u800c\u5e7f\u6cdb\u7684\u6807\u51c6\u5e93\u3002\u5b83\u7684\u8bed\u8a00\u7ed3\u6784\u4ee5\u53ca\u9762\u5411\u5bf9\u8c61\u7684\u65b9\u6cd5\u65e8\u5728\u5e2e\u52a9\u7a0b\u5e8f\u5458\u4e3a\u5c0f\u578b\u7684\u548c\u5927\u578b\u7684\u9879\u76ee\u7f16\u5199\u6e05\u6670\u7684\u3001\u5408\u4e4e\u903b\u8f91\u7684\u4ee3\u7801\u3002\"\n\nlicense: apache-2.0\n---\n\n# doc2query/msmarco-chinese-mt5-base-v1\n\nThis is a [doc2query](https://arxiv.org/abs/1904.08375) model based on mT5 (also known as [docT5query](https://cs.uwaterloo.ca/~jimmylin/publications/Nogueira_Lin_2019_docTTTTTquery-v2.pdf)).\n\nIt can be used for:\n- **Document expansion**: You generate for your paragraphs 20-40 queries and index the paragraphs and the generates queries in a standard BM25 index like Elasticsearch, OpenSearch, or Lucene. The generated queries help to close the lexical gap of lexical search, as the generate queries contain synonyms. Further, it re-weights words giving important words a higher weight even if they appear seldomn in a paragraph. In our [BEIR](https://arxiv.org/abs/2104.08663) paper we showed that BM25+docT5query is a powerful search engine. In the [BEIR repository](https://github.com/beir-cellar/beir) we have an example how to use docT5query with Pyserini.\n- **Domain Specific Training Data Generation**: It can be used to generate training data to learn an embedding model. In our [GPL-Paper](https://arxiv.org/abs/2112.07577) / [GPL Example on SBERT.net](https://www.sbert.net/examples/domain_adaptation/README.html#gpl-generative-pseudo-labeling) we have an example how to use the model to generate (query, text) pairs for a given collection of unlabeled texts. These pairs can then be used to train powerful dense embedding models.\n\n## Usage\n```python\nfrom transformers import AutoTokenizer, AutoModelForSeq2SeqLM\nimport torch\n\nmodel_name = 'doc2query/msmarco-chinese-mt5-base-v1'\ntokenizer = AutoTokenizer.from_pretrained(model_name)\nmodel = AutoModelForSeq2SeqLM.from_pretrained(model_name)\n\ntext = \"Python\uff08\u82f1\u570b\u767c\u97f3\uff1a/\u02c8pa\u026a\u03b8\u0259n/ \u7f8e\u570b\u767c\u97f3\uff1a/\u02c8pa\u026a\u03b8\u0251\u02d0n/\uff09\uff0c\u662f\u4e00\u79cd\u5e7f\u6cdb\u4f7f\u7528\u7684\u89e3\u91ca\u578b\u3001\u9ad8\u7ea7\u548c\u901a\u7528\u7684\u7f16\u7a0b\u8bed\u8a00\u3002Python\u652f\u6301\u591a\u79cd\u7f16\u7a0b\u8303\u578b\uff0c\u5305\u62ec\u51fd\u6570\u5f0f\u3001\u6307\u4ee4\u5f0f\u3001\u53cd\u5c04\u5f0f\u3001\u7ed3\u6784\u5316\u548c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u3002\u5b83\u62e5\u6709\u52a8\u6001\u7c7b\u578b\u7cfb\u7edf\u548c\u5783\u573e\u56de\u6536\u529f\u80fd\uff0c\u80fd\u591f\u81ea\u52a8\u7ba1\u7406\u5185\u5b58\u4f7f\u7528\uff0c\u5e76\u4e14\u5176\u672c\u8eab\u62e5\u6709\u4e00\u4e2a\u5de8\u5927\u800c\u5e7f\u6cdb\u7684\u6807\u51c6\u5e93\u3002\u5b83\u7684\u8bed\u8a00\u7ed3\u6784\u4ee5\u53ca\u9762\u5411\u5bf9\u8c61\u7684\u65b9\u6cd5\u65e8\u5728\u5e2e\u52a9\u7a0b\u5e8f\u5458\u4e3a\u5c0f\u578b\u7684\u548c\u5927\u578b\u7684\u9879\u76ee\u7f16\u5199\u6e05\u6670\u7684\u3001\u5408\u4e4e\u903b\u8f91\u7684\u4ee3\u7801\u3002\"\n\n\ndef create_queries(para):\n    input_ids = tokenizer.encode(para, return_tensors='pt')\n    with torch.no_grad():\n        # Here we use top_k / top_k random sampling. It generates more diverse queries, but of lower quality\n        sampling_outputs = model.generate(\n            input_ids=input_ids,\n            max_length=64,\n            do_sample=True,\n            top_p=0.95,\n            top_k=10, \n            num_return_sequences=5\n            )\n        \n        # Here we use Beam-search. It generates better quality queries, but with less diversity\n        beam_outputs = model.generate(\n            input_ids=input_ids, \n            max_length=64, \n            num_beams=5, \n            no_repeat_ngram_size=2, \n            num_return_sequences=5, \n            early_stopping=True\n        )\n\n\n    print(\"Paragraph:\")\n    print(para)\n    \n    print(\"\\nBeam Outputs:\")\n    for i in range(len(beam_outputs)):\n        query = tokenizer.decode(beam_outputs[i], skip_special_tokens=True)\n        print(f'{i + 1}: {query}')\n\n    print(\"\\nSampling Outputs:\")\n    for i in range(len(sampling_outputs)):\n        query = tokenizer.decode(sampling_outputs[i], skip_special_tokens=True)\n        print(f'{i + 1}: {query}')\n\ncreate_queries(text)\n\n```\n\n**Note:** `model.generate()` is non-deterministic for top_k/top_n sampling. It produces different queries each time you run it.\n\n## Training\nThis model fine-tuned [google/mt5-base](https://huggingface.co/google/mt5-base) for 66k training steps (4 epochs on the 500k training pairs from MS MARCO). For the  training script, see the `train_script.py` in this repository.\n\nThe input-text was truncated to 320 word pieces. Output text was generated up to 64 word pieces. \n\nThis model was trained on a (query, passage) from the [mMARCO dataset](https://github.com/unicamp-dl/mMARCO).\n\n\n\n", "size_bytes": "2329700301", "downloads": 149}