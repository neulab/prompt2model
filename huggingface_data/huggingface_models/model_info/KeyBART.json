{"pretrained_model_name": "bloomberg/KeyBART", "description": "---\nlicense: apache-2.0\n---\n\n# KeyBART\nKeyBART as described in \"Learning Rich Representations of Keyphrase from Text\" published in the Findings of NAACL 2022 (https://aclanthology.org/2022.findings-naacl.67.pdf), pre-trains a BART-based architecture to produce a concatenated sequence of keyphrases in the CatSeqD format.\n\nWe provide some examples on Downstream Evaluations setups and and also how it can be used for Text-to-Text Generation in a zero-shot setting.\n\n## Downstream Evaluation\n\n### Keyphrase Generation\n```\nfrom transformers import AutoTokenizer, AutoModelForSeq2SeqLM\n\ntokenizer = AutoTokenizer.from_pretrained(\"bloomberg/KeyBART\")\nmodel = AutoModelForSeq2SeqLM.from_pretrained(\"bloomberg/KeyBART\")\n\nfrom datasets import load_dataset\n\ndataset = load_dataset(\"midas/kp20k\")\n```\n\nReported Results:\n\n#### Present Keyphrase Generation\n|               | Inspec |       | NUS   |       | Krapivin |       | SemEval |       | KP20k |       |\n|---------------|--------|-------|-------|-------|----------|-------|---------|-------|-------|-------|\n| Model         | F1@5   | F1@M  | F1@5  | F1@M  | F1@5     | F1@M  | F1@5    | F1@M  | F1@5  | F1@M  |\n| catSeq        | 22.5   | 26.2  | 32.3  | 39.7  | 26.9     | 35.4  | 24.2    | 28.3  | 29.1  | 36.7  |\n| catSeqTG      | 22.9   | 27    | 32.5  | 39.3  | 28.2     | 36.6  | 24.6    | 29.0  | 29.2  | 36.6  |\n| catSeqTG-2RF1 | 25.3   | 30.1  | 37.5  | 43.3  | 30       | 36.9  | 28.7    | 32.9  | 32.1  | 38.6  |\n| GANMR         | 25.8   | 29.9  | 34.8  | 41.7  | 28.8     | 36.9  | N/A     | N/A   | 30.3  | 37.8  |\n| ExHiRD-h      | 25.3   | 29.1  | N/A   | N/A   | 28.6     | 34.7  | 28.4    | 33.5  | 31.1  | 37.4  |\n| Transformer (Ye et al., 2021)  | 28.15  | 32.56 | 37.07 | 41.91 | 31.58    | 36.55 | 28.71   | 32.52 | 33.21 | 37.71 |\n| BART*         | 23.59  | 28.46 | 35.00 | 42.65 | 26.91    | 35.37 | 26.72   | 31.91 | 29.25 | 37.51 |\n| KeyBART-DOC*  | 24.42  | 29.57 | 31.37 | 39.24 | 24.21    | 32.60 | 24.69   | 30.50 | 28.82 | 37.59 |\n| KeyBART*      | 24.49  | 29.69 | 34.77 | 43.57 | 29.24    | 38.62 | 27.47   | 33.54 | 30.71 | 39.76 |\n| KeyBART* (Zero-shot)     | 30.72  | 36.89 | 18.86 | 21.67 | 18.35    | 20.46 | 20.25   | 25.82 | 12.57 | 15.41 |\n\n#### Absent Keyphrase Generation\n|               | Inspec |      | NUS  |      | Krapivin |      | SemEval |      | KP20k |      |\n|---------------|--------|------|------|------|----------|------|---------|------|-------|------|\n| Model         | F1@5   | F1@M | F1@5 | F1@M | F1@5     | F1@M | F1@5    | F1@M | F1@5  | F1@M |\n| catSeq        | 0.4    | 0.8  | 1.6  | 2.8  | 1.8      | 3.6  | 1.6     | 2.8  | 1.5   | 3.2  |\n| catSeqTG      | 0.5    | 1.1  | 1.1  | 1.8  | 1.8      | 3.4  | 1.1     | 1.8  | 1.5   | 3.2  |\n| catSeqTG-2RF1 | 1.2    | 2.1  | 1.9  | 3.1  | 3.0      | 5.3  | 2.1     | 3.0  | 2.7   | 5.0  |\n| GANMR         | 1.3    | 1.9  | 2.6  | 3.8  | 4.2      | 5.7  | N/A     | N/A  | 3.2   | 4.5  |\n| ExHiRD-h      | 1.1    | 2.2  | N/A  | N/A  | 2.2      | 4.3  | 1.7     | 2.5  | 1.6   | 3.2  |\n| Transformer  (Ye et al., 2021)  | 1.02   | 1.94 | 2.82 | 4.82 | 3.21     | 6.04 | 2.05    | 2.33 | 2.31  | 4.61 |\n| BART*         | 1.08   | 1.96 | 1.80 | 2.75 | 2.59     | 4.91 | 1.34    | 1.75 | 1.77  | 3.56 |\n| KeyBART-DOC*  | 0.99   | 2.03 | 1.39 | 2.74 | 2.40     | 4.58 | 1.07    | 1.39 | 1.69  | 3.38 |\n| KeyBART*      | 0.95   | 1.81 | 1.23 | 1.90 | 3.09     | 6.08 | 1.96    | 2.65 | 2.03  | 4.26 |\n| KeyBART*  (Zero-shot)     | 1.83   | 2.92 | 1.46 | 2.19 | 1.29     | 2.09 | 1.12    | 1.45 | 0.70  | 1.14 |\n\n\n### Abstractive Summarization\n```\nfrom transformers import AutoTokenizer, AutoModelForSeq2SeqLM\n\ntokenizer = AutoTokenizer.from_pretrained(\"bloomberg/KeyBART\")\nmodel = AutoModelForSeq2SeqLM.from_pretrained(\"bloomberg/KeyBART\")\n\nfrom datasets import load_dataset\n\ndataset = load_dataset(\"cnn_dailymail\")\n```\n\nReported Results:\n\n| Model        | R1    | R2    | RL    |\n|--------------|-------|-------|-------|\n| BART (Lewis et al., 2019)        | 44.16 | 21.28 | 40.9  |\n| BART*        | 42.93 | 20.12 | 39.72 |\n| KeyBART-DOC* | 42.92 | 20.07 | 39.69 |\n| KeyBART*     | 43.10 | 20.26 | 39.90 |\n\n## Zero-shot settings\n```\nfrom transformers import AutoTokenizer, AutoModelForSeq2SeqLM\n\ntokenizer = AutoTokenizer.from_pretrained(\"bloomberg/KeyBART\")\nmodel = AutoModelForSeq2SeqLM.from_pretrained(\"bloomberg/KeyBART\")\n```\n\nAlternatively use the Hosted Inference API console provided in https://huggingface.co/bloomberg/KeyBART\n\nSample Zero Shot result:\n\n```\nInput: In this work, we explore how to learn task specific language models aimed towards learning rich representation of keyphrases from text documents. \nWe experiment with different masking strategies for pre-training transformer language models (LMs) in discriminative as well as generative settings. \nIn the discriminative setting, we introduce a new pre-training objective - Keyphrase Boundary Infilling with Replacement (KBIR), \nshowing large gains in performance (upto 9.26 points in F1) over SOTA, when LM pre-trained using KBIR is fine-tuned for the task of keyphrase extraction.\nIn the generative setting, we introduce a new pre-training setup for BART - KeyBART, that reproduces the keyphrases related to the input text in the CatSeq\nformat, instead of the denoised original input. This also led to gains in performance (upto 4.33 points in F1@M) over SOTA for keyphrase generation.\nAdditionally, we also fine-tune the pre-trained language models on named entity recognition (NER), question answering (QA), relation extraction (RE),\nabstractive summarization and achieve comparable performance with that of the SOTA, showing that learning rich representation of keyphrases is indeed beneficial\nfor many other fundamental NLP tasks.\n\nOutput: language model;keyphrase generation;new pre-training objective;pre-training setup;\n\n```\n\n## Citation\n\nPlease cite this work using the following BibTeX entry:\n\n```\n@inproceedings{kulkarni-etal-2022-learning,\n    title = \"Learning Rich Representation of Keyphrases from Text\",\n    author = \"Kulkarni, Mayank  and\n      Mahata, Debanjan  and\n      Arora, Ravneet  and\n      Bhowmik, Rajarshi\",\n    booktitle = \"Findings of the Association for Computational Linguistics: NAACL 2022\",\n    month = jul,\n    year = \"2022\",\n    address = \"Seattle, United States\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"https://aclanthology.org/2022.findings-naacl.67\",\n    doi = \"10.18653/v1/2022.findings-naacl.67\",\n    pages = \"891--906\",\n    abstract = \"In this work, we explore how to train task-specific language models aimed towards learning rich representation of keyphrases from text documents. We experiment with different masking strategies for pre-training transformer language models (LMs) in discriminative as well as generative settings. In the discriminative setting, we introduce a new pre-training objective - Keyphrase Boundary Infilling with Replacement (KBIR), showing large gains in performance (upto 8.16 points in F1) over SOTA, when the LM pre-trained using KBIR is fine-tuned for the task of keyphrase extraction. In the generative setting, we introduce a new pre-training setup for BART - KeyBART, that reproduces the keyphrases related to the input text in the CatSeq format, instead of the denoised original input. This also led to gains in performance (upto 4.33 points in F1@M) over SOTA for keyphrase generation. Additionally, we also fine-tune the pre-trained language models on named entity recognition (NER), question answering (QA), relation extraction (RE), abstractive summarization and achieve comparable performance with that of the SOTA, showing that learning rich representation of keyphrases is indeed beneficial for many other fundamental NLP tasks.\",\n}\n```\n\nPlease direct all questions to dmahata@bloomberg.net", "size_bytes": "1625569391", "downloads": 506}