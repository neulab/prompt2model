{"pretrained_model_name": "kalpeshk2011/dipper-paraphraser-xxl", "description": "---\nlanguage: \n  - en\ntags:\n- t5\n- xxl\n- rewriting\n- paraphrase\n- paraphrase-generation\n- paraphrasing\n- pytorch\n- text-generation\n- text2text-generation\nlicense: \"apache-2.0\"\n---\n\nThis is the HuggingFace model release of our paper \"Paraphrasing evades detectors of AI-generated text, but retrieval is an effective defense\".\n\n## Paper and Github Repository\n\nPaper: https://arxiv.org/abs/2303.13408  \nCode: https://github.com/martiansideofthemoon/ai-detection-paraphrases  \nUsage instructions: https://github.com/martiansideofthemoon/ai-detection-paraphrases#running-the-paraphraser-model-dipper\n\n## What is DIPPER?\n\nDIPPER (\"**Di**scourse **P**ara**p**hras**er**\") is a 11B parameter paraphrase generation model built by fine-tuning T5-XXL. DIPPER possesses two unique features that help its outputs evade AI-generated text detectors:\n\n* *Paraphrasing long-form text in context*: Most modern paraphrasers are exclusively trained on sentence-level data, ignoring discourse-level information. However, many critical use cases of LLMs involve generating long-form text in responses to detailed userspecified prompts. Thus, we train DIPPER to paraphrase paragraph-length texts, re-order content, and optionally leverage context such as input prompts.\n\n* *Controlling output diversity*: Another weakness of existing paraphrasers is that they lack an easy way to control output diversity. An attacker may want to apply just the minimum amount of lexical and syntactic modifications necessary to evade a detection algorithm. DIPPER provides users with two intuitive scalar control knobs at inference time that are trained end-to-end: one controls the lexical diversity of the paraphrase, and the other controls the amount of content re-ordering.\n\nWe leverage the PAR3 dataset publicly released by Thai et al. (2022) to train DIPPER. This dataset contains multiple translations of non-English novels into English aligned at a paragraph level (e.g., it contains both the Henry Morley and Robert Adams translations of Voltaire\u2019s Candide), which we treat as paragraphlevel paraphrases and use to train our paraphraser.\n\n## Using DIPPER\n\nFull instructions: https://github.com/martiansideofthemoon/ai-detection-paraphrases#running-the-paraphraser-model-dipper\n\nWe suggest using the code below to use the model correctly:\n\n```\nclass DipperParaphraser(object):\n    def __init__(self, model=\"kalpeshk2011/dipper-paraphraser-xxl\", verbose=True):\n        time1 = time.time()\n        self.tokenizer = T5Tokenizer.from_pretrained('google/t5-v1_1-xxl')\n        self.model = T5ForConditionalGeneration.from_pretrained(model)\n        if verbose:\n            print(f\"{model} model loaded in {time.time() - time1}\")\n        self.model.cuda()\n        self.model.eval()\n\n    def paraphrase(self, input_text, lex_diversity, order_diversity, prefix=\"\", sent_interval=3, **kwargs):\n        \"\"\"Paraphrase a text using the DIPPER model.\n\n        Args:\n            input_text (str): The text to paraphrase. Make sure to mark the sentence to be paraphrased between <sent> and </sent> blocks, keeping space on either side.\n            lex_diversity (int): The lexical diversity of the output, choose multiples of 20 from 0 to 100. 0 means no diversity, 100 means maximum diversity.\n            order_diversity (int): The order diversity of the output, choose multiples of 20 from 0 to 100. 0 means no diversity, 100 means maximum diversity.\n            **kwargs: Additional keyword arguments like top_p, top_k, max_length.\n        \"\"\"\n        assert lex_diversity in [0, 20, 40, 60, 80, 100], \"Lexical diversity must be one of 0, 20, 40, 60, 80, 100.\"\n        assert order_diversity in [0, 20, 40, 60, 80, 100], \"Order diversity must be one of 0, 20, 40, 60, 80, 100.\"\n\n        lex_code = int(100 - lex_diversity)\n        order_code = int(100 - order_diversity)\n\n        input_text = \" \".join(input_text.split())\n        sentences = sent_tokenize(input_text)\n        prefix = \" \".join(prefix.replace(\"\\n\", \" \").split())\n        output_text = \"\"\n\n        for sent_idx in range(0, len(sentences), sent_interval):\n            curr_sent_window = \" \".join(sentences[sent_idx:sent_idx + sent_interval])\n            final_input_text = f\"lexical = {lex_code}, order = {order_code}\"\n            if prefix:\n                final_input_text += f\" {prefix}\"\n            final_input_text += f\" <sent> {curr_sent_window} </sent>\"\n\n            final_input = self.tokenizer([final_input_text], return_tensors=\"pt\")\n            final_input = {k: v.cuda() for k, v in final_input.items()}\n\n            with torch.inference_mode():\n                outputs = self.model.generate(**final_input, **kwargs)\n            outputs = self.tokenizer.batch_decode(outputs, skip_special_tokens=True)\n            prefix += \" \" + outputs[0]\n            output_text += \" \" + outputs[0]\n\n        return output_text\n\nif __name__ == \"__main__\":\n    dp = DipperParaphraser()\n\n    prompt = \"In a shocking finding, scientist discovered a herd of unicorns living in a remote valley.\"\n    input_text = \"They have never been known to mingle with humans. Today, it is believed these unicorns live in an unspoilt environment which is surrounded by mountains. Its edge is protected by a thick wattle of wattle trees, giving it a majestic appearance. Along with their so-called miracle of multicolored coat, their golden coloured feather makes them look like mirages. Some of them are rumored to be capable of speaking a large amount of different languages. They feed on elk and goats as they were selected from those animals that possess a fierceness to them, and can \\\"eat\\\" them with their long horns.\"\n\n    print(f\"Input = {prompt} <sent> {input_text} </sent>\\n\")\n    output_l60_sample = dp.paraphrase(input_text, lex_diversity=60, order_diversity=0, prefix=prompt, do_sample=True, top_p=0.75, top_k=None, max_length=512)\n    print(f\"Output (Lexical diversity = 60, Sample p = 0.75) = {output_l60_sample}\\n\")\n```", "size_bytes": 45594099712, "downloads": 843}