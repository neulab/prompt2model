{"pretrained_model_name": "jordiclive/flan-t5-3b-summarizer", "description": "---\nlanguage:\n- en\nlicense:\n- apache-2.0\n- bsd-3-clause\ntags:\n- summarization\n- extractive\n- summary\n- abstractive\n- multi-task\n- document summary\ndatasets:\n- jordiclive/scored_summarization_datasets\nmetrics:\n- rouge\n---\n\n# Multi-purpose Summarizer (Fine-tuned 3B google/flan-t5-xl on several Summarization datasets)\n\n <a href=\"https://colab.research.google.com/drive/1EYfnIoG-r5lL2-3oiO_YdYEVKB0pAa9h\">\n  <img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/>\n</a>\n\nA fine-tuned version of [google/flan-t5-xl](https://huggingface.co/google/flan-t5-xl) on various summarization datasets (xsum, wikihow, cnn_dailymail/3.0.0, samsum, scitldr/AIC, billsum, TLDR)\n\nGoal: a model that can be used for a general-purpose summarizer for academic and general usage. Control over the type of summary can be given by varying the instruction prepended to the source document. The result works well on lots of text, although trained with a max source length of 512 tokens and 150 max summary length. \n\n---\n\n## Usage \nCheck the colab notebook for desired usage\n**The model expects a prompt prepended to the source document to indicate the type of summary**, examples of prompts used to train the model here:\nPrompts should be formatted with a colon at the end so that the input to the model is formatted as e.g. \"Summarize the following: {input_text}\". Note this model was trained with far fewer prompts than models like `jordiclive/flan-t5-11b-summarizer-filtered` so new prompts might not generalize as well.\n```\n\n. \nprompts = {\n    \"article\": \"Produce an article summary of the following news article:\",\n    \"one_sentence\": \"Given the following news article, summarize the article in one sentence:\",\n    \"conversation\": \"Briefly summarize in third person the following conversation:\",\n    \"scitldr\": \"Given the following scientific article, provide a TL;DR summary:\",\n    \"bill\": \"Summarize the following proposed legislation (bill):\",\n    \"outlines\": \"Produce an article summary including outlines of each paragraph of the following article:\",\n}\n```\nAfter `pip install transformers` run the following code:\n\nThis pipeline will run slower and not have some of the tokenization parameters as the colab.\n```python\nfrom transformers import pipeline\n\nsummarizer = pipeline(\"summarization\", \"jordiclive/flan-t5-3b-summarizer\", torch_dtype=torch.bfloat16)\n\nraw_document = 'You must be 18 years old to live or work in New York State...'\nprompt = \"Produce an article summary of the following news article:\"\nresults = summarizer(\n        f\"{prompt} {raw_document}\",\n        num_beams=5,\n        min_length=5,\n        no_repeat_ngram_size=3,\n        truncation=True,\n        max_length=512,\n    )\n```\n\n---\n\n## Training procedure\n\n- Training was done in BF16, deepspeed stage 2 for 6 epochs with ROUGE-2 monitored on the validation set.\n\n## Hardware\n- GPU count\t8 NVIDIA A100-SXM4-40GB\n- CPU count\t48\n### Training hyperparameters\n\n\nThe following hyperparameters were used during training:\n- learning_rate: 3e-05\n- train_batch_size: 5\n- eval_batch_size: 8\n- seed: 42\n- distributed_type: multi-GPU\n- gradient_accumulation_steps: 2\n- effective_train_batch_size: 80\n- optimizer: Adam with betas=(0.9,0.999) and epsilon=1e-08\n- lr_scheduler_type: linear\n- warmup_steps: 2000\n- num_epochs: 10\n\n\n### Framework versions\n\n- Transformers 4.24.0\n- Pytorch 1.9.1+cu111\n- Deepspeed 0.7.4\n- Pytorch-lightning 1.8.1", "size_bytes": "5699596111", "downloads": 1402}