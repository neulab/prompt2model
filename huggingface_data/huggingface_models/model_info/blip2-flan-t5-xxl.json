{"pretrained_model_name": "Salesforce/blip2-flan-t5-xxl", "description": "---\nlanguage: en\nlicense: mit\ntags:\n- vision\n- image-to-text\n- image-captioning\n- visual-question-answering\npipeline_tag: image-to-text\ninference: false\n---\n\n# BLIP-2, Flan T5-xxl, pre-trained only\n\nBLIP-2 model, leveraging [Flan T5-xxl](https://huggingface.co/google/flan-t5-xxl) (a large language model).\nIt was introduced in the paper [BLIP-2: Bootstrapping Language-Image Pre-training with Frozen Image Encoders and Large Language Models](https://arxiv.org/abs/2301.12597) by Li et al. and first released in [this repository](https://github.com/salesforce/LAVIS/tree/main/projects/blip2).\n\nDisclaimer: The team releasing BLIP-2 did not write a model card for this model so this model card has been written by the Hugging Face team.\n\n## Model description\n\nBLIP-2 consists of 3 models: a CLIP-like image encoder, a Querying Transformer (Q-Former) and a large language model.\n\nThe authors initialize the weights of the image encoder and large language model from pre-trained checkpoints and keep them frozen\nwhile training the Querying Transformer, which is a BERT-like Transformer encoder that maps a set of \"query tokens\" to query embeddings,\nwhich bridge the gap between the embedding space of the image encoder and the large language model.\n\nThe goal for the model is simply to predict the next text token, giving the query embeddings and the previous text.\n\n<img src=\"https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/transformers/model_doc/blip2_architecture.jpg\"\nalt=\"drawing\" width=\"600\"/> \n\nThis allows the model to be used for tasks like:\n\n- image captioning\n- visual question answering (VQA)\n- chat-like conversations by feeding the image and the previous conversation as prompt to the model\n\n## Direct Use and Downstream Use\n\nYou can use the raw model for conditional text generation given an image and optional text. See the [model hub](https://huggingface.co/models?search=Salesforce/blip) to look for\nfine-tuned versions on a task that interests you.\n\n## Bias, Risks, Limitations, and Ethical Considerations\n\nBLIP2-FlanT5 uses off-the-shelf Flan-T5 as the language model. It inherits the same risks and limitations from [Flan-T5](https://arxiv.org/pdf/2210.11416.pdf):\n\n> Language models, including Flan-T5, can potentially be used for language generation in a harmful way, according to Rae et al. (2021). Flan-T5 should not be used directly in any application, without a prior assessment of safety and fairness concerns specific to the application.\n\nBLIP2 is fine-tuned on image-text datasets (e.g. [LAION](https://laion.ai/blog/laion-400-open-dataset/) ) collected from the internet.  As a result the model itself is potentially vulnerable to generating equivalently inappropriate content or replicating inherent biases in the underlying data.\n\nBLIP2 has not been tested in real world applications. It should not be directly deployed in any applications. Researchers should first carefully assess the safety and fairness of the model in relation to the specific context they\u2019re being deployed within.\n\n\n### How to use\n\nFor code examples, we refer to the [documentation](https://huggingface.co/docs/transformers/main/en/model_doc/blip-2#transformers.Blip2ForConditionalGeneration.forward.example), or refer to the snippets below depending on your usecase:\n\n#### Running the model on CPU\n\n<details>\n<summary> Click to expand </summary>\n\n```python\nimport requests\nfrom PIL import Image\nfrom transformers import BlipProcessor, Blip2ForConditionalGeneration\n\nprocessor = BlipProcessor.from_pretrained(\"Salesforce/blip2-flan-t5-xxl\")\nmodel = Blip2ForConditionalGeneration.from_pretrained(\"Salesforce/blip2-flan-t5-xxl\")\n\nimg_url = 'https://storage.googleapis.com/sfr-vision-language-research/BLIP/demo.jpg' \nraw_image = Image.open(requests.get(img_url, stream=True).raw).convert('RGB')\n\nquestion = \"how many dogs are in the picture?\"\ninputs = processor(raw_image, question, return_tensors=\"pt\")\n\nout = model.generate(**inputs)\nprint(processor.decode(out[0], skip_special_tokens=True))\n```\n</details>\n\n#### Running the model on GPU\n\n##### In full precision \n\n<details>\n<summary> Click to expand </summary>\n\n```python\n# pip install accelerate\nimport requests\nfrom PIL import Image\nfrom transformers import Blip2Processor, Blip2ForConditionalGeneration\n\nprocessor = Blip2Processor.from_pretrained(\"Salesforce/blip2-flan-t5-xxl\")\nmodel = Blip2ForConditionalGeneration.from_pretrained(\"Salesforce/blip2-flan-t5-xxl\", device_map=\"auto\")\n\nimg_url = 'https://storage.googleapis.com/sfr-vision-language-research/BLIP/demo.jpg' \nraw_image = Image.open(requests.get(img_url, stream=True).raw).convert('RGB')\n\nquestion = \"how many dogs are in the picture?\"\ninputs = processor(raw_image, question, return_tensors=\"pt\").to(\"cuda\")\n\nout = model.generate(**inputs)\nprint(processor.decode(out[0], skip_special_tokens=True))\n```\n</details>\n\n##### In half precision (`float16`)\n\n<details>\n<summary> Click to expand </summary>\n\n```python\n# pip install accelerate\nimport torch\nimport requests\nfrom PIL import Image\nfrom transformers import Blip2Processor, Blip2ForConditionalGeneration\n\nprocessor = Blip2Processor.from_pretrained(\"Salesforce/blip2-flan-t5-xxl\")\nmodel = Blip2ForConditionalGeneration.from_pretrained(\"Salesforce/blip2-flan-t5-xxl\", torch_dtype=torch.float16, device_map=\"auto\")\n\nimg_url = 'https://storage.googleapis.com/sfr-vision-language-research/BLIP/demo.jpg' \nraw_image = Image.open(requests.get(img_url, stream=True).raw).convert('RGB')\n\nquestion = \"how many dogs are in the picture?\"\ninputs = processor(raw_image, question, return_tensors=\"pt\").to(\"cuda\", torch.float16)\n\nout = model.generate(**inputs)\nprint(processor.decode(out[0], skip_special_tokens=True))\n```\n</details>\n\n##### In 8-bit precision (`int8`)\n\n<details>\n<summary> Click to expand </summary>\n\n```python\n# pip install accelerate bitsandbytes\nimport torch\nimport requests\nfrom PIL import Image\nfrom transformers import Blip2Processor, Blip2ForConditionalGeneration\n\nprocessor = Blip2Processor.from_pretrained(\"Salesforce/blip2-flan-t5-xxl\")\nmodel = Blip2ForConditionalGeneration.from_pretrained(\"Salesforce/blip2-flan-t5-xxl\", load_in_8bit=True, device_map=\"auto\")\n\nimg_url = 'https://storage.googleapis.com/sfr-vision-language-research/BLIP/demo.jpg' \nraw_image = Image.open(requests.get(img_url, stream=True).raw).convert('RGB')\n\nquestion = \"how many dogs are in the picture?\"\ninputs = processor(raw_image, question, return_tensors=\"pt\").to(\"cuda\", torch.float16)\n\nout = model.generate(**inputs)\nprint(processor.decode(out[0], skip_special_tokens=True))\n```\n</details>", "size_bytes": 49971156992, "downloads": 9042}