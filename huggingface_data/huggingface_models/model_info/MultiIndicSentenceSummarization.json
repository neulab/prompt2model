{"pretrained_model_name": "ai4bharat/MultiIndicSentenceSummarization", "description": "---\ntags:\n- sentence-summarization\n- multilingual\n- nlp\n- indicnlp\ndatasets:\n- ai4bharat/IndicSentenceSummarization\nlanguage:\n- as\n- bn\n- gu\n- hi\n- kn\n- ml\n- mr\n- or\n- pa\n- ta\n- te\nlicense:\n- mit\nwidget:\n- \u091c\u092e\u094d\u092e\u0942 \u090f\u0935\u0902 \u0915\u0936\u094d\u092e\u0940\u0930 \u0915\u0947 \u0905\u0928\u0902\u0924\u0928\u093e\u0917 \u091c\u093f\u0932\u0947 \u092e\u0947\u0902 \u0936\u0928\u093f\u0935\u093e\u0930 \u0915\u094b \u0938\u0941\u0930\u0915\u094d\u0937\u093e\u092c\u0932\u094b\u0902 \u0915\u0947 \u0938\u093e\u0925 \u092e\u0941\u0920\u092d\u0947\u0921\u093c \u092e\u0947\u0902 \u0926\u094b \u0906\u0924\u0902\u0915\u0935\u093e\u0926\u093f\u092f\u094b\u0902 \u0915\u094b \u092e\u093e\u0930 \u0917\u093f\u0930\u093e\u092f\u093e \u0917\u092f\u093e\u0964 </s> <2hi>\n\n\n\n---\n\n# MultiIndicSentenceSummarization\n\nThis repository contains the [IndicBART](https://huggingface.co/ai4bharat/IndicBART) checkpoint finetuned on the 11 languages of [IndicSentenceSummarization](https://huggingface.co/datasets/ai4bharat/IndicSentenceSummarization) dataset. For finetuning details,\nsee the [paper](https://arxiv.org/abs/2203.05437). \n<ul>\n<li >Supported languages: Assamese, Bengali, Gujarati, Hindi, Marathi, Odiya, Punjabi, Kannada, Malayalam, Tamil, and Telugu. Not all of these languages are supported by mBART50 and mT5. </li>\n<li >The model is much smaller than the mBART and mT5(-base) models, so less computationally expensive for decoding. </li>\n<li> Trained on large Indic language corpora (431K sentences). </li>\n<li> All languages, have been represented in Devanagari script to encourage transfer learning among the related languages. </li>\n</ul>\n\n\n\n## Using this model in `transformers`\n\n```\nfrom transformers import MBartForConditionalGeneration, AutoModelForSeq2SeqLM\nfrom transformers import AlbertTokenizer, AutoTokenizer\ntokenizer = AutoTokenizer.from_pretrained(\"ai4bharat/MultiIndicSentenceSummarization\", do_lower_case=False, use_fast=False, keep_accents=True)\n# Or use tokenizer = AlbertTokenizer.from_pretrained(\"ai4bharat/MultiIndicSentenceSummarization\", do_lower_case=False, use_fast=False, keep_accents=True)\nmodel = AutoModelForSeq2SeqLM.from_pretrained(\"ai4bharat/MultiIndicSentenceSummarization\")\n# Or use model = MBartForConditionalGeneration.from_pretrained(\"ai4bharat/MultiIndicSentenceSummarization\")\n\n# Some initial mapping\nbos_id = tokenizer._convert_token_to_id_with_added_voc(\"<s>\")\neos_id = tokenizer._convert_token_to_id_with_added_voc(\"</s>\")\npad_id = tokenizer._convert_token_to_id_with_added_voc(\"<pad>\")\n\n# To get lang_id use any of ['<2as>', '<2bn>', '<2en>', '<2gu>', '<2hi>', '<2kn>', '<2ml>', '<2mr>', '<2or>', '<2pa>', '<2ta>', '<2te>']\n# First tokenize the input. The format below is how IndicBART was trained so the input should be \"Sentence </s> <2xx>\" where xx is the language code. Similarly, the output should be \"<2yy> Sentence </s>\".\ninp = tokenizer(\"\u091c\u092e\u094d\u092e\u0942 \u090f\u0935\u0902 \u0915\u0936\u094d\u092e\u0940\u0930 \u0915\u0947 \u0905\u0928\u0902\u0924\u0928\u093e\u0917 \u091c\u093f\u0932\u0947 \u092e\u0947\u0902 \u0936\u0928\u093f\u0935\u093e\u0930 \u0915\u094b \u0938\u0941\u0930\u0915\u094d\u0937\u093e\u092c\u0932\u094b\u0902 \u0915\u0947 \u0938\u093e\u0925 \u092e\u0941\u0920\u092d\u0947\u0921\u093c \u092e\u0947\u0902 \u0926\u094b \u0906\u0924\u0902\u0915\u0935\u093e\u0926\u093f\u092f\u094b\u0902 \u0915\u094b \u092e\u093e\u0930 \u0917\u093f\u0930\u093e\u092f\u093e \u0917\u092f\u093e\u0964 </s> <2hi>\", add_special_tokens=False, return_tensors=\"pt\", padding=True).input_ids \n\n# For generation. Pardon the messiness. Note the decoder_start_token_id.\n\nmodel_output=model.generate(inp, use_cache=True,no_repeat_ngram_size=3, num_beams=5, length_penalty=0.8, early_stopping=True, pad_token_id=pad_id, bos_token_id=bos_id, eos_token_id=eos_id, decoder_start_token_id=tokenizer._convert_token_to_id_with_added_voc(\"<2hi>\"))\n\n# Decode to get output strings\ndecoded_output=tokenizer.decode(model_output[0], skip_special_tokens=True, clean_up_tokenization_spaces=False)\nprint(decoded_output) # \u091c\u092e\u094d\u092e\u0942 \u090f\u0935\u0902 \u0915\u0936\u094d\u092e\u0940\u0930\u0903 \u0905\u0928\u0902\u0924\u0928\u093e\u0917 \u092e\u0947\u0902 \u0938\u0941\u0930\u0915\u094d\u0937\u093e\u092c\u0932\u094b\u0902 \u0915\u0947 \u0938\u093e\u0925 \u092e\u0941\u0920\u092d\u0947\u0921\u093c \u092e\u0947\u0902 \u0926\u094b \u0906\u0924\u0902\u0915\u0935\u093e\u0926\u0940 \u0922\u0947\u0930\n\n# Note that if your output language is not Hindi or Marathi, you should convert its script from Devanagari to the desired language using the Indic NLP Library.\n\n```\n# Note:\nIf you wish to use any language written in a non-Devanagari script, then you should first convert it to Devanagari using the <a href=\"https://github.com/anoopkunchukuttan/indic_nlp_library\">Indic NLP Library</a>. After you get the output, you should convert it back into the original script.\n\n## Benchmarks\n\nScores on the `IndicSentenceSummarization` test sets are as follows:\n\nLanguage | Rouge-1 / Rouge-2 / Rouge-L\n---------|----------------------------\nas\t|\t60.46\t/\t46.77\t/\t59.29\nbn\t|\t51.12\t/\t34.91\t/\t49.29\ngu\t|\t47.89\t/\t29.97\t/\t45.92\nhi\t|\t50.7\t/\t28.11\t/\t45.34\nkn\t|\t77.93\t/\t70.03\t/\t77.32\nml\t|\t67.7\t/\t54.42\t/\t66.42\nmr\t|\t48.06\t/\t26.98\t/\t46.5\nor\t|\t45.2\t/\t23.66\t/\t43.65\npa\t|\t55.96\t/\t37.2\t/\t52.22\nta\t|\t58.85\t/\t38.97\t/\t56.83\nte\t|\t54.81\t/\t35.28\t/\t53.44\n\n\n## Citation\n\nIf you use this model, please cite the following paper:\n```\n@inproceedings{Kumar2022IndicNLGSM,\n  title={IndicNLG Suite: Multilingual Datasets for Diverse NLG Tasks in Indic Languages},\n  author={Aman Kumar and Himani Shrotriya and Prachi Sahu and Raj Dabre and Ratish Puduppully and Anoop Kunchukuttan and Amogh Mishra and Mitesh M. Khapra and Pratyush Kumar},\n  year={2022},\n  url = \"https://arxiv.org/abs/2203.05437\"\n  }\n```\n", "size_bytes": "976422449", "downloads": 15}