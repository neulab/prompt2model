{"pretrained_model_name": "zjunlp/MolGen-large", "description": "---\ntags:\n- molecular language model\n- SELFIES\n- molecule generation\nwidget:\n- text: '[C][=C][C][=C][C][=C][Ring1][=Branch1]'\ninference: false\n---\n# MolGen-large\nMolGen-large was introduced in the paper [\"Domain-Agnostic Molecular Generation with Self-feedback\"](https://arxiv.org/pdf/2301.11259.pdf) and first released in [this repository](https://github.com/zjunlp/MolGen). It is a pre-trained molecular generative model built using the 100\\% robust molecular language representation, SELFIES.\n\n## Model description\nMolGen-large is the first pre-trained model that only produces chemically valid molecules. \nWith a training corpus of over 100 million molecules in SELFIES representation, MolGen-large learns the intrinsic structural patterns of molecules by mapping corrupted SELFIES to their original forms.\nSpecifically, MolGen-large employs a bidirectional Transformer as its encoder and an autoregressive Transformer as its decoder.\nThrough its carefully designed multi-task molecular prefix tuning (MPT), MolGen-large can generate molecules with desired properties, making it a valuable tool for molecular optimization.\n\n![image.png](./model.png)\n\n## Intended uses\nYou can use the raw model for molecule generation or fine-tune it to a downstream task. Please take note that the following examples only demonstrate the utilization of our pre-trained model for molecule generation. See the [repository](https://github.com/zjunlp/MolGen) to look for fine-tune details on a task that interests you.\n\n### How to use\nMolecule generation example:\n```python\n>>> from transformers import AutoTokenizer, AutoModelForSeq2SeqLM\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"zjunlp/MolGen-large\")\n>>> model = AutoModelForSeq2SeqLM.from_pretrained(\"zjunlp/MolGen-large\")\n\n>>> sf_input = tokenizer(\"[C][=C][C][=C][C][=C][Ring1][=Branch1]\", return_tensors=\"pt\")\n>>> # beam search\n>>> molecules = model.generate(input_ids=sf_input[\"input_ids\"],\n                              attention_mask=sf_input[\"attention_mask\"],\n                              max_length=15,\n                              min_length=5,\n                              num_return_sequences=5,\n                              num_beams=5)\n>>> sf_output = [tokenizer.decode(g, skip_special_tokens=True, clean_up_tokenization_spaces=True).replace(\" \",\"\") for g in molecules]\n['[C][=C][C][=C][C][=C][Ring1][=Branch1]',\n'[C][=C][C][=C][C][=C][C][=C][Ring1][=Branch1]',\n'[C][=C][C][=C][C][=C][Ring1][=Branch1][C][=C][C][=C]',\n'[C][=C][C][=C][C][=C][Ring1][=Branch1][C@H1][C][=C][C]',\n'[C][=C][C][=C][C][=C][Ring1][=Branch1][C@H1][=C][C][=C]']\n```\n\n\n### BibTeX entry and citation info\n```bibtex\n@article{fang2023molecular,\n  title={Molecular Language Model as Multi-task Generator},\n  author={Fang, Yin and Zhang, Ningyu and Chen, Zhuo and Fan, Xiaohui and Chen, Huajun},\n  journal={arXiv preprint arXiv:2301.11259},\n  year={2023}\n}\n```", "size_bytes": "1420206221", "downloads": 208}