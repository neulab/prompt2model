{"pretrained_model_name": "flax-community/gpt-neo-125M-code-search-py", "description": "# GPT-Code-Clippy-125M-Code-Search-Py\n> **Please refer to our new [GitHub Wiki](https://github.com/ncoop57/gpt-code-clippy/wiki) which documents our efforts in detail in creating the open source version of GitHub  Copilot**\n\n## Model Description\n\nGPT-CC-125M-Code-Search is a [GPT-Neo-125M model](https://huggingface.co/EleutherAI/gpt-neo-125M) finetuned using causal language modeling on only the python language in the [CodeSearchNet Challenge dataset](https://huggingface.co/datasets/code_search_net). This model is specialized to autocomplete methods in the python language.\n\n## Training data\n\n[CodeSearchNet Challenge dataset](https://huggingface.co/datasets/code_search_net).\n\n## Training procedure\n\nThe training script used to train this model can be found [here](https://github.com/ncoop57/gpt-code-clippy/blob/camera-ready/training/run_clm_flax.py).\n\n```bash\n./run_clm_flax.py \\\n    --output_dir $HOME/gpt-neo-125M-code-search-py \\\n    --model_name_or_path=\"EleutherAI/gpt-neo-125M\" \\\n    --dataset_name code_search_net \\\n    --dataset_config_name=\"python\" \\\n    --do_train --do_eval \\\n    --block_size=\"512\" \\\n    --per_device_train_batch_size=\"32\" \\\n    --per_device_eval_batch_size=\"64\" \\\n    --preprocessing_num_workers=\"8\" \\\n    --learning_rate=\"1.2e-4\" \\\n    --num_train_epochs 20 \\\n    --warmup_steps 3000 \\\n    --adam_beta1=\"0.9\" \\\n    --adam_beta2=\"0.95\" \\\n    --weight_decay=\"0.1\" \\\n    --overwrite_output_dir \\\n    --logging_steps=\"25\" \\\n    --eval_steps=\"500\" \\\n    --push_to_hub=\"False\" \\\n    --report_to=\"all\" \\\n    --dtype=\"bfloat16\" \\\n    --skip_memory_metrics=\"True\" \\\n    --save_steps=\"500\" \\\n    --save_total_limit 10 \\\n    --report_to=\"wandb\" \\\n    --run_name=\"gpt-neo-125M-code-search-py\"\n```\n\n## Intended Use and Limitations\n\nThe model is finetuned methods from the python language and is intended to autocomplete python methods given some prompt (method signature and docstring).\n\n### How to use\n\nYou can use this model directly with a pipeline for text generation. This example generates a different sequence each time it's run:\n\n```py\n\nfrom transformers import AutoModelForCausalLM, AutoTokenizer, FlaxAutoModelForCausalLM\n\nmodel = AutoModelForCausalLM.from_pretrained(\"flax-community/gpt-neo-125M-code-clippy-code-search-py\")\n\ntokenizer = AutoTokenizer.from_pretrained(\"flax-community/gpt-neo-125M-code-clippy-code-search-py\")\n\nprompt = \"\"\"def greet(name):\n  '''A function to greet user. Given a user name it should say hello'''\n\"\"\" \n\ninput_ids = tokenizer(prompt, return_tensors='pt').input_ids.to(device)\n\nstart = input_ids.size(1)\n\nout = model.generate(input_ids, do_sample=True, max_length=50, num_beams=2, \n\n                     early_stopping=True, eos_token_id=tokenizer.eos_token_id, )\n\nprint(tokenizer.decode(out[0][start:]))\n\n```\n\n### Limitations and Biases\n\nThe model is intended to be used for research purposes and comes with no guarantees of quality of generated code.\n\nGPT-CC is finetuned from GPT-Neo and might have inherited biases and limitations from it. See [GPT-Neo model card](https://huggingface.co/EleutherAI/gpt-neo-125M#limitations-and-biases) for details.\n\n## Eval results\n\nComing soon...", "size_bytes": "526020317", "downloads": 0}