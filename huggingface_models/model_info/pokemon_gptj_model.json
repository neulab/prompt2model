{"pretrained_model_name": "gilparmentier/pokemon_gptj_model", "description": "---\nlanguage:\n- en\ntags:\n- pytorch\n- causal-lm\nlicense: apache-2.0\ndatasets:\n- The Pile\n\n---\n\n# GPT-J 6B\n\n## Model Description\n\nGPT-J 6B is a transformer model trained using Ben Wang's [Mesh Transformer JAX](https://github.com/kingoflolz/mesh-transformer-jax/). \"GPT-J\" refers to the class of model, while \"6B\" represents the number of trainable parameters.\n\n<figure>\n\n| Hyperparameter       | Value      |\n|----------------------|------------|\n| \\\\(n_{parameters}\\\\) | 6053381344 |\n| \\\\(n_{layers}\\\\)     | 28&ast;    |\n| \\\\(d_{model}\\\\)      | 4096       |\n| \\\\(d_{ff}\\\\)         | 16384      |\n| \\\\(n_{heads}\\\\)      | 16         |\n| \\\\(d_{head}\\\\)       | 256        |\n| \\\\(n_{ctx}\\\\)        | 2048       |\n| \\\\(n_{vocab}\\\\)      | 50257/50400&dagger; (same tokenizer as GPT-2/3)  |\n| Positional Encoding  | [Rotary Position Embedding (RoPE)](https://arxiv.org/abs/2104.09864) |\n| RoPE Dimensions      | [64](https://github.com/kingoflolz/mesh-transformer-jax/blob/f2aa66e0925de6593dcbb70e72399b97b4130482/mesh_transformer/layers.py#L223) |\n<figcaption><p><strong>&ast;</strong> Each layer consists of one feedforward block and one self attention block.</p>\n<p><strong>&dagger;</strong> Although the embedding matrix has a size of 50400, only 50257 entries are used by the GPT-2 tokenizer.</p></figcaption></figure>\n\nThe model consists of 28 layers with a model dimension of 4096, and a feedforward dimension of 16384. The model\ndimension is split into 16 heads, each with a dimension of 256. Rotary Position Embedding (RoPE) is applied to 64\ndimensions of each head. The model is trained with a tokenization vocabulary of 50257, using the same set of BPEs as\nGPT-2/GPT-3.\n\n## Training data\n\nGPT-J 6B was trained on [the Pile](https://pile.eleuther.ai), a large-scale curated dataset created by [EleutherAI](https://www.eleuther.ai).\n\n## Training procedure\n\nThis model was trained for 402 billion tokens over 383,500 steps on TPU v3-256 pod. It was trained as an autoregressive language model, using cross-entropy loss to maximize the likelihood of predicting the next token correctly.\n\n## Intended Use and Limitations\n\nGPT-J learns an inner representation of the English language that can be used to extract features useful for downstream tasks. The model is best at what it was pretrained for however, which is generating text from a prompt.\n\n### How to use\n\nThis model can be easily loaded using the `AutoModelForCausalLM` functionality:\n\n```python\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\n\ntokenizer = AutoTokenizer.from_pretrained(\"EleutherAI/gpt-j-6B\")\nmodel = AutoModelForCausalLM.from_pretrained(\"EleutherAI/gpt-j-6B\")\n```\n\n### Limitations and Biases\n\nThe core functionality of GPT-J is taking a string of text and predicting the next token. While language models are widely used for tasks other than this, there are a lot of unknowns with this work. When prompting GPT-J it is important to remember that the statistically most likely next token is often not the token that produces the most \"accurate\" text. Never depend upon GPT-J to produce factually accurate output.\n\nGPT-J was trained on the Pile, a dataset known to contain profanity, lewd, and otherwise abrasive language. Depending upon use case GPT-J may produce socially unacceptable text. See [Sections 5 and 6 of the Pile paper](https://arxiv.org/abs/2101.00027) for a more detailed analysis of the biases in the Pile.\n\nAs with all language models, it is hard to predict in advance how GPT-J will respond to particular prompts and offensive content may occur without warning. We recommend having a human curate or filter the outputs before releasing them, both to censor undesirable content and to improve the quality of the results.\n\n## Evaluation results\n\n<figure>\n\n|  Model                   | Public      | Training FLOPs | LAMBADA PPL \u2193 | LAMBADA Acc \u2191 | Winogrande \u2191 | Hellaswag \u2191 | PIQA \u2191    | Dataset Size (GB) |\n|--------------------------|-------------|----------------|---            |---            |---           |---          |---        |-------------------|\n| Random Chance            | &check;     | 0              | ~a lot        | ~0%           | 50%          | 25%         | 25%       | 0                 |\n| GPT-3 Ada&ddagger;       | &cross;     | -----          | 9.95          | 51.6%         | 52.9%        | 43.4%       | 70.5%     | -----             |\n| GPT-2 1.5B               | &check;     | -----          | 10.63         | 51.21%        | 59.4%        | 50.9%       | 70.8%     | 40                |\n| GPT-Neo 1.3B&ddagger;    | &check;     | 3.0e21         | 7.50          | 57.2%         | 55.0%        | 48.9%       | 71.1%     | 825               |\n| Megatron-2.5B&ast;       | &cross;     | 2.4e21         | -----         | 61.7%         | -----        | -----       | -----     | 174               |\n| GPT-Neo 2.7B&ddagger;    | &check;     | 6.8e21         | 5.63          | 62.2%         | 56.5%        | 55.8%       | 73.0%     | 825               |\n| GPT-3 1.3B&ast;&ddagger; | &cross;     | 2.4e21         | 5.44          | 63.6%         | 58.7%        | 54.7%       | 75.1%     | ~800              |\n| GPT-3 Babbage&ddagger;   | &cross;     | -----          | 5.58          | 62.4%         | 59.0%        | 54.5%       | 75.5%     | -----             |\n| Megatron-8.3B&ast;       | &cross;     | 7.8e21         | -----         | 66.5%         | -----        | -----       | -----     | 174               |\n| GPT-3 2.7B&ast;&ddagger; | &cross;     | 4.8e21         | 4.60          | 67.1%         | 62.3%        | 62.8%       | 75.6%     | ~800              |\n| Megatron-11B&dagger;     | &check;     | 1.0e22         | -----         | -----         | -----        | -----       | -----     | 161               |\n| **GPT-J 6B&ddagger;**    | **&check;** | **1.5e22**     | **3.99**      | **69.7%**     | **65.3%**    | **66.1%**   | **76.5%** | **825**           |\n| GPT-3 6.7B&ast;&ddagger; | &cross;     | 1.2e22         | 4.00          | 70.3%         | 64.5%        | 67.4%       | 78.0%     | ~800              |\n| GPT-3 Curie&ddagger;     | &cross;     | -----          | 4.00          | 69.3%         | 65.6%        | 68.5%       | 77.9%     | -----             |\n| GPT-3 13B&ast;&ddagger;  | &cross;     | 2.3e22         | 3.56          | 72.5%         | 67.9%        | 70.9%       | 78.5%     | ~800              |\n| GPT-3 175B&ast;&ddagger; | &cross;     | 3.1e23         | 3.00          | 76.2%         | 70.2%        | 78.9%       | 81.0%     | ~800              |\n| GPT-3 Davinci&ddagger;   | &cross;     | -----          | 3.0           | 75%           | 72%          | 78%         | 80%       | -----             |\n<figcaption><p>Models roughly sorted by performance, or by FLOPs if not available.</p>\n\n<p><strong>&ast;</strong> Evaluation numbers reported by their respective authors. All other numbers are provided by\nrunning <a href=\"https://github.com/EleutherAI/lm-evaluation-harness/\"><code>lm-evaluation-harness</code></a> either with released\nweights or with API access. Due to subtle implementation differences as well as different zero shot task framing, these\nmight not be directly comparable. See <a href=\"https://blog.eleuther.ai/gpt3-model-sizes/\">this blog post</a> for more\ndetails.</p>\n\n<p><strong>\u2020</strong> Megatron-11B provides no comparable metrics, and several implementations using the released weights do not\nreproduce the generation quality and evaluations. (see <a href=\"https://github.com/huggingface/transformers/pull/10301\">1</a>\n<a href=\"https://github.com/pytorch/fairseq/issues/2358\">2</a> <a href=\"https://github.com/pytorch/fairseq/issues/2719\">3</a>)\nThus, evaluation was not attempted.</p>\n\n<p><strong>\u2021</strong> These models have been trained with data which contains possible test set contamination. The OpenAI GPT-3 models\nfailed to deduplicate training data for certain test sets, while the GPT-Neo models as well as this one is\ntrained on the Pile, which has not been deduplicated against any test sets.</p></figcaption></figure>\n\n## Citation and Related Information\n\n### BibTeX entry\n\nTo cite this model:\n```bibtex\n@misc{gpt-j,\n  author = {Wang, Ben and Komatsuzaki, Aran},\n  title = {{GPT-J-6B: A 6 Billion Parameter Autoregressive Language Model}},\n  howpublished = {\\url{https://github.com/kingoflolz/mesh-transformer-jax}},\n  year = 2021,\n  month = May\n}\n```\n\nTo cite the codebase that trained this model:\n```bibtex\n@misc{mesh-transformer-jax,\n  author = {Wang, Ben},\n  title = {{Mesh-Transformer-JAX: Model-Parallel Implementation of Transformer Language Model with JAX}},\n  howpublished = {\\url{https://github.com/kingoflolz/mesh-transformer-jax}},\n  year = 2021,\n  month = May\n}\n```\n\nIf you use this model, we would love to hear about it! Reach out on [GitHub](https://github.com/kingoflolz/mesh-transformer-jax), Discord, or shoot Ben an email.\n\n## Acknowledgements\n\nThis project would not have been possible without compute generously provided by Google through the\n[TPU Research Cloud](https://sites.research.google/trc/), as well as the Cloud TPU team for providing early access to the [Cloud TPU VM](https://cloud.google.com/blog/products/compute/introducing-cloud-tpu-vms) Alpha.\n\nThanks to everyone who have helped out one way or another (listed alphabetically):\n- [James Bradbury](https://twitter.com/jekbradbury) for valuable assistance with debugging JAX issues.\n- [Stella Biderman](https://www.stellabiderman.com), [Eric Hallahan](https://twitter.com/erichallahan), [Kurumuz](https://github.com/kurumuz/), and [Finetune](https://github.com/finetuneanon/) for converting the model to be compatible with the `transformers` package.\n- [Leo Gao](https://twitter.com/nabla_theta) for running zero shot evaluations for the baseline models for the table.\n- [Laurence Golding](https://github.com/researcher2/) for adding some features to the web demo.\n- [Aran Komatsuzaki](https://twitter.com/arankomatsuzaki) for advice with experiment design and writing the blog posts.\n- [Janko Prester](https://github.com/jprester/) for creating the web demo frontend.", "size_bytes": "12106053103", "downloads": 0}