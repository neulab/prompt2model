{"pretrained_model_name": "facebook/xglm-7.5B", "description": "---\nlanguage:\n- multilingual\n- en\n- ru\n- zh\n- de\n- es\n- fr\n- ja\n- it\n- pt\n- el\n- ko\n- fi\n- id\n- tr\n- ar\n- vi\n- th\n- bg\n- ca\n- hi\n- et\n- bn\n- ta\n- ur\n- sw\n- te\n- eu\n- my\n- ht\n- qu\nlicense: mit\nthumbnail: https://huggingface.co/front/thumbnails/facebook.png\ninference: false\n---\n\n# XGLM-7.5B\n\nXGLM-7.5B is a multilingual autoregressive language model (with 7.5 billion parameters) trained on a balanced corpus of a diverse set of languages totaling 500 billion sub-tokens. It was introduced in the paper [Few-shot Learning with Multilingual Language Models](https://arxiv.org/abs/2112.10668) by Xi Victoria Lin\\*, Todor Mihaylov, Mikel Artetxe, Tianlu Wang, Shuohui Chen, Daniel Simig, Myle Ott, Naman Goyal, Shruti Bhosale, Jingfei Du, Ramakanth Pasunuru, Sam Shleifer, Punit Singh Koura, Vishrav Chaudhary, Brian O'Horo, Jeff Wang, Luke Zettlemoyer, Zornitsa Kozareva, Mona Diab, Veselin Stoyanov, Xian Li\\* (\\*Equal Contribution). The original implementation was released in [this repository](https://github.com/pytorch/fairseq/tree/main/examples/xglm).\n\n## Training Data Statistics\n\nThe training data statistics of XGLM-7.5B is shown in the table below.\n\n| ISO-639-1| family          | name                    |  # tokens    |    ratio    |   ratio w/ lowRes upsampling |\n|:--------|:-----------------|:------------------------|-------------:|------------:|-------------:|\n| en      | Indo-European    | English                 | 803526736124 | 0.489906    |       0.3259 |\n| ru      | Indo-European    | Russian                 | 147791898098 | 0.0901079   |       0.0602 |\n| zh      | Sino-Tibetan     | Chinese                 | 132770494630 | 0.0809494   |       0.0483 |\n| de      | Indo-European    | German                  |  89223707856 | 0.0543992   |       0.0363 |\n| es      | Indo-European    | Spanish                 |  87303083105 | 0.0532282   |       0.0353 |\n| fr      | Indo-European    | French                  |  77419639775 | 0.0472023   |       0.0313 |\n| ja      | Japonic          | Japanese                |  66054364513 | 0.040273    |       0.0269 |\n| it      | Indo-European    | Italian                 |  41930465338 | 0.0255648   |       0.0171 |\n| pt      | Indo-European    | Portuguese              |  36586032444 | 0.0223063   |       0.0297 |\n| el      | Indo-European    | Greek (modern)          |  28762166159 | 0.0175361   |       0.0233 |\n| ko      | Koreanic         | Korean                  |  20002244535 | 0.0121953   |       0.0811 |\n| fi      | Uralic           | Finnish                 |  16804309722 | 0.0102455   |       0.0681 |\n| id      | Austronesian     | Indonesian              |  15423541953 | 0.00940365  |       0.0125 |\n| tr      | Turkic           | Turkish                 |  12413166065 | 0.00756824  |       0.0101 |\n| ar      | Afro-Asiatic     | Arabic                  |  12248607345 | 0.00746791  |       0.0099 |\n| vi      | Austroasiatic    | Vietnamese              |  11199121869 | 0.00682804  |       0.0091 |\n| th      | Tai\u2013Kadai        | Thai                    |  10842172807 | 0.00661041  |       0.044  |\n| bg      | Indo-European    | Bulgarian               |   9703797869 | 0.00591635  |       0.0393 |\n| ca      | Indo-European    | Catalan                 |   7075834775 | 0.0043141   |       0.0287 |\n| hi      | Indo-European    | Hindi                   |   3448390110 | 0.00210246  |       0.014  |\n| et      | Uralic           | Estonian                |   3286873851 | 0.00200399  |       0.0133 |\n| bn      | Indo-European    | Bengali, Bangla         |   1627447450 | 0.000992245 |       0.0066 |\n| ta      | Dravidian        | Tamil                   |   1476973397 | 0.000900502 |       0.006  |\n| ur      | Indo-European    | Urdu                    |   1351891969 | 0.000824241 |       0.0055 |\n| sw      | Niger\u2013Congo      | Swahili                 |    907516139 | 0.000553307 |       0.0037 |\n| te      | Dravidian        | Telugu                  |    689316485 | 0.000420272 |       0.0028 |\n| eu      | Language isolate | Basque                  |    105304423 | 6.42035e-05 |       0.0043 |\n| my      | Sino-Tibetan     | Burmese                 |    101358331 | 6.17976e-05 |       0.003  |\n| ht      | Creole           | Haitian, Haitian Creole |     86584697 | 5.27902e-05 |       0.0035 |\n| qu      | Quechuan         | Quechua                 |      3236108 | 1.97304e-06 |       0.0001 |\n\n## Model card\n\nFor intended usage of the model, please refer to the [model card](https://github.com/pytorch/fairseq/blob/main/examples/xglm/model_card.md) released by the XGLM-7.5B development team. \n\n## Example (COPA)\nThe following snippet shows how to evaluate our models (GPT-3 style, zero-shot) on the Choice of Plausible Alternatives (COPA) task, using examples in English, Chinese and Hindi.\n\n```python\nimport torch\nimport torch.nn.functional as F\n\nfrom transformers import XGLMTokenizer, XGLMForCausalLM\n\ntokenizer = XGLMTokenizer.from_pretrained(\"facebook/xglm-7.5B\")\nmodel = XGLMForCausalLM.from_pretrained(\"facebook/xglm-7.5B\")\n\ndata_samples = {\n    'en': [\n        {\n            \"premise\": \"I wanted to conserve energy.\",\n            \"choice1\": \"I swept the floor in the unoccupied room.\",\n            \"choice2\": \"I shut off the light in the unoccupied room.\",\n            \"question\": \"effect\",\n            \"label\": \"1\"\n        },\n        {\n            \"premise\": \"The flame on the candle went out.\",\n            \"choice1\": \"I blew on the wick.\",\n            \"choice2\": \"I put a match to the wick.\",\n            \"question\": \"cause\",\n            \"label\": \"0\"\n        }\n    ],\n    'zh': [\n        {\n            \"premise\": \"\u6211\u60f3\u8282\u7ea6\u80fd\u6e90\u3002\",\n            \"choice1\": \"\u6211\u5728\u7a7a\u7740\u7684\u623f\u95f4\u91cc\u626b\u4e86\u5730\u677f\u3002\",\n            \"choice2\": \"\u6211\u628a\u7a7a\u623f\u95f4\u91cc\u7684\u706f\u5173\u4e86\u3002\",\n            \"question\": \"effect\",\n            \"label\": \"1\"\n        },\n        {\n            \"premise\": \"\u8721\u70db\u4e0a\u7684\u706b\u7130\u7184\u706d\u4e86\u3002\",\n            \"choice1\": \"\u6211\u5439\u706d\u4e86\u706f\u82af\u3002\",\n            \"choice2\": \"\u6211\u628a\u4e00\u6839\u706b\u67f4\u653e\u5728\u706f\u82af\u4e0a\u3002\",\n            \"question\": \"cause\",\n            \"label\": \"0\"\n        }\n    ],\n    'hi': [\n        {\n            \"premise\": \"M te vle kons\u00e8ve en\u00e8ji.\",\n            \"choice1\": \"Mwen te fin baleye chanm lib la.\",\n            \"choice2\": \"Mwen te femen limy\u00e8 nan chanm lib la.\",\n            \"question\": \"effect\",\n            \"label\": \"1\"\n        },\n        {\n            \"premise\": \"Flam bouji a te etenn.\",\n            \"choice1\": \"Mwen te soufle bouji a.\",\n            \"choice2\": \"Mwen te limen m\u00e8ch bouji a.\",\n            \"question\": \"cause\",\n            \"label\": \"0\"\n        }\n    ]\n}\n\ndef get_logprobs(prompt):\n    inputs = tokenizer(prompt, return_tensors=\"pt\")\n    input_ids, output_ids = inputs[\"input_ids\"], inputs[\"input_ids\"][:, 1:]\n    outputs = model(**inputs, labels=input_ids)\n    logits = outputs.logits\n    logprobs = torch.gather(F.log_softmax(logits, dim=2), 2, output_ids.unsqueeze(2))\n    return logprobs\n\n# Zero-shot evaluation for the Choice of Plausible Alternatives (COPA) task.\n# A return value of 0 indicates that the first alternative is more plausible,\n# while 1 indicates that the second alternative is more plausible.\ndef COPA_eval(prompt, alternative1, alternative2):\n    lprob1 = get_logprobs(prompt + \"\\n\" + alternative1).sum()\n    lprob2 = get_logprobs(prompt + \"\\n\" + alternative2).sum()\n    return 0 if lprob1 > lprob2 else 1\n\nfor lang in data_samples_long:\n    for idx, example in enumerate(data_samples_long[lang]):\n        predict = COPA_eval(example[\"premise\"], example[\"choice1\"], example[\"choice2\"])\n        print(f'{lang}-{idx}', predict, example['label'])\n        \n# en-0 1 1\n# en-1 0 0\n# zh-0 1 1\n# zh-1 0 0\n# hi-0 1 1\n# hi-1 0 0\n```", "size_bytes": "14985725891", "downloads": 2314}