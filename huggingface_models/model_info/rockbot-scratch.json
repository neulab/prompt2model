{"pretrained_model_name": "bigjoedata/rockbot-scratch", "description": "\n# \ud83c\udfb8 \ud83e\udd41 Rockbot \ud83c\udfa4 \ud83c\udfa7 \nA [GPT-2](https://openai.com/blog/better-language-models/) based lyrics generator fine-tuned on the writing styles of 16000 songs by 270 artists across MANY genres (not just rock).\n\n**Instructions:** Type in a fake song title, pick an artist, click \"Generate\".\n\nMost language models are imprecise and Rockbot is no exception. You may see NSFW lyrics unexpectedly. I have made no attempts to censor. Generated lyrics may be repetitive and/or incoherent at times, but hopefully you'll encounter something interesting or memorable.\n\nOh, and generation is resource intense and can be slow. I set governors on song length to keep generation time somewhat reasonable. You may adjust song length and other parameters on the left or check out [Github](https://github.com/bigjoedata/rockbot) to spin up your own Rockbot.\n\nJust have fun.\n\n[Demo](https://share.streamlit.io/bigjoedata/rockbot/main/src/main.py) Adjust settings to increase speed\n\n[Github](https://github.com/bigjoedata/rockbot)\n\n[GPT-2 124M version Model page on Hugging Face](https://huggingface.co/bigjoedata/rockbot)\n\n[DistilGPT2 version Model page on Hugging Face](https://huggingface.co/bigjoedata/rockbot-distilgpt2/) This is leaner with the tradeoff being that the lyrics are more simplistic.\n\n\ud83c\udfb9 \ud83e\ude98 \ud83c\udfb7 \ud83c\udfba \ud83e\ude97  \ud83e\ude95 \ud83c\udfbb\n## Background\nWith the shutdown of [Google Play Music](https://en.wikipedia.org/wiki/Google_Play_Music) I used Google's takeout function to gather the metadata from artists I've listened to over the past several years. I wanted to take advantage of this bounty to build something fun. I scraped the top 50 lyrics for artists I'd listened to at least once from [Genius](https://genius.com/), then fine tuned [GPT-2's](https://openai.com/blog/better-language-models/) 124M token model using the [AITextGen](https://github.com/minimaxir/aitextgen) framework after considerable post-processing. For more on generation, see [here.](https://huggingface.co/blog/how-to-generate)\n\n### Full Tech Stack\n[Google Play Music](https://en.wikipedia.org/wiki/Google_Play_Music)  (R.I.P.). \n[Python](https://www.python.org/). \n[Streamlit](https://www.streamlit.io/). \n[GPT-2](https://openai.com/blog/better-language-models/). \n[AITextGen](https://github.com/minimaxir/aitextgen). \n[Pandas](https://pandas.pydata.org/). \n[LyricsGenius](https://lyricsgenius.readthedocs.io/en/master/). \n[Google Colab](https://colab.research.google.com/) (GPU based Training). \n[Knime](https://www.knime.com/) (data cleaning). \n\n\n## How to Use The Model\nPlease refer to [AITextGen](https://github.com/minimaxir/aitextgen) for much better documentation.\n\n### Training Parameters Used\n\n    ai.train(\"lyrics.txt\",\n             line_by_line=False,\n             from_cache=False,\n             num_steps=10000,\n             generate_every=2000,\n             save_every=2000,\n             save_gdrive=False,\n             learning_rate=1e-3,\n             batch_size=3,\n             eos_token=\"<|endoftext|>\",\n             #fp16=True\n             )\n###  To Use\n\n\n    Generate With Prompt (Use Title Case):\n    Song Name\n    BY\n    Artist Name\n \n", "size_bytes": "104737544", "downloads": 10}