{"pretrained_model_name": "abinayam/gpt-2-tamil", "description": "---\n\nlanguage: ta\ndatasets:\n- oscar\n- IndicNLP\nwidget:\n- text: '\u0b92\u0bb0\u0bc1 \u0b8a\u0bb0\u0bbf\u0bb2\u0bc7 \u0b92\u0bb0\u0bc1 \u0b95\u0bbe\u0b95\u0bcd\u0b95\u0bc8\u0b95\u0bcd\u0b95\u0bc1'\n\n---\n# GPT2-Tamil\n\nThis repository is created as part of the Flax/Jax community week by Huggingface. The aim of this project is to pretrain a language model using GPT-2 specifically for Tamil language. \n\n## Setup:\nTo setup the project, run the following command,\n```python\npip install -r requirements.txt\n```\n\n## Model:\nPretrained model on Tamil language using a causal language modeling (CLM) objective.\n \n## Dataset Used:\nThe GTP-2 model is trained on [oscar dataset - ta](https://huggingface.co/datasets/oscar) and [IndicNLP dataset - ta](https://indicnlp.ai4bharat.org/corpora/)\n\n## Intended uses & limitations:\nYou can use the raw model for next sentence prediction, but it's mostly intended to be fine-tuned on a downstream task. See the [model hub](https://huggingface.co/models?filter=gpt2) to look for fine-tuned versions on a task that interests you.\n\n## How to pretrain the model:\nTo perform training, do the following steps,\n\n- Export the model directory (where you want to store the model artifacts like config, tokenizer, etc.)\n```python\n>>> export MODEL_DIR=<model_dir>\n```\n- Create the config.json by running the following command,\n```python\n>>> python src/create_config.py\n```\n- Create the tokenizer by running the following command,\n```python\n>>> python src/train_tokenizer.py\n```\n- Once the config and tokenizer is created, run the following script to start training the flax model\n```python\n>>> python scripts/train_gpt2-oscar-tamil.sh\n```\n\n## How to use:\nTo perform language generation using the model, pipeline can be used directly.\n\n- First convert the flax model to pytorch using the following command,\n```python\npython src/convert_flax_to_pytorch.py\n```\n- Use the following snippet to perform language generation,\n```python\n >>> from transformers import AutoTokenizer, AutoModelWithLMHead, pipeline\n >>> model_name = 'abinayam/gpt-2-tamil'\n >>> model = AutoModelWithLMHead.from_pretrained(model_name)\n >>> tokenizer = AutoTokenizer.from_pretrained(model_name)\n >>> set_seed(42)\n >>> input_text = \"\u0b92\u0bb0\u0bc1 \u0b8a\u0bb0\u0bbf\u0bb2\u0bc7 \u0b92\u0bb0\u0bc1 \u0b95\u0bbe\u0b95\u0bcd\u0b95\u0bc8\u0b95\u0bcd\u0b95\u0bc1\"\n >>> max_len = 300\n >>> no_seq = 5\n >>> generator = pipeline('text-generation', model=model, tokenizer=tokenizer)\n >>> sequence = generator(input_text, max_length=max_len, num_return_sequences=no_seq)\n```\n", "size_bytes": "510401385", "downloads": 68}