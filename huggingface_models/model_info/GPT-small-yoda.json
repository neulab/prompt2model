{"pretrained_model_name": "dead69/GPT-small-yoda", "description": "---\n\nthumbnail: https://huggingface.co/front/thumbnails/dialogpt.png\n\ntags:\n\n- conversational\n\nlicense: mit\n\n---\n\n# DialoGPT Trained on the Speech of a Game Character\n\n\nChat with the model:\n\n```python\n\nfrom transformers import AutoTokenizer, AutoModelWithLMHead\n\n  \n\ntokenizer = AutoTokenizer.from_pretrained(\"dead69/GTP-small-yoda\")\n\nmodel = AutoModelWithLMHead.from_pretrained(\"dead69/GTP-small-yoda\")\n\n# Let's chat for 4 lines\n\nfor step in range(10):\n\n    # encode the new user input, add the eos_token and return a tensor in Pytorch\n\n    new_user_input_ids = tokenizer.encode(input(\">> User:\") + tokenizer.eos_token, return_tensors='pt')\n\n    # print(new_user_input_ids)\n\n    # append the new user input tokens to the chat history\n\n    bot_input_ids = torch.cat([chat_history_ids, new_user_input_ids], dim=-1) if step > 0 else new_user_input_ids\n\n    # generated a response while limiting the total chat history to 1000 tokens, \n\n    chat_history_ids = model.generate(\n\n        bot_input_ids, max_length=200,\n\n        pad_token_id=tokenizer.eos_token_id,  \n\n        no_repeat_ngram_size=3,       \n\n        do_sample=True, \n\n        top_k=100, \n\n        top_p=0.7,\n\n        temperature=0.8\n\n    )\n\n    \n\n    # pretty print last ouput tokens from bot\n\n    print(\"Master YODA: {}\".format(tokenizer.decode(chat_history_ids[:, bot_input_ids.shape[-1]:][0], skip_special_tokens=True)))\n\n```", "size_bytes": "510405883", "downloads": 0}