{"pretrained_model_name": "sander-wood/tunesformer", "description": "---\nlicense: mit\npipeline_tag: text-generation\nwidget:\n- text: ''\ntags:\n- music\ndatasets:\n- sander-wood/massive_abcnotation_dataset\n---\n\n# TunesFormer\n\n## Model description\n\nTunesFormer is a Transformer-based melody generation system trained on 285,449 melodies with musical forms (represented by control codes), where all scores are represented in ABC notation. It was introduced in the paper [TunesFormer: Forming Tunes with Control Codes](https://arxiv.org/abs/2301.02884) by Wu et al. The code is released in [this repository](https://github.com/sander-wood/tunesformer), and the dataset is released in [huggingface](https://huggingface.co/datasets/sander-wood/massive_abcnotation_dataset). \n\nBy utilizing specific symbols commonly found in ABC notation to indicate section boundaries, TunesFormer can understand and generate melodies with given musical forms based on control codes. The checkpoint released here is TunesFormer-GP (Global Placement), where all the control codes are placed at the beginning of the ABC notation.\n\nThis music generation model is available for online use and experience on [TunesFormer: Forming Tunes with Control Codes](https://huggingface.co/spaces/sander-wood/tunesformer). With this online platform, you can freely explore TunesFormer and receive a generated sheet music output from the model.\n\n## Intended uses & limitations\n\nYou can use this model for melody generation conditioned on musical forms. All scores generated by this model can be written on one stave (for vocal solo or instrumental solo) in standard classical notation, and are in a variety of styles, e.g., blues, classical, folk, jazz, pop, and world music. The generated tunes are in ABC notation, and can be converted to sheet music or audio using [this website](https://ldzhangyx.github.io/abc/), or [this software](https://sourceforge.net/projects/easyabc/).\n\nTunesFormer supports the generation of up to 8 sections, and up to 32 bars per section. In addition, although TunesFormer mostly generates music correctly according to the control codes, due to the random nature of sampling, the musical structure generated by the model occasionally does not match that specified by the control codes when more than 6 sections are generated, or when more than 17 bars are generated for a single section. For more information, please check [our paper](https://arxiv.org/abs/2301.02884).\n\n### How to use\n\n1. Install dependencies for the code released in [this repository](https://github.com/sander-wood/tunesformer):\n```\ntorch                        1.9.1+cu111\nsamplings                    0.1.7\ntransformers                 4.18.0\n```\n\n2. Set the `control_codes` and `prompt` in the script `run_inference.py` for conditional music generation. \n```\ncontrol_codes = \"[SECS_3][BARS_4][SIM_6][BARS_4][SIM_10][SIM_6][BARS_4]\"\nprompt = \"\"\"L:1/4\nM:4/4\nK:C\n\"C\" C C G G |\"F\" A A\"C\" G2 |\"G\" F F\"C\" E E |\"G\" D D\"C\" C2 ||\"\"\"\n```\nFor TunesFormer, the input is a concatenation of `control_codes` and `prompt`. Both `control_codes` and `prompt` are optional. However, if you need to set the prompt, you must set the control codes.\n \n3. Run the script `run_inference.py`. When running a script for the first time, the downloaded files will be cached for future reuse.\n\n```\npython run_inference.py -num_tunes 3 -max_length 1024 -top_p 0.9 -temperature 1.0 -seed 1\n```\n\n4. Enjoy tunes in the folder `output_tunes`! If you want to convert these ABC tunes to sheet music or audio, please refer to `Intended uses & limitations`.\n```\nX:1\nL:1/4\nM:4/4\nK:C\n\"C\" C C G G |\"F\" A A\"C\" G2 |\"G\" F F\"C\" E E |\"G\" D D\"C\" C2 ||\"C\" G G\"F\" A A |\"G\" G G\"C\" E2 | \n\"G\" F F\"C\" E E |\"G\" D D\"C\" C2 ||\"C\" C C G G |\"F\" A A\"C\" G2 |\"G\" F F\"C\" E E |\"G\" D D\"C\" C2 |]\n\nX:2\nL:1/4\nM:4/4\nK:C\n\"C\" C C G G |\"F\" A A\"C\" G2 |\"G\" F F\"C\" E E |\"G\" D D\"C\" C2 ||\"C\" E E\"F\" F F |\"C\" G G\"F\" A2 | \n\"G7\" F F\"C\" E E |\"G\" D D\"C\" C2 ||\"C\" C C G G |\"F\" A A\"C\" G2 |\"G\" F F\"C\" E E |\"G\" D D\"C\" C2 |]\n\nX:3\nL:1/4\nM:4/4\nK:C\n\"C\" C C G G |\"F\" A A\"C\" G2 |\"G\" F F\"C\" E E |\"G\" D D\"C\" C2 ||\"C\" G G\"F\" A A |\"C\" G G\"F\" F2 | \n\"C\" E E\"G\" D D |\"G\" D D\"C\" C2 ||\"C\" C C G G |\"F\" A A\"C\" G2 |\"G\" F F\"C\" E E |\"G\" D D\"C\" C2 |]\n```\n\n### Usage\n```\noptional arguments:\n  -h, --help            show this help message and exit\n  -num_tunes NUM_TUNES  the number of independently computed returned tunes\n  -max_length MAX_LENGTH\n                        integer to define the maximum length in tokens of each\n                        tune\n  -top_p TOP_P          float to define the tokens that are within the sample\n                        operation of text generation\n  -temperature TEMPERATURE\n                        the temperature of the sampling operation\n  -seed SEED            seed for randomstate\n```\n\n### BibTeX entry and citation info\n\n```bibtex\n@misc{https://doi.org/10.48550/arxiv.2301.02884,\n  doi = {10.48550/ARXIV.2301.02884},\n  \n  url = {https://arxiv.org/abs/2301.02884},\n  \n  author = {Wu, Shangda and Sun, Maosong},\n  \n  keywords = {Sound (cs.SD), Audio and Speech Processing (eess.AS), FOS: Computer and information sciences, FOS: Computer and information sciences, FOS: Electrical engineering, electronic engineering, information engineering, FOS: Electrical engineering, electronic engineering, information engineering},\n  \n  title = {TunesFormer: Forming Tunes with Control Codes},\n  \n  publisher = {arXiv},\n  \n  year = {2023},\n  \n  copyright = {Creative Commons Attribution 4.0 International}\n}\n```", "size_bytes": "356556905", "downloads": 131}